<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冷暖自知</title>
  
  <subtitle>主动使你掌控,被动使你沉迷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wl960127.top/"/>
  <updated>2022-06-15T15:27:52.895Z</updated>
  <id>https://www.wl960127.top/</id>
  
  <author>
    <name>拿刀砍人手别抖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年年中学习计划安排</title>
    <link href="https://www.wl960127.top/posts/544ed6ff/"/>
    <id>https://www.wl960127.top/posts/544ed6ff/</id>
    <published>2022-06-15T14:31:43.000Z</published>
    <updated>2022-06-15T15:27:52.895Z</updated>
    
    <content type="html"><![CDATA[<h4 id="编程笔记复盘"><a href="#编程笔记复盘" class="headerlink" title="编程笔记复盘"></a>编程笔记复盘</h4><ul><li>博客网站笔记查缺补漏</li><li>编程语言专栏整合归纳<ul><li><input disabled="" type="checkbox"> Flutter<ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=251#/content">Flutter快学快用24讲</a></li></ul></li><li><input disabled="" type="checkbox"> Android<ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=67#/content">Android 工程师进阶 34 讲</a> </li><li><a href="https://time.geekbang.org/column/intro/142">Android开发高手课</a></li></ul></li><li><input disabled="" type="checkbox"> Golang</li><li><input disabled="" type="checkbox"> Java<ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=16#/content">Java 并发编程 78 讲</a> </li><li><a href="https://time.geekbang.org/column/intro/82">Java核心技术面试精讲</a></li></ul></li></ul></li><li>编程思维专栏整合归纳<ul><li><input disabled="" type="checkbox"> 设计模式<ul><li><a href="https://time.geekbang.org/column/intro/250">设计模式之美</a> </li><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=710#/content">趣学设计模式</a></li></ul></li><li><input disabled="" type="checkbox"> 数据结构与算法<ul><li><a href="https://time.geekbang.org/column/intro/126">数据结构与算法之美</a></li><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=3#/content">300分钟搞定数据结构与算法</a></li></ul></li></ul></li><li>基础学科整合归纳<ul><li><input disabled="" type="checkbox"> 操作系统<ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=478#/content">重学操作系统</a> </li></ul></li><li><input disabled="" type="checkbox"> 计算机网络<ul><li><a href="https://www.lanqiao.cn/courses/3384">动手实战网络编程</a> </li><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=837#/content">计算机网络通关29讲</a></li></ul></li><li><input disabled="" type="checkbox"> JVM基础</li><li><input disabled="" type="checkbox"> Socket<ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=516#/content">Netty 核心原理剖析与 RPC 实践</a></li></ul></li></ul></li></ul><hr><h4 id="工具使用整合"><a href="#工具使用整合" class="headerlink" title="工具使用整合"></a>工具使用整合</h4><ul><li>Docker</li><li>PostgreSQL</li><li>typora</li><li>UML</li></ul><hr><h4 id="职业相关"><a href="#职业相关" class="headerlink" title="职业相关"></a>职业相关</h4><ul><li><p>产品</p><ul><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=433#/content">产品体验设计思维与实操</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=910#/content">新时代产品经理进阶之路</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=569#/content">用户体验设计干货笔记</a> </li></ul></li></ul><ul><li><p>架构</p><ul><li><input disabled="" type="checkbox"> <a href="https://time.geekbang.org/column/intro/100025201">许式伟的架构课</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=592#/content">架构设计面试精讲</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=595#/content">23讲搞定后台架构实战</a></li></ul></li><li><p><strong>PMP</strong></p></li></ul><hr><h4 id="技能相关"><a href="#技能相关" class="headerlink" title="技能相关"></a>技能相关</h4><ul><li><p>数据分析</p><ul><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1012#/content">竞品分析实操手册</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=230#/content">数据分析思维与实战 23 讲</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=820#/content">玩转 Python 数据分析</a> </li></ul></li></ul><ul><li><p>左耳听风</p><ul><li><input disabled="" type="checkbox"> <a href="https://time.geekbang.org/column/intro/48">左耳听风</a></li></ul></li></ul><ul><li>ios入门</li></ul><ul><li>WebRtc</li></ul><ul><li><p>性能分析</p><ul><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=729#/content">应用性能分析实战</a></li></ul></li></ul><ul><li><p>视觉笔记</p><ul><li><input disabled="" type="checkbox"> <a href="https://time.geekbang.org/column/intro/306">视觉笔记入门课</a></li></ul></li></ul><ul><li><p>敏捷开发</p><ul><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=561#/content">DevOps 落地笔记</a></li><li><input disabled="" type="checkbox"> <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=274#/content">腾讯敏捷项目管理实战</a></li></ul></li></ul><ul><li><p>摄影</p><ul><li><input disabled="" type="checkbox"> <a href="https://time.geekbang.org/column/intro/267">摄影入门课</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      仅以安排2022年下半年归纳复盘
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter Flavor</title>
    <link href="https://www.wl960127.top/posts/cc4eaf09/"/>
    <id>https://www.wl960127.top/posts/cc4eaf09/</id>
    <published>2022-05-23T12:19:41.000Z</published>
    <updated>2022-06-15T15:30:57.419Z</updated>
    
    <summary type="html">
    
      常规应用在一个设备需要按照需求启动不同配置
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flutter异常捕获</title>
    <link href="https://www.wl960127.top/posts/612b1302/"/>
    <id>https://www.wl960127.top/posts/612b1302/</id>
    <published>2022-05-18T15:43:44.000Z</published>
    <updated>2022-05-18T16:00:09.804Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1421#/detail/pc?id=9288">网易有道 Flutter 在线编程实践总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1421#/detail/pc?id=9288&quot;&gt;网易有道 Flutter 在线编程实践总结&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.wl960127.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter性能监控</title>
    <link href="https://www.wl960127.top/posts/5ad64cd8/"/>
    <id>https://www.wl960127.top/posts/5ad64cd8/</id>
    <published>2022-05-18T15:43:10.000Z</published>
    <updated>2022-05-18T15:59:03.259Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1421#/detail/pc?id=9288">网易有道 Flutter 在线编程实践总结</a></p><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="build耗时优化"><a href="#build耗时优化" class="headerlink" title="build耗时优化"></a>build耗时优化</h4><h4 id="paint耗时优化"><a href="#paint耗时优化" class="headerlink" title="paint耗时优化"></a>paint耗时优化</h4>]]></content>
    
    <summary type="html">
    
      Flutter性能监控及优化
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.wl960127.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter视图绘制流程</title>
    <link href="https://www.wl960127.top/posts/b3d84f2a/"/>
    <id>https://www.wl960127.top/posts/b3d84f2a/</id>
    <published>2022-05-18T15:42:50.000Z</published>
    <updated>2022-05-18T15:59:00.163Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1421#/detail/pc?id=9288">网易有道 Flutter 在线编程实践总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1421#/detail/pc?id=9288&quot;&gt;网易有道 Flutter 在线编程实践总结&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.wl960127.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Pigeon的使用</title>
    <link href="https://www.wl960127.top/posts/69e2e579/"/>
    <id>https://www.wl960127.top/posts/69e2e579/</id>
    <published>2022-05-12T14:03:02.000Z</published>
    <updated>2022-06-14T14:48:35.512Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="dart"><a href="#dart" class="headerlink" title="dart"></a>dart</h5><ul><li><p>依赖</p></li><li><p>脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flutter pub run pigeon \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应的文件夹按照自己需要的逻辑创建</span></span><br><span class="line">  --input config/pigeon_manager.dart \ #用户逻辑</span><br><span class="line">  --dart_out lib/pigeons/pigeon_manager.dart \ #运行后生成的dart文件</span><br><span class="line"><span class="meta">  #</span><span class="bash"> oc格式的生成文件</span></span><br><span class="line">  --objc_header_out ios/Runner/PigeonManager.h \</span><br><span class="line">  --objc_source_out ios/Runner/PigeonManager.m \</span><br><span class="line">  --objc_prefix FLT \</span><br><span class="line"><span class="meta">  #</span><span class="bash"> java格式的生成文件  </span></span><br><span class="line">  --java_out ./android/app/src/main/java/io/flutter/pigeon/PigeonManager.java \</span><br><span class="line">  --java_package "io.flutter.pigeon"</span><br></pre></td></tr></table></figure></li><li><p>Demo</p><p><strong>config/pigeon_manager.dart</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 数据类</span></span><br><span class="line"><span class="comment">//class F2NMessage&#123;</span></span><br><span class="line"><span class="comment">//  String? msg;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//class N2FMessage&#123;</span></span><br><span class="line"><span class="comment">// String? msg2;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 调用原生</span></span><br><span class="line"><span class="meta">@HostApi</span>()</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Api2Native</span></span>&#123;</span><br><span class="line">  <span class="comment">// 没有返回值一定要使用 void 关键字，根据需求决定是否要@async</span></span><br><span class="line">  <span class="meta">@async</span></span><br><span class="line">  <span class="built_in">String</span> getPlatformVersion();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// 调用flutter</span></span><br><span class="line"><span class="meta">@FlutterApi</span>()</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Api2Flutter</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> sessionInvalid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Pigeon2Flutter.dart</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Flutter端  Native2Flutter实现  类名自定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pigeon2Flutter</span> <span class="keyword">extends</span> <span class="title">Api2Flutter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> sessionInvalid() &#123;</span><br><span class="line">    debugPrint(<span class="string">"******* ✈️ 原生平台发送的数据 ✈️ *******"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.dart</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;Key? key, required <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">/// 注册事件</span></span><br><span class="line">    Api2Flutter.setup(Pigeon2Flutter());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">String</span> version = <span class="string">"你瞅啥"</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// 与原生通讯</span></span><br><span class="line">  _incrementCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">   <span class="keyword">final</span> api = Api2Native();</span><br><span class="line">   version = <span class="keyword">await</span> api.getPlatformVersion();</span><br><span class="line">   setState(() &#123;  </span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children:  &lt;Widget&gt;[</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'版本号 : <span class="subst">$version</span>'</span>,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">'发送'</span>,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h5><p><strong>MainActivity.kt</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span>: <span class="type">FlutterActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> flutterApi: PigeonManager.Api2Flutter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     这个类可以随意写在哪，不在FlutterActivity 的话</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">PigeonToNative</span> : <span class="type">PigeonManager.Api2Native&#123;</span></span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPlatformVersion</span><span class="params">(result: <span class="type">PigeonManager</span>.<span class="type">Result</span>&lt;<span class="type">String</span>&gt;?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> version = <span class="string">"Android <span class="subst">$&#123;android.os.Build.VERSION.RELEASE&#125;</span>"</span></span><br><span class="line">            result?.success(version)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureFlutterEngine</span><span class="params">(flutterEngine: <span class="type">FlutterEngine</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.configureFlutterEngine(flutterEngine)</span><br><span class="line"></span><br><span class="line">        PigeonManager.Api2Native.setup(flutterEngine.dartExecutor.binaryMessenger, PigeonToNative())</span><br><span class="line">        flutterApi = PigeonManager.Api2Flutter(flutterEngine.dartExecutor.binaryMessenger)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        Timer().schedule(<span class="keyword">object</span>:TimerTask()&#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">               Handler(Looper.getMainLooper()).post &#123;</span><br><span class="line">                   flutterApi.sessionInvalid &#123;</span><br><span class="line">                       Log.d(<span class="string">"Native call "</span>, <span class="string">" flutter!! Are you ok ？ "</span>)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h5><p><strong>Runner-Bridging-Header.h</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;PigeonManager.h&quot;</span><br></pre></td></tr></table></figure><p><strong>AppDelegate.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Flutter</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">FlutterAppDelegate</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> _flutterApi : <span class="type">FLTApi2Flutter?</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="number">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: <span class="keyword">Any</span>]?</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// 注册向原生平台通讯管道  </span></span><br><span class="line">    <span class="keyword">let</span> controller : <span class="type">FlutterViewController</span> = window?.rootViewController <span class="keyword">as</span>! <span class="type">FlutterViewController</span></span><br><span class="line">    <span class="type">FLTApi2NativeSetup</span>(controller.binaryMessenger, <span class="type">PigeonService</span>())</span><br><span class="line">      </span><br><span class="line">    <span class="type">GeneratedPluginRegistrant</span>.register(with: <span class="keyword">self</span>)</span><br><span class="line">    _flutterApi=<span class="type">FLTApi2Flutter</span>(binaryMessenger: controller.binaryMessenger)</span><br><span class="line">      </span><br><span class="line">     <span class="comment">// 触发原生通讯</span></span><br><span class="line">      <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + .milliseconds(<span class="number">500</span>)) &#123;</span><br><span class="line">          <span class="keyword">self</span>._flutterApi?.sessionInvalid(completion: &#123;(error) <span class="keyword">in</span></span><br><span class="line">              <span class="built_in">print</span>(<span class="string">"*******===Native Call flutter func!===*******"</span>)</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.application(application, didFinishLaunchingWithOptions: launchOptions)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 监听原生平台通讯信息 （可以新建文件，随意）</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span>  <span class="title">PigeonService</span>: <span class="title">NSObject</span>,<span class="title">FLTApi2Native</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getPlatformVersionWithError</span><span class="params">(<span class="number">_</span> error: AutoreleasingUnsafeMutablePointer&lt;FlutterError?&gt;)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="string">"iOS "</span> + <span class="type">UIDevice</span>.current.systemVersion;</span><br><span class="line">            projectDetail.</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4>]]></content>
    
    <summary type="html">
    
      Flutter与原生平台通讯
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.wl960127.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>2021读书记录</title>
    <link href="https://www.wl960127.top/posts/40b4dd29/"/>
    <id>https://www.wl960127.top/posts/40b4dd29/</id>
    <published>2021-11-07T06:36:16.000Z</published>
    <updated>2022-05-18T15:50:25.333Z</updated>
    
    <content type="html"><![CDATA[<ul><li><input checked="" disabled="" type="checkbox"> 知行合一王阳明</li><li><input checked="" disabled="" type="checkbox"> 古代中国文化讲义</li><li><input checked="" disabled="" type="checkbox"> 国学基础知识</li><li><input checked="" disabled="" type="checkbox"> 树上的男爵</li><li><input checked="" disabled="" type="checkbox"> 星之继承者</li><li><input checked="" disabled="" type="checkbox"> 汉朝那些事</li><li><input checked="" disabled="" type="checkbox"> 明朝那些事</li><li><input checked="" disabled="" type="checkbox"> 论中国</li><li><input checked="" disabled="" type="checkbox"> 万物有灵且美</li></ul>]]></content>
    
    <summary type="html">
    
      简单记录下读书记录
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>IO与Socket简单笔记</title>
    <link href="https://www.wl960127.top/posts/2218b608/"/>
    <id>https://www.wl960127.top/posts/2218b608/</id>
    <published>2021-11-07T06:35:10.000Z</published>
    <updated>2021-11-22T14:24:53.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><ul><li>不仅是对文件的操作，网络中比如Socket也是IO操作目标</li><li>InputStream/OutputStream用于读写字节（操作图片文件）</li><li>Reader/Writer则是基于操作字符，增加了字符编解码等功能（读写文本信息）</li><li>BufferOutputStream等带缓冲区的实现，可以避免频繁磁盘读写从而提高处理效率（记得flush）</li></ul><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><h5 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h5><p>传统IO，基于流模型实现，同步阻塞</p><h5 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h5><p>提供了Channel、Selector、Buffer等新抽象，可构建多路复用、同步非阻塞的IO，以及提供更接近操作系统底层的高性能数据操作方式</p><h5 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h5><p>Asynchronous IO，改进版NIO。引入了异步非阻塞IO</p><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><ul><li><p>synchronous</p><p>一种可靠的运行机制，进行同步操作的时候，后续的任务需要等待当前调用返回之后才会进行下一步</p></li><li><p>asynchronous</p><p>与同步相反，其他任务不需要等待当前调用返回，通常依靠事件、回调等机制来实现任务次序的关系</p></li></ul><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><ul><li><p>blocking</p><p>进行阻塞操作的时候，线程会处理阻塞状态、无法从事其他任务。只有当条件就绪才能继续</p></li><li><p>non-blocking</p><p>不管IO操作是否结束，直接返回，相应的操作在后台继续处理</p></li></ul><hr><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p><img src="Socket%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B.png" alt="Socket通讯流程"></p><p>既是一种编程模型，又是一段程序，同时又是一个双向文件（应用&lt;===&gt;缓冲区）</p><p>一个线程要处理所有关注的Socket产生的变化，这种情况就构成了<code>I/O多路复用</code></p><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><p>阻塞型，且判断消息是否需要发送，需要遍历关注的Socket集合</p><h5 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h5><ul><li>能监听的文件描述符个数受限于 <strong><em>\</em>FD_SETSIZE**</strong>，默认1024；注意的是修改进程打开的文件描述符个数并不能改变select监听文件的个数</li><li>处理1024以下的客户端时候，选择select最合适；如果连接客户端过多，select会采取轮询算法，会降低服务器的性能及处理效率</li></ul><h5 id="poll"><a href="#poll" class="headerlink" title="poll()"></a>poll()</h5><ul><li>优化了编程模型，但是性能差距不大</li></ul><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h4><p>非阻塞型，将进程关注的文件描述符存入了一颗二叉搜索树</p><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll()"></a>epoll()</h5><ul><li>高并发连接中，不但能够显著提高程序在系统的CPU利用率，而且还是在只有少量连接活跃的情况下；因为会复用文件描述符来传递结果，而不需要每次都等待事件的到来才进行重新准备要被连接的文件描述符</li><li>在获取事件的时候，不用遍历整个被监听的描述符集合，只需在遍历那些被内核IO异步唤醒而加入准备队列的描述符结合即可</li></ul><hr><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><ul><li>支持可靠协议，使用了请求响应和连接模型（三次握手、四次挥手）</li><li>封包排序（有序发出，无需传输，有序组合），利用了滑动窗口、快速重传等方法</li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li>不支持可靠协议，但是支持基础的数据校验和，只是本身不处理数据丢失</li><li>只给数据报标注了序列号，不管排序</li></ul><h5 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h5><h5 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h5><hr><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><h5 id="多进程并发"><a href="#多进程并发" class="headerlink" title="多进程并发"></a>多进程并发</h5><h5 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h5><h5 id="多路IO复用"><a href="#多路IO复用" class="headerlink" title="多路IO复用"></a>多路IO复用</h5><h5 id="多协程并发"><a href="#多协程并发" class="headerlink" title="多协程并发"></a>多协程并发</h5><p>​    </p>]]></content>
    
    <summary type="html">
    
      关于IO分类与Socket的一些简单记录
    
    </summary>
    
      <category term="Java" scheme="https://www.wl960127.top/categories/Java/"/>
    
    
      <category term="知识点" scheme="https://www.wl960127.top/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中的Widget</title>
    <link href="https://www.wl960127.top/posts/69f1c3a4/"/>
    <id>https://www.wl960127.top/posts/69f1c3a4/</id>
    <published>2021-10-20T09:01:50.000Z</published>
    <updated>2021-11-20T09:10:18.462Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h4><ul><li><code>StatefulWidge</code>与<code>StatelessWidget</code>继承自<code>Widget</code></li><li><code>Widget</code>是一个配置文件，<code>Element</code>才是真正被使用、修改的对象<img src="widget类图.png"  /></li></ul><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><ul><li><p><code>StatefulWidge</code>与<code>StatelessWidget</code>的<code>craeteElement</code>都分别生成对应的实例<code>StatefulElement</code>、<code>StatelessElement</code>，而<code>Element</code>最终还实现了<code>BuildContext</code>，源码中<code>BuildContext</code>对于自身的描述为:实际是<code>Element</code>对象，该接口用于阻止直接操作<code>Element</code>对象</p></li><li><p>对于<code>StatefulElement</code>与<code>StatelessElement</code>,很重要的一点在于双方都拥有的函数 <code>build</code>,但是区别在于：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StatefulElement 使用 State</span></span><br><span class="line">  Widget build() =&gt; state.build(<span class="keyword">this</span>);  </span><br><span class="line"><span class="comment">//StatelessElement 使用 StatelessWidget</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build() =&gt; widget.build(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p><img src="element%E7%B1%BB%E5%9B%BE.png" alt="element类图"></p><p>Widget的diff机制（同级之间才会进行对比），<code>Key</code>用以做唯一标识，方便在结点树中找到对应的状态做配置</p><h3 id="Widget-1"><a href="#Widget-1" class="headerlink" title="Widget"></a>Widget</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Initializes [key] for subclasses.</span></span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line">   ...</span><br><span class="line">  <span class="comment">/// Whether the `newWidget` can be used to update an [Element] that currently</span></span><br><span class="line">  <span class="comment">/// has the `oldWidget` as its configuration.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// An element that uses a given widget as its configuration can be updated to</span></span><br><span class="line">  <span class="comment">/// use another widget as its configuration if, and only if, the two widgets</span></span><br><span class="line">  <span class="comment">/// have [runtimeType] and [key] properties that are [operator==].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// If the widgets have no key (their key is null), then they are considered a</span></span><br><span class="line">  <span class="comment">/// match if they have the same type, even if their children are completely</span></span><br><span class="line">  <span class="comment">/// different.</span></span><br><span class="line">  <span class="comment">/// 该函数返回 true则说明不需要替换Element，直接更新Widget即可     </span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">        &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;       </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      Flutter系列笔记-Widget
    
    </summary>
    
      <category term="Flutter" scheme="https://www.wl960127.top/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.wl960127.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中的Key</title>
    <link href="https://www.wl960127.top/posts/8d8888c5/"/>
    <id>https://www.wl960127.top/posts/8d8888c5/</id>
    <published>2021-10-17T13:08:29.000Z</published>
    <updated>2021-11-20T09:11:41.737Z</updated>
    
    <content type="html"><![CDATA[<p>Key简单应用的时候，就是当前 widget 的唯一标识，在重构布局时候防止在同级别 Tree 下无法找到正确的元素及状态</p><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><img src="Key.jpg" alt="Key" style="zoom:80%;" /><hr><h4 id="Localkey"><a href="#Localkey" class="headerlink" title="Localkey/"></a>Localkey/</h4><p>：应用于拥有相同父元素的小部件进行比较的情况</p><h5 id="ValueKey"><a href="#ValueKey" class="headerlink" title="ValueKey"></a>ValueKey</h5><p>：颗粒度细分的时候使用</p><h5 id="ObjectKey"><a href="#ObjectKey" class="headerlink" title="ObjectKey"></a>ObjectKey</h5><p>：单一细颗粒度无法满足的时候，多个因素时候使用</p><h5 id="UniqueKey"><a href="#UniqueKey" class="headerlink" title="UniqueKey"></a>UniqueKey</h5><p>：无法满足唯一性的时候使用</p><hr><h4 id="GlobalKey"><a href="#GlobalKey" class="headerlink" title="GlobalKey"></a>GlobalKey</h4><p>整个应用中独一无二的键<br>由该类中方法可以得到对应的<strong>Widget</strong>、<strong>State</strong>和<strong>Element</strong>，当需要跨组件操作时候就可以使用到</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalKey</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulWidget</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"> <span class="comment">// WidgetsBinding ！！！！</span></span><br><span class="line"> <span class="comment">// _globalKeyRegistry[this];  实际是final类型的Map&lt;GlobalKey, Element&gt;</span></span><br><span class="line"> <span class="built_in">Element</span>? <span class="keyword">get</span> _currentElement =&gt; WidgetsBinding.instance!.buildOwner!._globalKeyRegistry[<span class="keyword">this</span>];        </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>WidgetsBinding</code>在<code>runApp</code>（即应用启动的时候就会被生成单例）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> runApp(Widget app) &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized()</span><br><span class="line">    ..scheduleAttachRootWidget(app)</span><br><span class="line">    ..scheduleWarmUpFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A concrete binding for applications based on the Widgets framework.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// This is the glue that binds the framework to the Flutter engine.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetsFlutterBinding</span> <span class="keyword">extends</span> <span class="title">BindingBase</span> <span class="title">with</span> <span class="title">GestureBinding</span>, <span class="title">SchedulerBinding</span>, <span class="title">ServicesBinding</span>, <span class="title">PaintingBinding</span>, <span class="title">SemanticsBinding</span>, <span class="title">RendererBinding</span>, <span class="title">WidgetsBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns an instance of the [WidgetsBinding], creating and</span></span><br><span class="line">  <span class="comment">/// initializing it if necessary. If one is created, it will be a</span></span><br><span class="line">  <span class="comment">/// [WidgetsFlutterBinding]. If one was previously initialized, then</span></span><br><span class="line">  <span class="comment">/// it will at least implement [WidgetsBinding].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// You only need to call this method if you need the binding to be</span></span><br><span class="line">  <span class="comment">/// initialized before calling [runApp].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// In the `flutter_test` framework, [testWidgets] initializes the</span></span><br><span class="line">  <span class="comment">/// binding instance to a [TestWidgetsFlutterBinding], not a</span></span><br><span class="line">  <span class="comment">/// [WidgetsFlutterBinding].</span></span><br><span class="line">  <span class="keyword">static</span> WidgetsBinding ensureInitialized() &#123;</span><br><span class="line">    <span class="keyword">if</span> (WidgetsBinding.instance == <span class="keyword">null</span>)</span><br><span class="line">      WidgetsFlutterBinding();</span><br><span class="line">    <span class="keyword">return</span> WidgetsBinding.instance!;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      Flutter系列笔记-Key
    
    </summary>
    
      <category term="Flutter" scheme="https://www.wl960127.top/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.wl960127.top/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Jetpack与Compose使用</title>
    <link href="https://www.wl960127.top/posts/ab760be3/"/>
    <id>https://www.wl960127.top/posts/ab760be3/</id>
    <published>2021-10-08T13:16:03.000Z</published>
    <updated>2021-11-13T09:44:30.740Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/wl960127/jet-pack-compose">传送门</a></p>]]></content>
    
    <summary type="html">
    
      一个简单的demo（Hilt+Room+navigation+Compose）
    
    </summary>
    
      <category term="Android" scheme="https://www.wl960127.top/categories/Android/"/>
    
    
      <category term="Compose" scheme="https://www.wl960127.top/tags/Compose/"/>
    
  </entry>
  
  <entry>
    <title>关于学习的第五篇-学霸养成</title>
    <link href="https://www.wl960127.top/posts/95b53bcb/"/>
    <id>https://www.wl960127.top/posts/95b53bcb/</id>
    <published>2021-07-01T15:18:41.000Z</published>
    <updated>2021-07-01T15:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>学霸真正的优势在于：知识储备更多；因为懂得越多，学的越快</p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>学习和记忆的本质，就是新知识与旧知识建立联系，存储的旧知识容量越大、种类越多，就能随时找到新知识之间的联系，越能够更好的学习</p><h4 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h4><p>越早储备，越早学习越好；种一棵树最好的时间是十年前，其次是现在</p><ul><li><strong>知识储备</strong></li><li><strong>能力储备</strong> </li></ul><h4 id="重视努力"><a href="#重视努力" class="headerlink" title="重视努力"></a>重视努力</h4><p>重视努力让孩子拥有一个TA自己能够掌握的变量，会让他们认为自己能掌握自己的成功；</p><p>重视聪明的孩子在遇到实在无法及解决的问题时候，或许会出现一种自我矛盾的疑问，也许会怀疑自己。但是重视努力的孩子会认为自己会认为自己是否是因为不足够努力、认真，在这个时候会想靠更多的努力和认真去解决问题；<strong>想学好某些事，做好某些事，提高智能的方法，就是练习和努力</strong></p><h4 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h4><p>避免简单的重复做某些“天真的练习”</p><ul><li><p>目标明确</p><p>不要照单全收，了悉自己的目的</p></li><li><p>极其专注</p></li><li><p>及时反馈调整</p><p>比输入更重要的是输出；用输出来指导自己的输入；考试、写作、闭卷回忆等</p></li><li><p>远离舒适</p><p>只有在自己觉得有点应付不了的时候，才是真正的提升时刻</p></li></ul><h4 id="双加工"><a href="#双加工" class="headerlink" title="双加工"></a>双加工</h4><p>避免”路径依赖“，是一种经济学理念：一旦进入某一途径，就可能对这种路径产生依赖；</p><p>因为惯性的力量，会使得这一选择不断强化，逐渐沉迷。就比如在日常的刷剧过程中，习惯性看着画面听着声音，很少去刻意观看中文字幕下面的英文翻译。当然，我自己也是这么干，有尝试过一边看电影一边看英文字幕，但是知识储备太低了，正常倍速根本就来不及看完完整的一句，由此也错过了一个学习英语的好方法，后面也放弃了。由此可见，还是自驱力不够</p><h5 id="自动化加工"><a href="#自动化加工" class="headerlink" title="自动化加工"></a>自动化加工</h5><ul><li>积累了某一行为模型的大量练习，比如吃饭，说话等等近乎无意识行为；这种行为对执行受意识加工没有任何影响，比如在健身房，一边跑步一边听书</li></ul><h5 id="受意识加工"><a href="#受意识加工" class="headerlink" title="受意识加工"></a>受意识加工</h5><ul><li>强迫式行为，让注意力专注于某些事情</li></ul><p>注意力闲置的时候，不用就是浪费了，在这个过程中，运用“双加工理论”，去同时做一件需要专注的事情，注意力使用率提高，完成更多的任务；这就是时间管理、效率管理的一个小技巧。当接触学习一件新事物的时候，因为对于未知事物认知不够，导致本能的也许有些觉得不行，心态导致不能完全将注意力投入，所以也可以同时做一些与之相关的事情。比如：在学习的时候，拿出笔做笔记或者在纸上梳理相关思路。这样去尝试更高程度的专注</p><p><strong>当积累了大量的练习受意识加工是可以转换为自动化加工</strong></p><p>一开始，那些分开的知识点，会散落占据大部份的工作记忆。通过练习的归纳，化零为整，内化为自动化、直觉式的反应，这样工作记忆才能在归纳之后得到多余的空间去做其它事情</p><h4 id="拒绝焦虑"><a href="#拒绝焦虑" class="headerlink" title="拒绝焦虑"></a>拒绝焦虑</h4><p>爱迪生：天才是 1% 的灵感，加上 99% 的汗水</p><p>方法论没有那么重要！任何一份工作，大部分内容都是很繁琐机械的，创造力当然很重要，但是永远只占有极少的一部分。因为我们花费1%时间涌向的灵感获取到的东西，往往需要99%的时间去努力和实践，才能真正落实</p>]]></content>
    
    <summary type="html">
    
      极客时间专栏 如何成为学习高手 第五部分
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于学习的第四篇-时间管理</title>
    <link href="https://www.wl960127.top/posts/858effef/"/>
    <id>https://www.wl960127.top/posts/858effef/</id>
    <published>2021-07-01T15:18:26.000Z</published>
    <updated>2021-07-01T15:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="计划定制"><a href="#计划定制" class="headerlink" title="计划定制"></a>计划定制</h4><p>计划应当是具体的，包括任务内容、时间以及频率的具体；因为只有足够具体的计划，才有被执行的可能性</p><ul><li>计划可衡量是因为需要一个具体的参考标准</li><li>计划可达到的可以让自己从容的一步步完成</li><li>计划和大目标具有一定相关性，避免假装努力</li><li>计划应当由有效截至日期作为约束</li></ul><h4 id="计划执行"><a href="#计划执行" class="headerlink" title="计划执行"></a>计划执行</h4><ul><li>只做好今天的事情，明天的事情明天再说</li><li>分清楚： 紧急又重要、紧急不重要、重要不紧急</li><li>说干就干 不要纠结太多，不要准备太多给自己留与余地</li></ul><p>大致知道自己要做什么事情，理清执行流程，直接开干，专注一件又一件</p><h4 id="保驾护航"><a href="#保驾护航" class="headerlink" title="保驾护航"></a>保驾护航</h4><ul><li><strong>不应当为了完成任务而去完成任务</strong></li></ul><p>在学习过程中，做的最不切实际的事情就是：自认为可以在自己指定的时间内完成指定任务</p><ul><li><strong>不做无效任务</strong></li></ul><p>对于自己来说，有一个不知道是不是好的习惯，每次看书都是匆匆忙忙的看一遍，然后再看一遍，甚至再看一遍。有时候一本反复读了多次，因为觉得觉得书就应当多读几遍才能不那么容易遗忘。可是事实看来，也算是一个不好的习惯，因为急急忙忙的看养成了一个坏习惯就是看什么都是急急忙忙的瞥一眼。完全没有映射到大脑中，且实际中我也不定有时间再进行重复阅读；这也就导致了做了无效阅读，完全就是在打发时间。所以说，看书还是应当仔细认真的阅读，对于自己而言，可以采取先瞥一眼确认大概流程，再仔细阅读。在这个过程中，加深自己的条理性时候也能做到有效阅读</p><ul><li><strong>分解困难</strong></li></ul><p>将复杂艰难的、不喜欢的任务拆解成一个又一个任务。每次任务完成带来的成就感激励自己的下一次</p><ul><li><strong>心态随时调整</strong></li></ul><p>很多时候，做某些事情的时候，因为长期做或者某个问题迟迟无法解决带来的挫败感会让人很容易心态炸裂。这个时候需要“全身心恢复精力”；哈佛大学教授 Tal 说：问题不在于压力，不是生理上的问题，也不是心理上的问题，问题在于缺少恢复；（散步、听音乐、午休跟朋友聊天……而不是玩手机）</p><p>​    ① 冥想：跟着自己的节奏，放空自己</p><p>​    ②做不同的事：事情穿插，使用大脑的不同区域</p><p>休息使得更好的生出灵感，更高效的解决问题；</p><p>有时候学习者尽力去解决一个复杂的或者需要创造性思考的问题时，无论多么努力，还是不能解决问题。在这种时候，暂时停止对问题的积极探索，可能就会对问题的解决，起到关键作用。这种暂停就是“<strong>酝酿效应</strong>”</p>]]></content>
    
    <summary type="html">
    
      极客时间专栏 如何成为学习高手 第四部分
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于学习的第三篇-高度自律</title>
    <link href="https://www.wl960127.top/posts/cf03b6bc/"/>
    <id>https://www.wl960127.top/posts/cf03b6bc/</id>
    <published>2021-07-01T15:18:13.000Z</published>
    <updated>2021-07-01T15:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="拒绝拖延"><a href="#拒绝拖延" class="headerlink" title="拒绝拖延"></a>拒绝拖延</h4><h5 id="五分钟"><a href="#五分钟" class="headerlink" title="五分钟"></a>五分钟</h5><p>真正累的是想一件事情的时间，因为会比你真正做这件事情的时间多，而且是多得多；而且这个障碍还是自己给自己设置的</p><ul><li>在坚持不下去的时候，告诉自己五分钟，再五分钟（为啥好像感觉在哪个马拉松故事也听过）</li></ul><h5 id="拒绝紧凑"><a href="#拒绝紧凑" class="headerlink" title="拒绝紧凑"></a>拒绝紧凑</h5><p>《拖延心理学》：当某件事我们必须做，某些规则必须遵守时候，就会产生逆反心理；拖延，是我们对这种被掌握的状态的反抗</p><ul><li>稍微走在计划的前面，给自己留下偷懒的资格和空间，当自己相对拥有不做事的权力的时候，才会更愿意去做某些事情</li></ul><h5 id="替代拖延"><a href="#替代拖延" class="headerlink" title="替代拖延"></a>替代拖延</h5><ul><li>当有一个更难得任务需要完成的时候，我们就会愿意去做相对简单得事情</li></ul><h4 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h4><p>从不自律的念头中，约束自己的一种能力</p><p>一个强大的人，并不是一直坚定，从不动摇，而是在有变弱的倾向时候选择了对抗，在这个期间，慢慢的变强大的；</p><p>简单来说：<strong>当我们想选择延迟享受的时候，大脑的奖励机制就会不停刺激我们去选择眼下的欢乐</strong></p><h5 id="接受设定"><a href="#接受设定" class="headerlink" title="接受设定"></a>接受设定</h5><ul><li><strong>我们无从逃避，我们必须接受痛苦</strong>；在面对自律和放纵的时候，告诉自己：你不是在快乐和痛苦中选择，而是在两种痛苦中选一个忍受。那么，就会选择那个有意义的痛苦</li></ul><h5 id="反向约束"><a href="#反向约束" class="headerlink" title="反向约束"></a>反向约束</h5><p>只在规定的时候自我管理，过时不候；剩下的时间，绝对不允许自律，一定要做自己</p><h5 id="外部约束"><a href="#外部约束" class="headerlink" title="外部约束"></a>外部约束</h5><p>一切的自律的前提都有一个隐形的外部约束（为什么要做这件事）；而这个外部约束就是有一个<strong>他律</strong></p><ul><li>可以在任何时间，推动进入正轨；因为自己别无选择</li></ul><h5 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h5><ul><li>快乐工作，快乐生活</li></ul><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p><code>扎琼克</code>的<strong>社会助长理论</strong>，包括”<strong>共同活动效应</strong>“和”<strong>观众效应</strong>“；前者是指：与他人共同活动的时候，我们的效率会提高，后者是：当他人在旁边观察的时候，我们的效率会提高</p><p>我们之所以觉得在图书馆等一些大家一起学习的环境中更能投入状态，是因为这种环境中，会产生一个”共同活动效应“产生的”<strong>表演型学习</strong>“心理；在这期间，会对自己产生一种”<strong>印象管理</strong>“（我们在他人面前做的几乎全部事情，起调控策略都是围绕印象管理的（罗兰·米勒《亲密关系》））的心理需求；具体就是：我们通过约束自己的言行，主动管理自己传达给别人的信息</p><p>当自己处在一个感觉没有氛围的环境中，可以把它抽象到一个有观众的环境中；想象着，如果别人在会是一个在共同活动或者观察，会是什么情景</p><h4 id="形态自驱"><a href="#形态自驱" class="headerlink" title="形态自驱"></a>形态自驱</h4><p>当获得更多自由的时候，也需要付出同等甚至更多的自律。<strong>足够自律，足够自由</strong></p><h5 id="第一件事"><a href="#第一件事" class="headerlink" title="第一件事"></a>第一件事</h5><p>不要躺在床上从玩手机或者拖延开始。在生活中，经常想着玩会手机再起来，最后就会发现不知不觉已经这么久了。又想着这么久了都既然，那就彻底放纵吧。</p><p>所以给自己一个足够的力，推动一天的开始。比如早期吃个早餐，逛个菜市场（毕竟我喜欢，啊哈哈哈）；在生活中，个人感觉要么起不来，要么起来了就几乎不想再躺着了；不躺着就觉得应该给自己找点事情做</p><h5 id="合理规划"><a href="#合理规划" class="headerlink" title="合理规划"></a>合理规划</h5><p>给自己安排规划好一定要做的事情的时间，过期不候。然后其它时间就做些兴趣爱好，比较不累的事情，自我欺骗，而不是直接就躺平了</p>]]></content>
    
    <summary type="html">
    
      极客时间专栏 如何成为学习高手 第三部分
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于学习的第二篇-高效学习</title>
    <link href="https://www.wl960127.top/posts/2726a13e/"/>
    <id>https://www.wl960127.top/posts/2726a13e/</id>
    <published>2021-07-01T15:18:02.000Z</published>
    <updated>2021-07-01T15:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="心流"><a href="#心流" class="headerlink" title="心流"></a>心流</h4><p>积极心理学家米哈里·契克森米哈赖，将十分专注于眼前行为时的心理状态，称之为心流，并认为是我们获得幸福的一种途径</p><h4 id="专注"><a href="#专注" class="headerlink" title="专注"></a>专注</h4><h5 id="互动"><a href="#互动" class="headerlink" title="互动"></a>互动</h5><ul><li>边听，边重复某句话中的关键字</li><li>做笔记时候，选择性划线关键字</li></ul><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li>问题让人专注；带着困惑的大脑，总会让人把认知资源留在寻求答案</li></ul><h5 id="默念"><a href="#默念" class="headerlink" title="默念"></a>默念</h5><ul><li>把本应在大脑中迅速闪现的念头，转换成具体的语言；可以用一种自我对话，即：不出声但是有口型的</li></ul><h5 id="及时调整"><a href="#及时调整" class="headerlink" title="及时调整"></a>及时调整</h5><ul><li>走神-重新专注-走神-重新专注</li></ul><h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h4><h5 id="闭环"><a href="#闭环" class="headerlink" title="闭环"></a>闭环</h5><ul><li>一件事从头做到尾。学习之余，重视复习和应用</li></ul><h4 id="连点成线"><a href="#连点成线" class="headerlink" title="连点成线"></a>连点成线</h4><ul><li>精细进行复述是存储信息最有效的方法，指的是把要记住的内容和已有的知识经验联系起来；主动思考，主动去输出</li><li>记录关键字及知识点信息，根据逻辑关系用自己的语言将关键词串起来</li><li>先记少不计多（关键点），而后由少记多（关键点扩散）</li></ul><h4 id="高效记忆"><a href="#高效记忆" class="headerlink" title="高效记忆"></a>高效记忆</h4><h5 id="主动思考"><a href="#主动思考" class="headerlink" title="主动思考"></a>主动思考</h5><ul><li>是记忆的底层逻辑，但是大脑不擅长记忆无意义的东西</li></ul><h5 id="组块化记忆"><a href="#组块化记忆" class="headerlink" title="组块化记忆"></a>组块化记忆</h5><ul><li>组块是衡量记忆容量的一种单位，虽然短时记忆的容量无法改变，但是我们可以扩充每一个单独的组块包含的信息量</li></ul><h4 id="高效读书"><a href="#高效读书" class="headerlink" title="高效读书"></a>高效读书</h4><p><strong>前提</strong>：丰富的知识储备，是快速阅读的必要前提</p><p><strong>不读</strong>：跳过不重要的信息</p><p>功利性阅读，读书本身不是目的，尽量少的时间获取尽量多的认知才是目的</p><h5 id="结果导向读书"><a href="#结果导向读书" class="headerlink" title="结果导向读书"></a>结果导向读书</h5><ul><li>根据主题，补充内容</li></ul><h5 id="漫游示导向读书"><a href="#漫游示导向读书" class="headerlink" title="漫游示导向读书"></a>漫游示导向读书</h5><ul><li>可以看到之前无法想象的新鲜素材、观点和灵感</li></ul><h5 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h5><ul><li>做粗浅标记，留下可供追溯的线索就足够了；在需要的时候凭借残留印象，翻到原文，直接引用某句核心观点，或者用自己的语言去表达</li></ul><h4 id="快速学习"><a href="#快速学习" class="headerlink" title="快速学习"></a>快速学习</h4><p>当限定了相对少的时间，就会主动思考更高效的方法，而非纠结于细枝末节；因为时间管理领域的”帕金森法则”：<strong>工作会不断膨胀，直到填满截至日期前的全部时间</strong></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>先抓核心、重点；先完成再去考虑完美</li><li>要允许自己写出垃圾，否者垃圾都写不出来</li></ul><h5 id="解决工作膨胀"><a href="#解决工作膨胀" class="headerlink" title="解决工作膨胀"></a>解决工作膨胀</h5><ul><li><strong>表现</strong>：在接触全新的东西的时候，总是喜欢追求掌握全面的信息</li><li><strong>解决</strong>：<ul><li>立刻有输出</li><li>需要让自己立刻看到成果，看到自己学会了一点东西，做了一些事情</li><li>在刚知道怎么走的时候，就要把步子迈出去；而不是让每一个觉得需要弄明白的事情，带来无尽的痛苦和沮丧</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      极客时间专栏 如何成为学习高手 第二部分
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于学习的第一篇-底层思维</title>
    <link href="https://www.wl960127.top/posts/7ae29eec/"/>
    <id>https://www.wl960127.top/posts/7ae29eec/</id>
    <published>2021-07-01T15:17:48.000Z</published>
    <updated>2021-07-01T15:22:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="峰终定律"><a href="#峰终定律" class="headerlink" title="峰终定律"></a>峰终定律</h4><p>人们对一切人、事、物的感受，由峰值和终值两个因素决定</p><p>峰值：这段体验中的最高峰，包括正向和负向</p><p>终值：这段体验结束时候的感觉</p><p>在学习或者做某些事情的时候，最害怕的就是挫败感；明明自己花了很多精力和时间，但是总觉得什么都没有收获，恶性循环导致无法得到正向反馈。因而就需要避免负面终值，让学习变得相对愉悦</p><p>此时，可以尝试艰难和轻松的任务穿插着完成，避免负向终值的出现。让自己能在学习上获得正向反馈，收获足够的成就感，因为某种奖励机制建立之后，才能够长期保持</p><p>对于任务不需要给自己安排过多，因为时间紧凑以及任务可能存在的未知压力在一定程度上会给自己带来过多不必要的焦虑；以至于最后任务没有完成或者完成的不够好，打击自己的心态，影响后期效率</p><p>不要以某种标准框束自己，不要因为急着求某种结果，而是踏踏实实走好每一步，专注做事本身。路要一步步走，饭要一口口吃</p><p>给自己一些容错空间。心理学家尼科尔斯、德韦克等人，提出了 “成就目标” 这个概念。“成就目标” 包括 “掌握目标” 和 “成绩目标” 两种类型，前者是指  “掌握知识和提高能力”，后者是指 “ 好名字和成绩 ”，一个定位于过程中的成长，一个定位于结果的优异；如果将 “掌握目标” 作为努力的重心，就要知道遇到问题和遭受失败是一件正常的事情。任何事情、任何能力的发展，都是呈螺旋状上升的过程，对自己、对事情，要有一定的容错空间 </p><h4 id="伪勤奋"><a href="#伪勤奋" class="headerlink" title="伪勤奋"></a>伪勤奋</h4><h5 id="花大量时间做简单的事情"><a href="#花大量时间做简单的事情" class="headerlink" title="花大量时间做简单的事情"></a>花大量时间做简单的事情</h5><ul><li>只有去完成那些让你觉得要思考，需要克服困难的任务，才是 ”真勤奋“</li></ul><h5 id="不检测结果"><a href="#不检测结果" class="headerlink" title="不检测结果"></a>不检测结果</h5><ul><li>学的东西，要立刻检测，检测有没有记住，会不会做</li></ul><h5 id="不总结规律"><a href="#不总结规律" class="headerlink" title="不总结规律"></a>不总结规律</h5><ul><li>学习不仅包括对知识的学习，还包括对学习方法的学习。而学习方法，并不只需要通过学习别人的经验来获得，还需要自己的实践和复盘；需要试错、分析、反思、调整，以及应用，要有进行 “元认知” 的意识。即：知其然，知其所以然</li></ul><h5 id="道德许可效应"><a href="#道德许可效应" class="headerlink" title="道德许可效应"></a>道德许可效应</h5><p><code>道德许可</code>（moral licensing）是指：对某件事有一个明确的道德标准，在做出相关的行为和判断之后，反而更倾向于违背这个标准</p><ul><li>通俗来讲：为了某个目标，付出了些许努力，或者说只是预想了宏伟的计划，就把自己感动坏了，觉得已经在变好了，就开始放纵自己，给自己奖励。这就是<strong><code>道德许可效应</code></strong>；所以<strong>应当将想做的事情最简化，去掉花里胡哨的，直接开始，直接做最本质核心部分的工作，避免发生道德许可效应</strong></li></ul><h4 id="考试思维"><a href="#考试思维" class="headerlink" title="考试思维"></a>考试思维</h4><h5 id="如何回答问题"><a href="#如何回答问题" class="headerlink" title="如何回答问题"></a>如何回答问题</h5><ul><li>出题范围</li><li>出题方式</li><li>倒推学习，理解和记忆的正确方式</li><li>不同知识点联系起来，时间线上的发展脉络理清</li></ul><h5 id="即用即学"><a href="#即用即学" class="headerlink" title="即用即学"></a>即用即学</h5><ul><li>根据问题找到答案</li><li><code>检索式练习</code>：通过提问和主动回想的方式，去巩固知识点</li></ul><p>主动的去学习理解，在得到答案之前，强化检索路径；一遍遍地看答案的只会让你觉得自以为掌握。</p><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><p>一旦有了得失心，并且畏惧自己做的不够好，担心回浪费时间，带来失败地结果，就会开始迷茫；所谓：怕什么来什么</p><p>对于学习方式如果存在自我怀疑，有效的解决方法：给自己一个小时限定时间，先用眼下的方法，尽量专注。如果过程中有更好的方法，记录下来，一个小时结束后，花几分钟对学习方法进行调整</p><p>对于某一固定的学科或者领域，学习基本都是匀加速或者变加速的过程，方法会逐渐完善，效率也会逐步提高</p>]]></content>
    
    <summary type="html">
    
      极客时间专栏 如何成为学习高手 第一部分
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>明朝那些事第一部分</title>
    <link href="https://www.wl960127.top/posts/6f3535f0/"/>
    <id>https://www.wl960127.top/posts/6f3535f0/</id>
    <published>2021-06-16T13:09:15.000Z</published>
    <updated>2021-11-16T13:06:06.728Z</updated>
    
    <content type="html"><![CDATA[<p>朱元璋；原名：朱重八，1328~1398，今安徽凤阳人；最终认证：明太祖；年号：洪武（1368～1398）</p><p><img src="%E6%9C%B1%E5%85%83%E7%92%8B.png" alt=""></p><h4 id="悲惨的开始"><a href="#悲惨的开始" class="headerlink" title="悲惨的开始"></a>悲惨的开始</h4><p>​        穷苦人家的孩子，闹灾荒的时候。家里人饿死的差不多了，种了一辈子地的爹妈饿死后，居然差点没有地方可以下葬。因为是佃户，一辈子给地主家种地；好不容易埋了爹娘，就去皇觉寺当和尚混口饭吃。因为资历低，几乎寺庙里面的脏活累活全包，但是怀揣着这日子起码有口饭吃的心态，日子也就这么过着；</p><p>​       后来寺庙的日子也不好过，开始要出去化斋饭（就是要饭嘛）；可是寺庙也是势力的地方，朱重八都是被分配到重灾区。别人都吃不饱，你还去敲门？敲了门大不了就是被羞辱，可是不敲门，就只能饿死。三年的化斋生涯，最终磨练了心性，但是朱重八还是没有想着造反，毕竟日子还是能过得下去吧？造反可是要杀头的，毕竟！朱重八心里想着。</p><h4 id="时代的召唤"><a href="#时代的召唤" class="headerlink" title="时代的召唤"></a>时代的召唤</h4><p>​        日子也就这么勉为其难的过着。突然有一天，和尚朱重八收到好友汤和的一封信，大意就是：“兄弟我在郭子兴（造反军）这当千户，带你一起博一博！”。什么？造反的事情我可不干，朱元璋想着赶紧烧了这封信件。但是当晚有师兄就告诉他：“重八，叛军给你写信的事情有人去告发你了，麻溜的跑吧”。WTF？这日子还让不让过了，我只想安安静静活下去。跟叛军通信被抓了一定死，造反被抓也是死，造反还不一定死，算了算了，博一博！</p><p>​         就这样，朱重八见到了郭子兴，投军却被当成奸细的那种捆绑式见面。因为此时，郭子兴正在被围，手下的小弟觉得这会来投军，怕是来理应外和的。直到沉着冷静的朱重八拿出了汤和的介绍信，郭子兴才对这个脸像月牙铲的人重视，于是让他当了自己的亲兵。</p><p>​        在这里，朱重八有了新开始，有了老婆：一个姓马的姑娘，他爹是郭子兴的朋友，他爹死后，郭子兴把她收为自己的义女。老婆也有了，还顺带给自己改了一个名字：朱元璋；是金子在哪里都会发光，当时代选择了一个人，那么他便从此主角光环。因为士兵总能看到：千户汤和跟着一个叫朱元璋的小啰啰后面当小弟。</p><p>​        不久后，朱元璋越混越开，风生水起。但是郭子兴器小，见不得自己的小弟好，于是让朱元璋打郭子兴的老家：定远。反正就是很不好啃的一个地方，但是朱元璋用他卓越的战略眼光和指挥能力，采取了夜袭攻下了这里。这件事让朱元璋越发觉得跟这些人玩下去么的意思，打算单飞。于是拉了七百来号人，告诉郭子兴说我要单飞；郭子兴求之不得。于是朱元璋在这七百人中挑了24个人，剩下的都留给了郭子兴，正式开始单干。对于朱元璋的眼光，不得不佩服，因为这24个人，最后都是明朝的高级干部。感觉有点像清朝努尔哈赤拿着祖传的13副盔甲造反的感觉，果然历史总是惊人的相似</p><h4 id="三足鼎立"><a href="#三足鼎立" class="headerlink" title="三足鼎立"></a>三足鼎立</h4><p>​        发展的越来越好的朱元璋此时有两个竞争对手：张士诚和徐寿辉；前者是盐贩子，后者是布贩子，据说是当地美男子。张士诚的成名之战是高邮之战，国号是：吴，元朝宰相脱脱率60万大军（实数），打了三个月都没有下来。后面因为元顺帝听信馋言，怕大军在外生变，因而算是功败垂成；徐寿辉呢，开始国号就叫：天完！天完国！没错！你品，你细品，稳稳的压了大元（大哉乾元）；虽然说后面吃了大败仗，又改成了太平。但是不重要，重要的是前期的时候，他有一个小弟：陈友谅。徐寿辉是一个老好人，所以注定只是一个配角。在五通庙，在陈友谅指示下，当面锤杀，之后陈友谅登基。国号：汉，定都：江西九江。</p><p>​        朱元璋对张士诚的评价是：器小，陈友谅：志骄。器小看事，志骄生事；因而后期决战之时，先攻击陈友谅，料定张士诚不会插手，事实也是如此；</p><p>​        陈友谅是低等渔民，常年在船上，也因为鱼腥味被人所白眼相待。后来努力考了个秀才，在元朝当了个小公务员，还是被人看不起。因而造反大队路过的时候，索性直接砸了元朝的饭碗，打算反叛来谋取最高的地位，把那些看不起他的人踩在脚下。话说，传闻陈友谅的小名：九四。诶，跟重八一样，都是苦命人啊！ 不过陈友谅是重头到尾都跟元朝死磕的一个人，张士诚后期有投诚元朝，虽然说又叛出来了。不要不相信，朱元璋也跟元朝有一腿。</p><h4 id="一决雌雄"><a href="#一决雌雄" class="headerlink" title="一决雌雄"></a>一决雌雄</h4><p>​        本来没有那么快的。因为一个人：常遇春！草莽出身，又一身功夫，以打先锋位出名，但是有一个不好的习惯：杀降。有一次打仗赢了陈友谅的一支部队，在没有请示的情况下，连夜活埋三千人，留了个别活口告诉陈友谅：仗，是我常遇春打赢的。人，是我常遇春杀的。这种表现极度的刺激到了陈友谅，陈友谅带着自家舰队（当时中国最强）就打过来了（当时陈友谅在长江上游（湖北，江西），朱元璋在长江下游）。朱元璋占据着（南京，原名：集庆。朱元璋改为应天：顺应天命）应天，依托太平（安徽辖区），陈友谅的舰队高达威猛，在船上驾着短梯就翻上了太平的城墙。</p><p>​        应天一下子就变得像脱光了站在陈友谅面前。此时，朱元璋的小弟都说要避避风头，找个地方躲一躲，朱元璋的短板就在于都是小渔船，打水战，稳稳要输。这个时候，一直默默无闻的老好人刘基站出来呵斥了一众人。坚定了朱元璋要死战到底的决心。</p><p>​        朱元璋派出了反面间谍康茂才，此人原先在陈友谅手下干活，后来投奔了朱元璋，但是在朱元璋的指示下还跟陈友谅有联系。他告诉陈友谅说我要投诚，你们开船过来吧，路上只有一座木桥，到时候我把它搞了，大家一路冲冲冲，直达应天府围墙子底下。陈友谅信了，船队一路过来，发现木桥果然没有了。没错！朱元璋连夜把木桥拆了，换了座石桥！此路不通！这个时候，陈友谅得知自己的弟弟陈友仁率一万人已经在龙湾登陆了，于是立马决定转战龙湾。可惜，这就是朱元璋选定的战场，当陈友谅大军全部下船到了这里之后，发现四面八方都是朱元璋的部队，才发现进套了，而又因为退潮，船只搁浅无法开动。水军上岸了，面对从山上打先锋冲下来的骑兵，几个交叉战术下，乱了阵脚。此战，陈友谅大败，死伤20000余，俘虏7000+，丢了百来条大船和数百条小船，逃回了九江。</p><h4 id="天命所归"><a href="#天命所归" class="headerlink" title="天命所归"></a>天命所归</h4><p>​        当然，对于陈友谅来说，这点损伤是惨重的，但是不影响根基。之后，发生了一件事，让陈友谅很是火恼。那就是洪都（今：江西南昌）叛变了，投靠了朱元璋。在当时洪都是一个很重要的水利据点，早期的江西就是依托漕运，而且九江离南昌也很近（高铁一小时）。陈友谅很气愤在于洪都是一个很重要的地方，而且还被人背叛了。当时守在洪都的是朱元璋的侄子：朱文正；（明初六大名将分别为：徐达、常遇春、冯胜、李文忠（朱元璋外甥）、朱文正（朱元璋侄子）、邓愈）。陈友谅设计让朱元璋去救友军，同为红巾军的刘福通和当时名义上的君王：韩林儿，结果刘福通战死了，韩林儿活下来了。起初去救援的时候，刘基就劝朱元璋不要去，朱元璋不听，结果接了这么一个烫手山芋回来，虽然说最后还是不明不白的把韩林儿扔水里弄死了（从此事起，朱元璋与刘基有了隔阂，因为朱元璋想到的，刘基想到了，朱元璋没有想到的，刘基也想到了，所以开国之后刘基的待遇也不咋地）。</p><p>​        与此同时，陈友谅开始进攻洪都，60万大军打了三个月，硬是没有打下只有几万人守的洪都，尤其是一个众多城门的洪都。打了三个月为啥没有援军，因为朱文正一开始就没去求援。后来实在顶不住了，叫了一个叫张子明的人去求援，白天不走晚上走，半个月之后见到朱元璋。朱元璋说大军筹备一个月就来！一个月，朱文正的骨头都被人当棒槌了。任务完成后，张子明开始白天也赶路回去，好巧不巧被陈友谅抓住了，然后就说答应投降，可以去城楼下去劝降。结果一到城楼下，张子明就大喊：兄弟们，再坚持几天，大军马上就要到了！完犊子，又被人阴了，陈有谅想着。</p><p>​    于此同时，朱元璋也带着自己的全部身家：二十万大军来了。打算在嶓阳湖（地处九江、南昌、上饶）与陈有谅决战。最开始的高潮部分在于，陈友谅的老乡张定边（陈友谅疑心极重，但是这个是例外）带着小部队出去了，双方都以为是例常巡视，结果张定边一路冲锋，斩杀好几员大将，一直杀到了朱元璋的中军位置。朱元璋才明白，是直冲自己而来，吓的立马准备调头，结果，搁浅了！嗯哼？就这，刺激！所幸当时好功夫的常遇春离朱元璋不远，确认身份后，一箭射出，正中移动靶张定边的面门，张定边不得不退走。</p><p>​    状态很焦灼，大家都杀红了眼。但是不知道陈友谅怎么回事，认为方便战事居然上了铁锁连环！有连环计，自然有火船计，朱元璋顺风又顺水。陈友谅败局已定，于是大批将领开始倒戈，气急败坏的陈友谅对于有投降意向的是见一个杀一个。于此同时，朱元璋大肆宣扬优待俘虏，欢迎投降。有了对比，就有了伤害，为了稳定军心的陈友谅登上了船头指挥作战，却被一支冷箭射穿头颅。冠军产生！虽然说张士诚还在（张士诚的小名就真的叫：九四），但是问题不大。只是期间封赏的时候，朱文正假客气了一下，没想到朱元璋信了，导致了朱文正向张士诚叛变了！被自己的侄子背叛，确实很难受，虽然说之前也不是没有，但是这次真的是伤透心了。在马皇后的劝说下，还是给了终身监禁的惩罚。        </p><p>​    1368年，攻破元朝首都大都，并改名为北平。同年！明朝宣布成立，定都应天，年号洪武。</p><p>​    1370年第一次大封功臣。明初六大将除朱文正均封公爵（常遇春1369年于北伐时暴毙，其子常茂受封），还有一个文官：李善长（老乡兼后勤部长，面相憨厚，内心狭隘）。</p><h4 id="太祖的政策"><a href="#太祖的政策" class="headerlink" title="太祖的政策"></a>太祖的政策</h4><ul><li><p>贱商重文<br>读书人的最高荣誉：<strong>连中三元</strong>，自古以来只有17人<br>明以前也有科考制度，但是每次只有十几个而已。自洪武年间开始，因各种问题，按照地理划分了南中北三榜。录取人数扩展到视情况而定三百人左右。<br>考试流程如下</p><ul><li>院试：全县选拔赛；考生：童生。录取结果分为六等。一二等才称之为秀才，见县官不拜，免一人税</li><li>乡试：全省选拔赛；考生：秀才。第一名称之为：解元，第二名：亚元；登榜则为举人，有资格做官及参加三年一次的会试；此为一榜出身</li><li>会试：全国精英选拔赛；考生：举人。第一名称之为：会元；登榜者称之为贡士，有资格参加由皇帝评选的殿试资格；</li><li>殿试：全国精英晋级赛；考生：贡士。此为两榜出身<br>按成绩分为“三甲”（即三等）：<br>一甲：三名，叫“赐进士及第”。第一名称“状元”（亦称“殿元”），第二名称“榜眼”，第三名称“探花”，三人同称“三鼎甲”‘<br>二甲：若干名，均叫“赐进士出身”<br>三甲：若干名，均叫“赐同进士出身”</li></ul><p>一甲直接进入翰林院，状元授翰林院修撰，榜眼和探花翰林院编修；其余进士再举行朝考，被选中的优秀进士则称之为“庶吉士”（明朝：非庶吉士不可为大学士 这一默认规则）。庶吉士还要在翰林学习三年，再度参加毕业考试，称之为“散馆”。合格的，授予翰林编修、检讨等，不合格的分发各部任主事等职，或以知县优先委用</p></li><li><p>惩贪<br>自古以来大约是洪武年间的官最难做，因为俸禄少，又惩治贪污严重，六十两起就剥皮；大约是年少的痛苦经历使得朱元璋对官吏深恶痛绝。为了活下去，明朝的官员大都以两种形式在老百姓身上占便宜：火耗费和淋尖踢斛，政府也默认。朱元璋在位时候，官员都不得不这么活下去，但是朱元璋驾崩后，明朝的官员开始了大肆贪污。</p></li></ul><h4 id="洪武四大案"><a href="#洪武四大案" class="headerlink" title="洪武四大案"></a>洪武四大案</h4><h5 id="胡惟庸案"><a href="#胡惟庸案" class="headerlink" title="胡惟庸案"></a>胡惟庸案</h5><ul><li>洪武十三年（1380年）</li><li>一定程度上是为了取消传承千年的丞相制度，对胡惟庸采取了捧杀的形式。对胡惟庸结党牵连官员，前后共诛杀3万余人！取消丞相（中书省老大）一岗后，彻底将三省六部中的中书省废除；直至永乐皇帝采取了内阁的形式，一到七人不等，官员称之为内阁大学士；10年以后，有人以李善长与胡惟庸共同谋反，朱元璋顺水推舟，将李善长一家七十余口一律处斩。（胡惟庸是李善长提携起来的，拉帮结派也把李善长拉下了水）</li></ul><h5 id="空印案"><a href="#空印案" class="headerlink" title="空印案"></a>空印案</h5><ul><li>洪武十五年 （1376年或1382年，大多说是1382年）</li><li>明朝规定，每年各地都要到户部报账登记。需要户部与各布政司、府、县的数字须完全相符，分毫不差，才可以结项。如果有一项不符，整个账册便要被驳回，重新填报，重新盖上地方政府的印章。由于古代交通不便且数据较多难以出现纰漏，地方官员为了方便，事先会备好盖好骑缝印的空印帐册以备用。全天下都知道，除了朱元璋。因此朱元璋盛怒，一千多个县，主事官处死，副手仗一百充军</li></ul><h5 id="郭恒案"><a href="#郭恒案" class="headerlink" title="郭恒案"></a>郭恒案</h5><ul><li>洪武十八年（1385年）</li><li>说白了就是有人检举郭恒勾结大量官员，贪污，贪了国家2400万担粮食（一担约等于120斤）；在朱元璋的追查下，六部大多数官员都成了同党，每个部门基本基本就留了一个尚书和一个侍郎（部长和副部长），依次往下查，杀掉了三万余人，最终结果就是“百姓中产之家大抵皆破”；为什么说冤，是因为有疑问，当时反腐这么严重，尤其是废除了丞相之后，朱元璋很多事都亲历亲为，况且当时明朝一年也就2400多万粮食收入。</li></ul><h5 id="蓝玉案"><a href="#蓝玉案" class="headerlink" title="蓝玉案"></a>蓝玉案</h5><ul><li><p>洪武二十六年（1393年）</p></li><li><p>蓝玉，常遇春的小舅子，作战风格类似。因为明初大将人才辈出，一直到第一代无力再战的时候，才展露风头。洪武二十一年（1388年），蓝玉率15万大军出塞追击蒙古军队，直到捕鱼儿海（贝尔湖），俘获男女七万七千人，大胜而归。此一战役风头无两，因为拿下了北元的皇帝印！此后，他又多次北征蒙古，立下赫赫战功。但是此人自恃功高势大，骄横不法。在军中，他擅自黜陟将校，进止自专，甚至不听君命；起初朱元璋打算封为梁国公，但是考虑到北伐班师途中，睡了北元皇帝的老婆等一系列过度膨胀的行为，最后被晋封为凉国公，位居大将军之职。</p><p>直到洪武二十六年，借口凉国公蓝玉谋反，株连杀戮功臣宿将的重大政治案件，被诛杀者多达1.5万人，军中的骁勇将领差不多都被杀戮殆尽；在一定程度上认为是朱元璋觉得自己以及不久于人世，而只有自己能管住明初的将领，担心自己死后，不利于接班人掌权。</p></li></ul>]]></content>
    
    <summary type="html">
    
      明朝那些事 明太祖朱元璋的一生
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.wl960127.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="明朝" scheme="https://www.wl960127.top/tags/%E6%98%8E%E6%9C%9D/"/>
    
  </entry>
  
  <entry>
    <title>JVM类加载机制</title>
    <link href="https://www.wl960127.top/posts/de06556f/"/>
    <id>https://www.wl960127.top/posts/de06556f/</id>
    <published>2021-02-08T06:55:27.000Z</published>
    <updated>2021-11-17T11:35:55.710Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.png" alt=""></p><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><ul><li>除了顶层启动类装载器<code>Bootstrao ClassLoader</code>之外，其余的类装载器<code>Extension ClassLoader</code>在加载之前，都会委派给它的父装载器进行加载，层层上递给最顶层时候。如果父装载器拥有，则让父装载器加载，父装载器不装载则让<code>AppClassLoade</code>加载</li></ul><p><img src="%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" alt=""></p><h5 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h5><ul><li>一般情况下，类加载是遵循双亲委派机制的。但是类加载器通过开放的API，让加载过程更加的灵活</li><li>对于远程存储字节码以及字节码加密，这种业务需求，实现一个新的类加载器就可以了</li></ul><h4 id="栈帧字节码流转"><a href="#栈帧字节码流转" class="headerlink" title="栈帧字节码流转"></a>栈帧字节码流转</h4><p><img src="%E5%AD%97%E8%8A%82%E7%A0%81%E6%B5%81%E8%BD%AC.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      深入浅出Java虚拟机笔记；Java类加载
    
    </summary>
    
      <category term="Java" scheme="https://www.wl960127.top/categories/Java/"/>
    
    
      <category term="Jvm" scheme="https://www.wl960127.top/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM基础</title>
    <link href="https://www.wl960127.top/posts/8a392f6c/"/>
    <id>https://www.wl960127.top/posts/8a392f6c/</id>
    <published>2021-02-03T06:51:40.000Z</published>
    <updated>2021-03-10T07:07:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>上承开发语言，下接操作系统，中间的接口就是字节码。通过不停的翻译执行Java字节码，调用真正的操作系统函数<br>（ Java文件 -&gt; 编译器 -&gt; 字节码 -&gt; JVM -&gt; 机器码 ）</li><li>一次编译，处处运行</li><li>是一个规范，定义了.class文件的结构，加载机制，数据存储，运行时栈等诸多内容，最常见的JVM实现就是Hostpot</li></ul><p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。这些字节码指令，就叫做 <strong>opcode</strong></p><hr><h4 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h4><ul><li>解析执行：将opcode+操作数翻译成机器代码</li><li>即时编译 （JIT）：会在一定条件下，将字节码编译成机器码再执行</li></ul><p>这些.class文件会被加载，存放在元空间，等待被调用，这里会有一个类加载器的概念</p><hr><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><ul><li>对于Java的自动内存管理机制，为了管理这些快速的内存申请释放操作，就必须引入一个池子（<strong>堆</strong>）来延迟这些内存区域的回收操作</li></ul><h5 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h5><ul><li>Java8及以后版本，彻底移除持久化，而是使用Metaspace来进行替代，即: -XX:PermSize等参数调优已经无意义</li></ul><img src="JVM内存区域划分.png" style="zoom:80%;" /><ul><li>JVM堆中的数据是共享的，是占用内存最大的一块区域</li><li>可以执行字节码的模块叫做执行引擎</li><li>程序计数器使得执行引擎在线程切换时候可以恢复</li><li>JVM的内存划分与多线程息息相关。程序运行时候用到的栈以及本地方法栈的维度都是线程</li><li>本地内存包含元数据去和一些直接内存</li></ul><h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><ul><li>Java虚拟机栈基于线程，栈的生命周期和线程一样</li><li>栈的每条数据就是栈帧，每个栈帧包含四个区域<ul><li>局部变量表</li><li>操作数栈</li><li>动态连接</li><li>返回地址</li></ul></li></ul><h5 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h5><ul><li>与虚拟机栈非常相似，服务的对象是native方法</li></ul><h5 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h5><ul><li>一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。保存着当前线程执行的进度</li><li>因为线程而产生，与虚拟机栈配合完成计算操作</li><li>还存储了当前正在运行的流程，包括正在执行的指令、跳转、分支、循环、异常处理等</li></ul><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><ul><li>所有线程共享并存储对象（类实例和数组）的内存</li><li>JVM最大的内存区域，申请的几乎所有对象都是在这里存储。垃圾回收操作的对象就是堆</li><li>在程序启动的时候就申请了，但是不一定会全用</li><li>针对堆空间占用，对其不定期的清理机制叫做 GC（Garbage Collection）；不仅需要销毁对象还要空间整理</li></ul><h5 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h5><ul><li>作为方法区的物理存储容器，而方法区存储的内容有：类信息、常量池、方法数据、方法代码</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li><code>栈</code>：存放局部变量</li><li><code>堆</code>：存放new出来的东西</li><li><code>方法区</code>：被虚拟机加载的类信息、常量、静态常量等</li></ul><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>①对象的创建位置</p><ul><li>取决于对象的类型和在Java类中存在的位置</li><li>对象分为基本数据类型和普通对象；针对<strong>普通对象</strong>，JVM会首先在堆上创建对象，然后在其他地方使用的其实是它的引用，比如把这个引用保存在虚拟机栈的局部变量表中。针对<strong>基本数据类型</strong>，如果方法体内声明了基本数据类型的对象，它就会在栈上直接分配，其他情况都是在堆上分配</li><li>除方法内部的基本数据类型是直接在栈上分配（引用与值并存于此）；<strong>常规而言，栈一般只持有引用，堆只持有实例对象，常量池持有字符串常量以及基本类型常量（public、static、final）</strong></li></ul><p>②存在栈中的数据可以共享</p>]]></content>
    
    <summary type="html">
    
      深入浅出Java虚拟机笔记；JVM虚拟机基础
    
    </summary>
    
      <category term="Java" scheme="https://www.wl960127.top/categories/Java/"/>
    
    
      <category term="Jvm" scheme="https://www.wl960127.top/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>Go进阶</title>
    <link href="https://www.wl960127.top/posts/4ecb59a/"/>
    <id>https://www.wl960127.top/posts/4ecb59a/</id>
    <published>2020-12-18T11:06:14.000Z</published>
    <updated>2021-03-10T07:09:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><h5 id="协程池"><a href="#协程池" class="headerlink" title="协程池"></a>协程池</h5><ul><li>限制执行次数（单位时间上限及单个执行次数）</li></ul><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><ul><li>传值</li><li>取消多个协程</li></ul><h5 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h5><ul><li>不要放在结构体，要以参数形式传递</li><li>作为函数参数时候，要放在第一位</li><li>使用conetxt.Backgroud函数生成得根节点Context，即最顶层Context</li><li>传值时候尽量少传</li><li>多协程中是安全的</li></ul><h4 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h4><h5 id="for-select"><a href="#for-select" class="headerlink" title="for select"></a>for select</h5><ul><li>常规使用<h5 id="select-timeout"><a href="#select-timeout" class="headerlink" title="select timeout"></a>select timeout</h5></li><li>设置超时时间，避免无限等待<h5 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h5></li><li>适用于工序相互依赖，顺序性的流水线模式<h5 id="扇出和扇入"><a href="#扇出和扇入" class="headerlink" title="扇出和扇入"></a>扇出和扇入</h5></li><li>优化型的Pipeline模式，通过多个协程并发，把多个channel合成一个</li><li>适用于针对流水线模型下，需要增加某个节点数量<h5 id="Futures"><a href="#Futures" class="headerlink" title="Futures"></a>Futures</h5></li><li>工序相互独立，可同时进行</li><li>区别与一般协程，可以通过<code>channel</code>返回结果</li></ul><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul><li><code>var</code>声明的指针变量是不能直接赋值和取值的，因为此时仅仅是一个变量，还没有对应的内存地址，值为 <code>nil</code></li></ul><h5 id="使用原则-1"><a href="#使用原则-1" class="headerlink" title="使用原则"></a>使用原则</h5><ul><li>指针的接收者是map、slice、channel这类引用类型，不适用指针</li><li>如果需要修改接收者，那么需要使用指针</li><li>如果接收者是比较大的类型，那么需要考虑使用指针。因为内存拷贝廉价，所以效率高；对于int、bool等小数据类型没有必要使用</li><li>变量赋值，参数传值时候可以节省内存</li><li>并发安全的情况下，尽可能不适用指针，使用指针需要保证并发安全</li><li>指针不要嵌套，虽然允许，但是最好不要</li></ul><hr><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><ul><li>单元测试</li><li>单元测试覆盖率</li><li>基准测试 （评估测量和评估软件性能指标）</li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li>逃逸分析</li></ul><h5 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h5><ul><li>尽可能避免逃逸，因为栈内存效率更高，还不用GC。小对象的传参，array比slice效果好；如果无法避免逃逸，还是在堆上分配内存，对于频繁的内存申请操作，需要使用<code>sync.Pool</code>进行重用内存</li><li>结合合适的算法</li><li>可使用Go自带的性能剖析工具<code>pprof</code>，查看CPU分析、内存分析、阻塞分析、互斥锁分析</li></ul><hr><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3>]]></content>
    
    <summary type="html">
    
      Golang语法学习笔记补充；待补充
    
    </summary>
    
      <category term="Go" scheme="https://www.wl960127.top/categories/Go/"/>
    
    
  </entry>
  
</feed>
