<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021读书记录</title>
      <link href="/posts/40b4dd29/"/>
      <url>/posts/40b4dd29/</url>
      
        <content type="html"><![CDATA[<h4 id="知行合一王阳明"><a href="#知行合一王阳明" class="headerlink" title="知行合一王阳明"></a>知行合一王阳明</h4><hr><h4 id="古代中国文化讲义"><a href="#古代中国文化讲义" class="headerlink" title="古代中国文化讲义"></a>古代中国文化讲义</h4><hr><h4 id="国学基础知识"><a href="#国学基础知识" class="headerlink" title="国学基础知识"></a>国学基础知识</h4><hr><h4 id="树上的男爵"><a href="#树上的男爵" class="headerlink" title="树上的男爵"></a>树上的男爵</h4><hr><h4 id="星之继承者"><a href="#星之继承者" class="headerlink" title="星之继承者"></a>星之继承者</h4><hr><h4 id="汉朝那些事"><a href="#汉朝那些事" class="headerlink" title="汉朝那些事"></a>汉朝那些事</h4><hr><h4 id="明朝那些事"><a href="#明朝那些事" class="headerlink" title="明朝那些事"></a>明朝那些事</h4><hr><h4 id="论中国"><a href="#论中国" class="headerlink" title="论中国"></a>论中国</h4><hr><h4 id="万物有灵且美"><a href="#万物有灵且美" class="headerlink" title="万物有灵且美"></a>万物有灵且美</h4>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IO与Socket简单笔记</title>
      <link href="/posts/2218b608/"/>
      <url>/posts/2218b608/</url>
      
        <content type="html"><![CDATA[<h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><ul><li>不仅是对文件的操作，网络中比如Socket也是IO操作目标</li><li>InputStream/OutputStream用于读写字节（操作图片文件）</li><li>Reader/Writer则是基于操作字符，增加了字符编解码等功能（读写文本信息）</li><li>BufferOutputStream等带缓冲区的实现，可以避免频繁磁盘读写从而提高处理效率（记得flush）</li></ul><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><h5 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h5><p>传统IO，基于流模型实现，同步阻塞</p><h5 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h5><p>提供了Channel、Selector、Buffer等新抽象，可构建多路复用、同步非阻塞的IO，以及提供更接近操作系统底层的高性能数据操作方式</p><h5 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h5><p>Asynchronous IO，改进版NIO。引入了异步非阻塞IO</p><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><ul><li><p>synchronous</p><p>一种可靠的运行机制，进行同步操作的时候，后续的任务需要等待当前调用返回之后才会进行下一步</p></li><li><p>asynchronous</p><p>与同步相反，其他任务不需要等待当前调用返回，通常依靠事件、回调等机制来实现任务次序的关系</p></li></ul><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><ul><li><p>blocking</p><p>进行阻塞操作的时候，线程会处理阻塞状态、无法从事其他任务。只有当条件就绪才能继续</p></li><li><p>non-blocking</p><p>不管IO操作是否结束，直接返回，相应的操作在后台继续处理</p></li></ul><hr><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>select</p><p>epoll</p><p>poll</p><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><h5 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h5><h5 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h5><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中的Widget</title>
      <link href="/posts/69f1c3a4/"/>
      <url>/posts/69f1c3a4/</url>
      
        <content type="html"><![CDATA[<h4 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h4><ul><li><code>StatefulWidge</code>与<code>StatelessWidget</code>继承自<code>Widget</code></li><li><code>Widget</code>是一个配置文件，<code>Element</code>才是真正被使用、修改的对象<img src="widget类图.png"  /></li></ul><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><ul><li><p><code>StatefulWidge</code>与<code>StatelessWidget</code>的<code>craeteElement</code>都分别生成对应的实例<code>StatefulElement</code>、<code>StatelessElement</code>，而<code>Element</code>最终还实现了<code>BuildContext</code>，源码中<code>BuildContext</code>对于自身的描述为:实际是<code>Element</code>对象，该接口用于阻止直接操作<code>Element</code>对象</p></li><li><p>对于<code>StatefulElement</code>与<code>StatelessElement</code>,很重要的一点在于双方都拥有的函数 <code>build</code>,但是区别在于：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StatefulElement 使用 State</span></span><br><span class="line">  Widget build() =&gt; state.build(<span class="keyword">this</span>);  </span><br><span class="line"><span class="comment">//StatelessElement 使用 StatelessWidget</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build() =&gt; widget.build(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p><img src="element%E7%B1%BB%E5%9B%BE.png" alt="element类图"></p><p>Widget的diff机制（同级之间才会进行对比），<code>Key</code>用以做唯一标识，方便在结点树中找到对应的状态做配置</p><h3 id="Widget-1"><a href="#Widget-1" class="headerlink" title="Widget"></a>Widget</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Initializes [key] for subclasses.</span></span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line">   ...</span><br><span class="line">  <span class="comment">/// Whether the `newWidget` can be used to update an [Element] that currently</span></span><br><span class="line">  <span class="comment">/// has the `oldWidget` as its configuration.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// An element that uses a given widget as its configuration can be updated to</span></span><br><span class="line">  <span class="comment">/// use another widget as its configuration if, and only if, the two widgets</span></span><br><span class="line">  <span class="comment">/// have [runtimeType] and [key] properties that are [operator==].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// If the widgets have no key (their key is null), then they are considered a</span></span><br><span class="line">  <span class="comment">/// match if they have the same type, even if their children are completely</span></span><br><span class="line">  <span class="comment">/// different.</span></span><br><span class="line">  <span class="comment">/// 该函数返回 true则说明不需要替换Element，直接更新Widget即可     </span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">        &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;       </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中的Key</title>
      <link href="/posts/8d8888c5/"/>
      <url>/posts/8d8888c5/</url>
      
        <content type="html"><![CDATA[<p>Key简单应用的时候，就是当前 widget 的唯一标识，在重构布局时候防止在同级别 Tree 下无法找到正确的元素及状态</p><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><img src="Key.jpg" alt="Key" style="zoom:80%;" /><hr><h4 id="Localkey"><a href="#Localkey" class="headerlink" title="Localkey/"></a>Localkey/</h4><p>：应用于拥有相同父元素的小部件进行比较的情况</p><h5 id="ValueKey"><a href="#ValueKey" class="headerlink" title="ValueKey"></a>ValueKey</h5><p>：颗粒度细分的时候使用</p><h5 id="ObjectKey"><a href="#ObjectKey" class="headerlink" title="ObjectKey"></a>ObjectKey</h5><p>：单一细颗粒度无法满足的时候，多个因素时候使用</p><h5 id="UniqueKey"><a href="#UniqueKey" class="headerlink" title="UniqueKey"></a>UniqueKey</h5><p>：无法满足唯一性的时候使用</p><hr><h4 id="GlobalKey"><a href="#GlobalKey" class="headerlink" title="GlobalKey"></a>GlobalKey</h4><p>整个应用中独一无二的键<br>由该类中方法可以得到对应的<strong>Widget</strong>、<strong>State</strong>和<strong>Element</strong>，当需要跨组件操作时候就可以使用到</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalKey</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulWidget</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"> <span class="comment">// WidgetsBinding ！！！！</span></span><br><span class="line"> <span class="comment">// _globalKeyRegistry[this];  实际是final类型的Map&lt;GlobalKey, Element&gt;</span></span><br><span class="line"> <span class="built_in">Element</span>? <span class="keyword">get</span> _currentElement =&gt; WidgetsBinding.instance!.buildOwner!._globalKeyRegistry[<span class="keyword">this</span>];        </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>WidgetsBinding</code>在<code>runApp</code>（即应用启动的时候就会被生成单例）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> runApp(Widget app) &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized()</span><br><span class="line">    ..scheduleAttachRootWidget(app)</span><br><span class="line">    ..scheduleWarmUpFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A concrete binding for applications based on the Widgets framework.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// This is the glue that binds the framework to the Flutter engine.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetsFlutterBinding</span> <span class="keyword">extends</span> <span class="title">BindingBase</span> <span class="title">with</span> <span class="title">GestureBinding</span>, <span class="title">SchedulerBinding</span>, <span class="title">ServicesBinding</span>, <span class="title">PaintingBinding</span>, <span class="title">SemanticsBinding</span>, <span class="title">RendererBinding</span>, <span class="title">WidgetsBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Returns an instance of the [WidgetsBinding], creating and</span></span><br><span class="line">  <span class="comment">/// initializing it if necessary. If one is created, it will be a</span></span><br><span class="line">  <span class="comment">/// [WidgetsFlutterBinding]. If one was previously initialized, then</span></span><br><span class="line">  <span class="comment">/// it will at least implement [WidgetsBinding].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// You only need to call this method if you need the binding to be</span></span><br><span class="line">  <span class="comment">/// initialized before calling [runApp].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// In the `flutter_test` framework, [testWidgets] initializes the</span></span><br><span class="line">  <span class="comment">/// binding instance to a [TestWidgetsFlutterBinding], not a</span></span><br><span class="line">  <span class="comment">/// [WidgetsFlutterBinding].</span></span><br><span class="line">  <span class="keyword">static</span> WidgetsBinding ensureInitialized() &#123;</span><br><span class="line">    <span class="keyword">if</span> (WidgetsBinding.instance == <span class="keyword">null</span>)</span><br><span class="line">      WidgetsFlutterBinding();</span><br><span class="line">    <span class="keyword">return</span> WidgetsBinding.instance!;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetpack与Compose使用</title>
      <link href="/posts/ab760be3/"/>
      <url>/posts/ab760be3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/wl960127/jet-pack-compose">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于学习的第五篇-学霸养成</title>
      <link href="/posts/95b53bcb/"/>
      <url>/posts/95b53bcb/</url>
      
        <content type="html"><![CDATA[<p>学霸真正的优势在于：知识储备更多；因为懂得越多，学的越快</p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>学习和记忆的本质，就是新知识与旧知识建立联系，存储的旧知识容量越大、种类越多，就能随时找到新知识之间的联系，越能够更好的学习</p><h4 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h4><p>越早储备，越早学习越好；种一棵树最好的时间是十年前，其次是现在</p><ul><li><strong>知识储备</strong></li><li><strong>能力储备</strong> </li></ul><h4 id="重视努力"><a href="#重视努力" class="headerlink" title="重视努力"></a>重视努力</h4><p>重视努力让孩子拥有一个TA自己能够掌握的变量，会让他们认为自己能掌握自己的成功；</p><p>重视聪明的孩子在遇到实在无法及解决的问题时候，或许会出现一种自我矛盾的疑问，也许会怀疑自己。但是重视努力的孩子会认为自己会认为自己是否是因为不足够努力、认真，在这个时候会想靠更多的努力和认真去解决问题；<strong>想学好某些事，做好某些事，提高智能的方法，就是练习和努力</strong></p><h4 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h4><p>避免简单的重复做某些“天真的练习”</p><ul><li><p>目标明确</p><p>不要照单全收，了悉自己的目的</p></li><li><p>极其专注</p></li><li><p>及时反馈调整</p><p>比输入更重要的是输出；用输出来指导自己的输入；考试、写作、闭卷回忆等</p></li><li><p>远离舒适</p><p>只有在自己觉得有点应付不了的时候，才是真正的提升时刻</p></li></ul><h4 id="双加工"><a href="#双加工" class="headerlink" title="双加工"></a>双加工</h4><p>避免”路径依赖“，是一种经济学理念：一旦进入某一途径，就可能对这种路径产生依赖；</p><p>因为惯性的力量，会使得这一选择不断强化，逐渐沉迷。就比如在日常的刷剧过程中，习惯性看着画面听着声音，很少去刻意观看中文字幕下面的英文翻译。当然，我自己也是这么干，有尝试过一边看电影一边看英文字幕，但是知识储备太低了，正常倍速根本就来不及看完完整的一句，由此也错过了一个学习英语的好方法，后面也放弃了。由此可见，还是自驱力不够</p><h5 id="自动化加工"><a href="#自动化加工" class="headerlink" title="自动化加工"></a>自动化加工</h5><ul><li>积累了某一行为模型的大量练习，比如吃饭，说话等等近乎无意识行为；这种行为对执行受意识加工没有任何影响，比如在健身房，一边跑步一边听书</li></ul><h5 id="受意识加工"><a href="#受意识加工" class="headerlink" title="受意识加工"></a>受意识加工</h5><ul><li>强迫式行为，让注意力专注于某些事情</li></ul><p>注意力闲置的时候，不用就是浪费了，在这个过程中，运用“双加工理论”，去同时做一件需要专注的事情，注意力使用率提高，完成更多的任务；这就是时间管理、效率管理的一个小技巧。当接触学习一件新事物的时候，因为对于未知事物认知不够，导致本能的也许有些觉得不行，心态导致不能完全将注意力投入，所以也可以同时做一些与之相关的事情。比如：在学习的时候，拿出笔做笔记或者在纸上梳理相关思路。这样去尝试更高程度的专注</p><p><strong>当积累了大量的练习受意识加工是可以转换为自动化加工</strong></p><p>一开始，那些分开的知识点，会散落占据大部份的工作记忆。通过练习的归纳，化零为整，内化为自动化、直觉式的反应，这样工作记忆才能在归纳之后得到多余的空间去做其它事情</p><h4 id="拒绝焦虑"><a href="#拒绝焦虑" class="headerlink" title="拒绝焦虑"></a>拒绝焦虑</h4><p>爱迪生：天才是 1% 的灵感，加上 99% 的汗水</p><p>方法论没有那么重要！任何一份工作，大部分内容都是很繁琐机械的，创造力当然很重要，但是永远只占有极少的一部分。因为我们花费1%时间涌向的灵感获取到的东西，往往需要99%的时间去努力和实践，才能真正落实</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于学习的第四篇-时间管理</title>
      <link href="/posts/858effef/"/>
      <url>/posts/858effef/</url>
      
        <content type="html"><![CDATA[<h4 id="计划定制"><a href="#计划定制" class="headerlink" title="计划定制"></a>计划定制</h4><p>计划应当是具体的，包括任务内容、时间以及频率的具体；因为只有足够具体的计划，才有被执行的可能性</p><ul><li>计划可衡量是因为需要一个具体的参考标准</li><li>计划可达到的可以让自己从容的一步步完成</li><li>计划和大目标具有一定相关性，避免假装努力</li><li>计划应当由有效截至日期作为约束</li></ul><h4 id="计划执行"><a href="#计划执行" class="headerlink" title="计划执行"></a>计划执行</h4><ul><li>只做好今天的事情，明天的事情明天再说</li><li>分清楚： 紧急又重要、紧急不重要、重要不紧急</li><li>说干就干 不要纠结太多，不要准备太多给自己留与余地</li></ul><p>大致知道自己要做什么事情，理清执行流程，直接开干，专注一件又一件</p><h4 id="保驾护航"><a href="#保驾护航" class="headerlink" title="保驾护航"></a>保驾护航</h4><ul><li><strong>不应当为了完成任务而去完成任务</strong></li></ul><p>在学习过程中，做的最不切实际的事情就是：自认为可以在自己指定的时间内完成指定任务</p><ul><li><strong>不做无效任务</strong></li></ul><p>对于自己来说，有一个不知道是不是好的习惯，每次看书都是匆匆忙忙的看一遍，然后再看一遍，甚至再看一遍。有时候一本反复读了多次，因为觉得觉得书就应当多读几遍才能不那么容易遗忘。可是事实看来，也算是一个不好的习惯，因为急急忙忙的看养成了一个坏习惯就是看什么都是急急忙忙的瞥一眼。完全没有映射到大脑中，且实际中我也不定有时间再进行重复阅读；这也就导致了做了无效阅读，完全就是在打发时间。所以说，看书还是应当仔细认真的阅读，对于自己而言，可以采取先瞥一眼确认大概流程，再仔细阅读。在这个过程中，加深自己的条理性时候也能做到有效阅读</p><ul><li><strong>分解困难</strong></li></ul><p>将复杂艰难的、不喜欢的任务拆解成一个又一个任务。每次任务完成带来的成就感激励自己的下一次</p><ul><li><strong>心态随时调整</strong></li></ul><p>很多时候，做某些事情的时候，因为长期做或者某个问题迟迟无法解决带来的挫败感会让人很容易心态炸裂。这个时候需要“全身心恢复精力”；哈佛大学教授 Tal 说：问题不在于压力，不是生理上的问题，也不是心理上的问题，问题在于缺少恢复；（散步、听音乐、午休跟朋友聊天……而不是玩手机）</p><p>​    ① 冥想：跟着自己的节奏，放空自己</p><p>​    ②做不同的事：事情穿插，使用大脑的不同区域</p><p>休息使得更好的生出灵感，更高效的解决问题；</p><p>有时候学习者尽力去解决一个复杂的或者需要创造性思考的问题时，无论多么努力，还是不能解决问题。在这种时候，暂时停止对问题的积极探索，可能就会对问题的解决，起到关键作用。这种暂停就是“<strong>酝酿效应</strong>”</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于学习的第三篇-高度自律</title>
      <link href="/posts/cf03b6bc/"/>
      <url>/posts/cf03b6bc/</url>
      
        <content type="html"><![CDATA[<h4 id="拒绝拖延"><a href="#拒绝拖延" class="headerlink" title="拒绝拖延"></a>拒绝拖延</h4><h5 id="五分钟"><a href="#五分钟" class="headerlink" title="五分钟"></a>五分钟</h5><p>真正累的是想一件事情的时间，因为会比你真正做这件事情的时间多，而且是多得多；而且这个障碍还是自己给自己设置的</p><ul><li>在坚持不下去的时候，告诉自己五分钟，再五分钟（为啥好像感觉在哪个马拉松故事也听过）</li></ul><h5 id="拒绝紧凑"><a href="#拒绝紧凑" class="headerlink" title="拒绝紧凑"></a>拒绝紧凑</h5><p>《拖延心理学》：当某件事我们必须做，某些规则必须遵守时候，就会产生逆反心理；拖延，是我们对这种被掌握的状态的反抗</p><ul><li>稍微走在计划的前面，给自己留下偷懒的资格和空间，当自己相对拥有不做事的权力的时候，才会更愿意去做某些事情</li></ul><h5 id="替代拖延"><a href="#替代拖延" class="headerlink" title="替代拖延"></a>替代拖延</h5><ul><li>当有一个更难得任务需要完成的时候，我们就会愿意去做相对简单得事情</li></ul><h4 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h4><p>从不自律的念头中，约束自己的一种能力</p><p>一个强大的人，并不是一直坚定，从不动摇，而是在有变弱的倾向时候选择了对抗，在这个期间，慢慢的变强大的；</p><p>简单来说：<strong>当我们想选择延迟享受的时候，大脑的奖励机制就会不停刺激我们去选择眼下的欢乐</strong></p><h5 id="接受设定"><a href="#接受设定" class="headerlink" title="接受设定"></a>接受设定</h5><ul><li><strong>我们无从逃避，我们必须接受痛苦</strong>；在面对自律和放纵的时候，告诉自己：你不是在快乐和痛苦中选择，而是在两种痛苦中选一个忍受。那么，就会选择那个有意义的痛苦</li></ul><h5 id="反向约束"><a href="#反向约束" class="headerlink" title="反向约束"></a>反向约束</h5><p>只在规定的时候自我管理，过时不候；剩下的时间，绝对不允许自律，一定要做自己</p><h5 id="外部约束"><a href="#外部约束" class="headerlink" title="外部约束"></a>外部约束</h5><p>一切的自律的前提都有一个隐形的外部约束（为什么要做这件事）；而这个外部约束就是有一个<strong>他律</strong></p><ul><li>可以在任何时间，推动进入正轨；因为自己别无选择</li></ul><h5 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h5><ul><li>快乐工作，快乐生活</li></ul><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p><code>扎琼克</code>的<strong>社会助长理论</strong>，包括”<strong>共同活动效应</strong>“和”<strong>观众效应</strong>“；前者是指：与他人共同活动的时候，我们的效率会提高，后者是：当他人在旁边观察的时候，我们的效率会提高</p><p>我们之所以觉得在图书馆等一些大家一起学习的环境中更能投入状态，是因为这种环境中，会产生一个”共同活动效应“产生的”<strong>表演型学习</strong>“心理；在这期间，会对自己产生一种”<strong>印象管理</strong>“（我们在他人面前做的几乎全部事情，起调控策略都是围绕印象管理的（罗兰·米勒《亲密关系》））的心理需求；具体就是：我们通过约束自己的言行，主动管理自己传达给别人的信息</p><p>当自己处在一个感觉没有氛围的环境中，可以把它抽象到一个有观众的环境中；想象着，如果别人在会是一个在共同活动或者观察，会是什么情景</p><h4 id="形态自驱"><a href="#形态自驱" class="headerlink" title="形态自驱"></a>形态自驱</h4><p>当获得更多自由的时候，也需要付出同等甚至更多的自律。<strong>足够自律，足够自由</strong></p><h5 id="第一件事"><a href="#第一件事" class="headerlink" title="第一件事"></a>第一件事</h5><p>不要躺在床上从玩手机或者拖延开始。在生活中，经常想着玩会手机再起来，最后就会发现不知不觉已经这么久了。又想着这么久了都既然，那就彻底放纵吧。</p><p>所以给自己一个足够的力，推动一天的开始。比如早期吃个早餐，逛个菜市场（毕竟我喜欢，啊哈哈哈）；在生活中，个人感觉要么起不来，要么起来了就几乎不想再躺着了；不躺着就觉得应该给自己找点事情做</p><h5 id="合理规划"><a href="#合理规划" class="headerlink" title="合理规划"></a>合理规划</h5><p>给自己安排规划好一定要做的事情的时间，过期不候。然后其它时间就做些兴趣爱好，比较不累的事情，自我欺骗，而不是直接就躺平了</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于学习的第二篇-高效学习</title>
      <link href="/posts/2726a13e/"/>
      <url>/posts/2726a13e/</url>
      
        <content type="html"><![CDATA[<h4 id="心流"><a href="#心流" class="headerlink" title="心流"></a>心流</h4><p>积极心理学家米哈里·契克森米哈赖，将十分专注于眼前行为时的心理状态，称之为心流，并认为是我们获得幸福的一种途径</p><h4 id="专注"><a href="#专注" class="headerlink" title="专注"></a>专注</h4><h5 id="互动"><a href="#互动" class="headerlink" title="互动"></a>互动</h5><ul><li>边听，边重复某句话中的关键字</li><li>做笔记时候，选择性划线关键字</li></ul><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li>问题让人专注；带着困惑的大脑，总会让人把认知资源留在寻求答案</li></ul><h5 id="默念"><a href="#默念" class="headerlink" title="默念"></a>默念</h5><ul><li>把本应在大脑中迅速闪现的念头，转换成具体的语言；可以用一种自我对话，即：不出声但是有口型的</li></ul><h5 id="及时调整"><a href="#及时调整" class="headerlink" title="及时调整"></a>及时调整</h5><ul><li>走神-重新专注-走神-重新专注</li></ul><h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h4><h5 id="闭环"><a href="#闭环" class="headerlink" title="闭环"></a>闭环</h5><ul><li>一件事从头做到尾。学习之余，重视复习和应用</li></ul><h4 id="连点成线"><a href="#连点成线" class="headerlink" title="连点成线"></a>连点成线</h4><ul><li>精细进行复述是存储信息最有效的方法，指的是把要记住的内容和已有的知识经验联系起来；主动思考，主动去输出</li><li>记录关键字及知识点信息，根据逻辑关系用自己的语言将关键词串起来</li><li>先记少不计多（关键点），而后由少记多（关键点扩散）</li></ul><h4 id="高效记忆"><a href="#高效记忆" class="headerlink" title="高效记忆"></a>高效记忆</h4><h5 id="主动思考"><a href="#主动思考" class="headerlink" title="主动思考"></a>主动思考</h5><ul><li>是记忆的底层逻辑，但是大脑不擅长记忆无意义的东西</li></ul><h5 id="组块化记忆"><a href="#组块化记忆" class="headerlink" title="组块化记忆"></a>组块化记忆</h5><ul><li>组块是衡量记忆容量的一种单位，虽然短时记忆的容量无法改变，但是我们可以扩充每一个单独的组块包含的信息量</li></ul><h4 id="高效读书"><a href="#高效读书" class="headerlink" title="高效读书"></a>高效读书</h4><p><strong>前提</strong>：丰富的知识储备，是快速阅读的必要前提</p><p><strong>不读</strong>：跳过不重要的信息</p><p>功利性阅读，读书本身不是目的，尽量少的时间获取尽量多的认知才是目的</p><h5 id="结果导向读书"><a href="#结果导向读书" class="headerlink" title="结果导向读书"></a>结果导向读书</h5><ul><li>根据主题，补充内容</li></ul><h5 id="漫游示导向读书"><a href="#漫游示导向读书" class="headerlink" title="漫游示导向读书"></a>漫游示导向读书</h5><ul><li>可以看到之前无法想象的新鲜素材、观点和灵感</li></ul><h5 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h5><ul><li>做粗浅标记，留下可供追溯的线索就足够了；在需要的时候凭借残留印象，翻到原文，直接引用某句核心观点，或者用自己的语言去表达</li></ul><h4 id="快速学习"><a href="#快速学习" class="headerlink" title="快速学习"></a>快速学习</h4><p>当限定了相对少的时间，就会主动思考更高效的方法，而非纠结于细枝末节；因为时间管理领域的”帕金森法则”：<strong>工作会不断膨胀，直到填满截至日期前的全部时间</strong></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>先抓核心、重点；先完成再去考虑完美</li><li>要允许自己写出垃圾，否者垃圾都写不出来</li></ul><h5 id="解决工作膨胀"><a href="#解决工作膨胀" class="headerlink" title="解决工作膨胀"></a>解决工作膨胀</h5><ul><li><strong>表现</strong>：在接触全新的东西的时候，总是喜欢追求掌握全面的信息</li><li><strong>解决</strong>：<ul><li>立刻有输出</li><li>需要让自己立刻看到成果，看到自己学会了一点东西，做了一些事情</li><li>在刚知道怎么走的时候，就要把步子迈出去；而不是让每一个觉得需要弄明白的事情，带来无尽的痛苦和沮丧</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于学习的第一篇-底层思维</title>
      <link href="/posts/7ae29eec/"/>
      <url>/posts/7ae29eec/</url>
      
        <content type="html"><![CDATA[<h4 id="峰终定律"><a href="#峰终定律" class="headerlink" title="峰终定律"></a>峰终定律</h4><p>人们对一切人、事、物的感受，由峰值和终值两个因素决定</p><p>峰值：这段体验中的最高峰，包括正向和负向</p><p>终值：这段体验结束时候的感觉</p><p>在学习或者做某些事情的时候，最害怕的就是挫败感；明明自己花了很多精力和时间，但是总觉得什么都没有收获，恶性循环导致无法得到正向反馈。因而就需要避免负面终值，让学习变得相对愉悦</p><p>此时，可以尝试艰难和轻松的任务穿插着完成，避免负向终值的出现。让自己能在学习上获得正向反馈，收获足够的成就感，因为某种奖励机制建立之后，才能够长期保持</p><p>对于任务不需要给自己安排过多，因为时间紧凑以及任务可能存在的未知压力在一定程度上会给自己带来过多不必要的焦虑；以至于最后任务没有完成或者完成的不够好，打击自己的心态，影响后期效率</p><p>不要以某种标准框束自己，不要因为急着求某种结果，而是踏踏实实走好每一步，专注做事本身。路要一步步走，饭要一口口吃</p><p>给自己一些容错空间。心理学家尼科尔斯、德韦克等人，提出了 “成就目标” 这个概念。“成就目标” 包括 “掌握目标” 和 “成绩目标” 两种类型，前者是指  “掌握知识和提高能力”，后者是指 “ 好名字和成绩 ”，一个定位于过程中的成长，一个定位于结果的优异；如果将 “掌握目标” 作为努力的重心，就要知道遇到问题和遭受失败是一件正常的事情。任何事情、任何能力的发展，都是呈螺旋状上升的过程，对自己、对事情，要有一定的容错空间 </p><h4 id="伪勤奋"><a href="#伪勤奋" class="headerlink" title="伪勤奋"></a>伪勤奋</h4><h5 id="花大量时间做简单的事情"><a href="#花大量时间做简单的事情" class="headerlink" title="花大量时间做简单的事情"></a>花大量时间做简单的事情</h5><ul><li>只有去完成那些让你觉得要思考，需要克服困难的任务，才是 ”真勤奋“</li></ul><h5 id="不检测结果"><a href="#不检测结果" class="headerlink" title="不检测结果"></a>不检测结果</h5><ul><li>学的东西，要立刻检测，检测有没有记住，会不会做</li></ul><h5 id="不总结规律"><a href="#不总结规律" class="headerlink" title="不总结规律"></a>不总结规律</h5><ul><li>学习不仅包括对知识的学习，还包括对学习方法的学习。而学习方法，并不只需要通过学习别人的经验来获得，还需要自己的实践和复盘；需要试错、分析、反思、调整，以及应用，要有进行 “元认知” 的意识。即：知其然，知其所以然</li></ul><h5 id="道德许可效应"><a href="#道德许可效应" class="headerlink" title="道德许可效应"></a>道德许可效应</h5><p><code>道德许可</code>（moral licensing）是指：对某件事有一个明确的道德标准，在做出相关的行为和判断之后，反而更倾向于违背这个标准</p><ul><li>通俗来讲：为了某个目标，付出了些许努力，或者说只是预想了宏伟的计划，就把自己感动坏了，觉得已经在变好了，就开始放纵自己，给自己奖励。这就是<strong><code>道德许可效应</code></strong>；所以<strong>应当将想做的事情最简化，去掉花里胡哨的，直接开始，直接做最本质核心部分的工作，避免发生道德许可效应</strong></li></ul><h4 id="考试思维"><a href="#考试思维" class="headerlink" title="考试思维"></a>考试思维</h4><h5 id="如何回答问题"><a href="#如何回答问题" class="headerlink" title="如何回答问题"></a>如何回答问题</h5><ul><li>出题范围</li><li>出题方式</li><li>倒推学习，理解和记忆的正确方式</li><li>不同知识点联系起来，时间线上的发展脉络理清</li></ul><h5 id="即用即学"><a href="#即用即学" class="headerlink" title="即用即学"></a>即用即学</h5><ul><li>根据问题找到答案</li><li><code>检索式练习</code>：通过提问和主动回想的方式，去巩固知识点</li></ul><p>主动的去学习理解，在得到答案之前，强化检索路径；一遍遍地看答案的只会让你觉得自以为掌握。</p><h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><p>一旦有了得失心，并且畏惧自己做的不够好，担心回浪费时间，带来失败地结果，就会开始迷茫；所谓：怕什么来什么</p><p>对于学习方式如果存在自我怀疑，有效的解决方法：给自己一个小时限定时间，先用眼下的方法，尽量专注。如果过程中有更好的方法，记录下来，一个小时结束后，花几分钟对学习方法进行调整</p><p>对于某一固定的学科或者领域，学习基本都是匀加速或者变加速的过程，方法会逐渐完善，效率也会逐步提高</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>明朝那些事第一部分</title>
      <link href="/posts/6f3535f0/"/>
      <url>/posts/6f3535f0/</url>
      
        <content type="html"><![CDATA[<p>朱元璋；原名：朱重八，1328~1398，今安徽凤阳人；最终认证：明太祖；年号：洪武（1368～1398）</p><p><img src="%E6%9C%B1%E5%85%83%E7%92%8B.png" alt=""></p><h4 id="悲惨的开始"><a href="#悲惨的开始" class="headerlink" title="悲惨的开始"></a>悲惨的开始</h4><p>​        穷苦人家的孩子，闹灾荒的时候。家里人饿死的差不多了，种了一辈子地的爹妈饿死后，居然差点没有地方可以下葬。因为是佃户，一辈子给地主家种地；好不容易埋了爹娘，就去皇觉寺当和尚混口饭吃。因为资历低，几乎寺庙里面的脏活累活全包，但是怀揣着这日子起码有口饭吃的心态，日子也就这么过着；</p><p>​       后来寺庙的日子也不好过，开始要出去化斋饭（就是要饭嘛）；可是寺庙也是势力的地方，朱重八都是被分配到重灾区。别人都吃不饱，你还去敲门？敲了门大不了就是被羞辱，可是不敲门，就只能饿死。三年的化斋生涯，最终磨练了心性，但是朱重八还是没有想着造反，毕竟日子还是能过得下去吧？造反可是要杀头的，毕竟！朱重八心里想着。</p><h4 id="时代的召唤"><a href="#时代的召唤" class="headerlink" title="时代的召唤"></a>时代的召唤</h4><p>​        日子也就这么勉为其难的过着。突然有一天，和尚朱重八收到好友汤和的一封信，大意就是：“兄弟我在郭子兴（造反军）这当千户，带你一起博一博！”。什么？造反的事情我可不干，朱元璋想着赶紧烧了这封信件。但是当晚有师兄就告诉他：“重八，叛军给你写信的事情有人去告发你了，麻溜的跑吧”。WTF？这日子还让不让过了，我只想安安静静活下去。跟叛军通信被抓了一定死，造反被抓也是死，造反还不一定死，算了算了，博一博！</p><p>​         就这样，朱重八见到了郭子兴，投军却被当成奸细的那种捆绑式见面。因为此时，郭子兴正在被围，手下的小弟觉得这会来投军，怕是来理应外和的。直到沉着冷静的朱重八拿出了汤和的介绍信，郭子兴才对这个脸像月牙铲的人重视，于是让他当了自己的亲兵。</p><p>​        在这里，朱重八有了新开始，有了老婆：一个姓马的姑娘，他爹是郭子兴的朋友，他爹死后，郭子兴把她收为自己的义女。老婆也有了，还顺带给自己改了一个名字：朱元璋；是金子在哪里都会发光，当时代选择了一个人，那么他便从此主角光环。因为士兵总能看到：千户汤和跟着一个叫朱元璋的小啰啰后面当小弟。</p><p>​        不久后，朱元璋越混越开，风生水起。但是郭子兴器小，见不得自己的小弟好，于是让朱元璋打郭子兴的老家：定远。反正就是很不好啃的一个地方，但是朱元璋用他卓越的战略眼光和指挥能力，采取了夜袭攻下了这里。这件事让朱元璋越发觉得跟这些人玩下去么的意思，打算单飞。于是拉了七百来号人，告诉郭子兴说我要单飞；郭子兴求之不得。于是朱元璋在这七百人中挑了24个人，剩下的都留给了郭子兴，正式开始单干。对于朱元璋的眼光，不得不佩服，因为这24个人，最后都是明朝的高级干部。感觉有点像清朝努尔哈赤拿着祖传的13副盔甲造反的感觉，果然历史总是惊人的相似</p><h4 id="三足鼎立"><a href="#三足鼎立" class="headerlink" title="三足鼎立"></a>三足鼎立</h4><p>​        发展的越来越好的朱元璋此时有两个竞争对手：张士诚和徐寿辉；前者是盐贩子，后者是布贩子，据说是当地美男子。张士诚的成名之战是高邮之战，国号是：吴，元朝宰相脱脱率60万大军（实数），打了三个月都没有下来。后面因为元顺帝听信馋言，怕大军在外生变，因而算是功败垂成；徐寿辉呢，开始国号就叫：天完！天完国！没错！你品，你细品，稳稳的压了大元（大哉乾元）；虽然说后面吃了大败仗，又改成了太平。但是不重要，重要的是前期的时候，他有一个小弟：陈友谅。徐寿辉是一个老好人，所以注定只是一个配角。在五通庙，在陈友谅指示下，当面锤杀，之后陈友谅登基。国号：汉，定都：江西九江。</p><p>​        朱元璋对张士诚的评价是：器小，陈友谅：志骄。器小看事，志骄生事；因而后期决战之时，先攻击陈友谅，料定张士诚不会插手，事实也是如此；</p><p>​        陈友谅是低等渔民，常年在船上，也因为鱼腥味被人所白眼相待。后来努力考了个秀才，在元朝当了个小公务员，还是被人看不起。因而造反大队路过的时候，索性直接砸了元朝的饭碗，打算反叛来谋取最高的地位，把那些看不起他的人踩在脚下。话说，传闻陈友谅的小名：九四。诶，跟重八一样，都是苦命人啊！ 不过陈友谅是重头到尾都跟元朝死磕的一个人，张士诚后期有投诚元朝，虽然说又叛出来了。不要不相信，朱元璋也跟元朝有一腿。</p><h4 id="一决雌雄"><a href="#一决雌雄" class="headerlink" title="一决雌雄"></a>一决雌雄</h4><p>​        本来没有那么快的。因为一个人：常遇春！草莽出身，又一身功夫，以打先锋位出名，但是有一个不好的习惯：杀降。有一次打仗赢了陈友谅的一支部队，在没有请示的情况下，连夜活埋三千人，留了个别活口告诉陈友谅：仗，是我常遇春打赢的。人，是我常遇春杀的。这种表现极度的刺激到了陈友谅，陈友谅带着自家舰队（当时中国最强）就打过来了（当时陈友谅在长江上游（湖北，江西），朱元璋在长江下游）。朱元璋占据着（南京，原名：集庆。朱元璋改为应天：顺应天命）应天，依托太平（安徽辖区），陈友谅的舰队高达威猛，在船上驾着短梯就翻上了太平的城墙。</p><p>​        应天一下子就变得像脱光了站在陈友谅面前。此时，朱元璋的小弟都说要避避风头，找个地方躲一躲，朱元璋的短板就在于都是小渔船，打水战，稳稳要输。这个时候，一直默默无闻的老好人刘基站出来呵斥了一众人。坚定了朱元璋要死战到底的决心。</p><p>​        朱元璋派出了反面间谍康茂才，此人原先在陈友谅手下干活，后来投奔了朱元璋，但是在朱元璋的指示下还跟陈友谅有联系。他告诉陈友谅说我要投诚，你们开船过来吧，路上只有一座木桥，到时候我把它搞了，大家一路冲冲冲，直达应天府围墙子底下。陈友谅信了，船队一路过来，发现木桥果然没有了。没错！朱元璋连夜把木桥拆了，换了座石桥！此路不通！这个时候，陈友谅得知自己的弟弟陈友仁率一万人已经在龙湾登陆了，于是立马决定转战龙湾。可惜，这就是朱元璋选定的战场，当陈友谅大军全部下船到了这里之后，发现四面八方都是朱元璋的部队，才发现进套了，而又因为退潮，船只搁浅无法开动。水军上岸了，面对从山上打先锋冲下来的骑兵，几个交叉战术下，乱了阵脚。此战，陈友谅大败，死伤20000余，俘虏7000+，丢了百来条大船和数百条小船，逃回了九江。</p><h4 id="天命所归"><a href="#天命所归" class="headerlink" title="天命所归"></a>天命所归</h4><p>​        当然，对于陈友谅来说，这点损伤是惨重的，但是不影响根基。之后，发生了一件事，让陈友谅很是火恼。那就是洪都（今：江西南昌）叛变了，投靠了朱元璋。在当时洪都是一个很重要的水利据点，早期的江西就是依托漕运，而且九江离南昌也很近（高铁一小时）。陈友谅很气愤在于洪都是一个很重要的地方，而且还被人背叛了。当时守在洪都的是朱元璋的侄子：朱文正；（明初六大名将分别为：徐达、常遇春、冯胜、李文忠（朱元璋外甥）、朱文正（朱元璋侄子）、邓愈）。陈友谅设计让朱元璋去救友军，同为红巾军的刘福通和当时名义上的君王：韩林儿，结果刘福通战死了，韩林儿活下来了。起初去救援的时候，刘基就劝朱元璋不要去，朱元璋不听，结果接了这么一个烫手山芋回来，虽然说最后还是不明不白的把韩林儿扔水里弄死了（从此事起，朱元璋与刘基有了隔阂，因为朱元璋想到的，刘基想到了，朱元璋没有想到的，刘基也想到了，所以开国之后刘基的待遇也不咋地）。</p><p>​        与此同时，陈友谅开始进攻洪都，60万大军打了三个月，硬是没有打下只有几万人守的洪都，尤其是一个众多城门的洪都。打了三个月为啥没有援军，因为朱文正一开始就没去求援。后来实在顶不住了，叫了一个叫张子明的人去求援，白天不走晚上走，半个月之后见到朱元璋。朱元璋说大军筹备一个月就来！一个月，朱文正的骨头都被人当棒槌了。任务完成后，张子明开始白天也赶路回去，好巧不巧被陈友谅抓住了，然后就说答应投降，可以去城楼下去劝降。结果一到城楼下，张子明就大喊：兄弟们，再坚持几天，大军马上就要到了！完犊子，又被人阴了，陈有谅想着。</p><p>​    于此同时，朱元璋也带着自己的全部身家：二十万大军来了。打算在嶓阳湖（地处九江、南昌、上饶）与陈有谅决战。最开始的高潮部分在于，陈友谅的老乡张定边（陈友谅疑心极重，但是这个是例外）带着小部队出去了，双方都以为是例常巡视，结果张定边一路冲锋，斩杀好几员大将，一直杀到了朱元璋的中军位置。朱元璋才明白，是直冲自己而来，吓的立马准备调头，结果，搁浅了！嗯哼？就这，刺激！所幸当时好功夫的常遇春离朱元璋不远，确认身份后，一箭射出，正中移动靶张定边的面门，张定边不得不退走。</p><p>​    状态很焦灼，大家都杀红了眼。但是不知道陈友谅怎么回事，认为方便战事居然上了铁锁连环！有连环计，自然有火船计，朱元璋顺风又顺水。陈友谅败局已定，于是大批将领开始倒戈，气急败坏的陈友谅对于有投降意向的是见一个杀一个。于此同时，朱元璋大肆宣扬优待俘虏，欢迎投降。有了对比，就有了伤害，为了稳定军心的陈友谅登上了船头指挥作战，却被一支冷箭射穿头颅。冠军产生！虽然说张士诚还在（张士诚的小名就真的叫：九四），但是问题不大。只是期间封赏的时候，朱文正假客气了一下，没想到朱元璋信了，导致了朱文正向张士诚叛变了！被自己的侄子背叛，确实很难受，虽然说之前也不是没有，但是这次真的是伤透心了。在马皇后的劝说下，还是给了终身监禁的惩罚。        </p><p>​    1368年，攻破元朝首都大都，并改名为北平。同年！明朝宣布成立，定都应天，年号洪武。</p><p>​    1370年第一次大封功臣。明初六大将除朱文正均封公爵（常遇春1369年于北伐时暴毙，其子常茂受封），还有一个文官：李善长（老乡兼后勤部长，面相憨厚，内心狭隘）。</p><h4 id="太祖的政策"><a href="#太祖的政策" class="headerlink" title="太祖的政策"></a>太祖的政策</h4><ul><li><p>贱商重文<br>读书人的最高荣誉：<strong>连中三元</strong>，自古以来只有17人<br>明以前也有科考制度，但是每次只有十几个而已。自洪武年间开始，因各种问题，按照地理划分了南中北三榜。录取人数扩展到视情况而定三百人左右。<br>考试流程如下</p><ul><li>院试：全县选拔赛；考生：童生。录取结果分为六等。一二等才称之为秀才，见县官不拜，免一人税</li><li>乡试：全省选拔赛；考生：秀才。第一名称之为：解元，第二名：亚元；登榜则为举人，有资格做官及参加三年一次的会试；此为一榜出身</li><li>会试：全国精英选拔赛；考生：举人。第一名称之为：会元；登榜者称之为贡士，有资格参加由皇帝评选的殿试资格；</li><li>殿试：全国精英晋级赛；考生：贡士。此为两榜出身<br>按成绩分为“三甲”（即三等）：<br>一甲：三名，叫“赐进士及第”。第一名称“状元”（亦称“殿元”），第二名称“榜眼”，第三名称“探花”，三人同称“三鼎甲”‘<br>二甲：若干名，均叫“赐进士出身”<br>三甲：若干名，均叫“赐同进士出身”</li></ul><p>一甲直接进入翰林院，状元授翰林院修撰，榜眼和探花翰林院编修；其余进士再举行朝考，被选中的优秀进士则称之为“庶吉士”（明朝：非庶吉士不可为大学士 这一默认规则）。庶吉士还要在翰林学习三年，再度参加毕业考试，称之为“散馆”。合格的，授予翰林编修、检讨等，不合格的分发各部任主事等职，或以知县优先委用</p></li><li><p>惩贪<br>自古以来大约是洪武年间的官最难做，因为俸禄少，又惩治贪污严重，六十两起就剥皮；大约是年少的痛苦经历使得朱元璋对官吏深恶痛绝。为了活下去，明朝的官员大都以两种形式在老百姓身上占便宜：火耗费和淋尖踢斛，政府也默认。朱元璋在位时候，官员都不得不这么活下去，但是朱元璋驾崩后，明朝的官员开始了大肆贪污。</p></li></ul><h4 id="洪武四大案"><a href="#洪武四大案" class="headerlink" title="洪武四大案"></a>洪武四大案</h4><h5 id="胡惟庸案"><a href="#胡惟庸案" class="headerlink" title="胡惟庸案"></a>胡惟庸案</h5><ul><li>洪武十三年（1380年）</li><li>一定程度上是为了取消传承千年的丞相制度，对胡惟庸采取了捧杀的形式。对胡惟庸结党牵连官员，前后共诛杀3万余人！取消丞相（中书省老大）一岗后，彻底将三省六部中的中书省废除；直至永乐皇帝采取了内阁的形式，一到七人不等，官员称之为内阁大学士；10年以后，有人以李善长与胡惟庸共同谋反，朱元璋顺水推舟，将李善长一家七十余口一律处斩。（胡惟庸是李善长提携起来的，拉帮结派也把李善长拉下了水）</li></ul><h5 id="空印案"><a href="#空印案" class="headerlink" title="空印案"></a>空印案</h5><ul><li>洪武十五年 （1376年或1382年，大多说是1382年）</li><li>明朝规定，每年各地都要到户部报账登记。需要户部与各布政司、府、县的数字须完全相符，分毫不差，才可以结项。如果有一项不符，整个账册便要被驳回，重新填报，重新盖上地方政府的印章。由于古代交通不便且数据较多难以出现纰漏，地方官员为了方便，事先会备好盖好骑缝印的空印帐册以备用。全天下都知道，除了朱元璋。因此朱元璋盛怒，一千多个县，主事官处死，副手仗一百充军</li></ul><h5 id="郭恒案"><a href="#郭恒案" class="headerlink" title="郭恒案"></a>郭恒案</h5><ul><li>洪武十八年（1385年）</li><li>说白了就是有人检举郭恒勾结大量官员，贪污，贪了国家2400万担粮食（一担约等于120斤）；在朱元璋的追查下，六部大多数官员都成了同党，每个部门基本基本就留了一个尚书和一个侍郎（部长和副部长），依次往下查，杀掉了三万余人，最终结果就是“百姓中产之家大抵皆破”；为什么说冤，是因为有疑问，当时反腐这么严重，尤其是废除了丞相之后，朱元璋很多事都亲历亲为，况且当时明朝一年也就2400多万粮食收入。</li></ul><h5 id="蓝玉案"><a href="#蓝玉案" class="headerlink" title="蓝玉案"></a>蓝玉案</h5><ul><li><p>洪武二十六年（1393年）</p></li><li><p>蓝玉，常遇春的小舅子，作战风格类似。因为明初大将人才辈出，一直到第一代无力再战的时候，才展露风头。洪武二十一年（1388年），蓝玉率15万大军出塞追击蒙古军队，直到捕鱼儿海（贝尔湖），俘获男女七万七千人，大胜而归。此一战役风头无两，因为拿下了北元的皇帝印！此后，他又多次北征蒙古，立下赫赫战功。但是此人自恃功高势大，骄横不法。在军中，他擅自黜陟将校，进止自专，甚至不听君命；起初朱元璋打算封为梁国公，但是考虑到北伐班师途中，睡了北元皇帝的老婆等一系列过度膨胀的行为，最后被晋封为凉国公，位居大将军之职。</p><p>直到洪武二十六年，借口凉国公蓝玉谋反，株连杀戮功臣宿将的重大政治案件，被诛杀者多达1.5万人，军中的骁勇将领差不多都被杀戮殆尽；在一定程度上认为是朱元璋觉得自己以及不久于人世，而只有自己能管住明初的将领，担心自己死后，不利于接班人掌权。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明朝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM类加载机制</title>
      <link href="/posts/de06556f/"/>
      <url>/posts/de06556f/</url>
      
        <content type="html"><![CDATA[<h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.png" alt=""></p><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><ul><li>除了顶层启动类装载器<code>Bootstrao ClassLoader</code>之外，其余的类装载器<code>Extension ClassLoader</code>在加载之前，都会委派给它的父装载器进行加载，层层上递给最顶层时候。如果父装载器拥有，则让父装载器加载，父装载器不装载则让<code>AppClassLoade</code>加载</li></ul><p><img src="%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" alt=""></p><h5 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h5><ul><li>一般情况下，类加载是遵循双亲委派机制的。但是类加载器通过开放的API，让加载过程更加的灵活</li><li>对于远程存储字节码以及字节码加密，这种业务需求，实现一个新的类加载器就可以了</li></ul><h4 id="栈帧字节码流转"><a href="#栈帧字节码流转" class="headerlink" title="栈帧字节码流转"></a>栈帧字节码流转</h4><p><img src="%E5%AD%97%E8%8A%82%E7%A0%81%E6%B5%81%E8%BD%AC.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM基础</title>
      <link href="/posts/8a392f6c/"/>
      <url>/posts/8a392f6c/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>上承开发语言，下接操作系统，中间的接口就是字节码。通过不停的翻译执行Java字节码，调用真正的操作系统函数<br>（ Java文件 -&gt; 编译器 -&gt; 字节码 -&gt; JVM -&gt; 机器码 ）</li><li>一次编译，处处运行</li><li>是一个规范，定义了.class文件的结构，加载机制，数据存储，运行时栈等诸多内容，最常见的JVM实现就是Hostpot</li></ul><p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。这些字节码指令，就叫做 <strong>opcode</strong></p><hr><h4 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h4><ul><li>解析执行：将opcode+操作数翻译成机器代码</li><li>即时编译 （JIT）：会在一定条件下，将字节码编译成机器码再执行</li></ul><p>这些.class文件会被加载，存放在元空间，等待被调用，这里会有一个类加载器的概念</p><hr><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><ul><li>对于Java的自动内存管理机制，为了管理这些快速的内存申请释放操作，就必须引入一个池子（<strong>堆</strong>）来延迟这些内存区域的回收操作</li></ul><h5 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h5><ul><li>Java8及以后版本，彻底移除持久化，而是使用Metaspace来进行替代，即: -XX:PermSize等参数调优已经无意义</li></ul><img src="JVM内存区域划分.png" style="zoom:80%;" /><ul><li>JVM堆中的数据是共享的，是占用内存最大的一块区域</li><li>可以执行字节码的模块叫做执行引擎</li><li>程序计数器使得执行引擎在线程切换时候可以恢复</li><li>JVM的内存划分与多线程息息相关。程序运行时候用到的栈以及本地方法栈的维度都是线程</li><li>本地内存包含元数据去和一些直接内存</li></ul><h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><ul><li>Java虚拟机栈基于线程，栈的生命周期和线程一样</li><li>栈的每条数据就是栈帧，每个栈帧包含四个区域<ul><li>局部变量表</li><li>操作数栈</li><li>动态连接</li><li>返回地址</li></ul></li></ul><h5 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h5><ul><li>与虚拟机栈非常相似，服务的对象是native方法</li></ul><h5 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h5><ul><li>一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。保存着当前线程执行的进度</li><li>因为线程而产生，与虚拟机栈配合完成计算操作</li><li>还存储了当前正在运行的流程，包括正在执行的指令、跳转、分支、循环、异常处理等</li></ul><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><ul><li>所有线程共享并存储对象（类实例和数组）的内存</li><li>JVM最大的内存区域，申请的几乎所有对象都是在这里存储。垃圾回收操作的对象就是堆</li><li>在程序启动的时候就申请了，但是不一定会全用</li><li>针对堆空间占用，对其不定期的清理机制叫做 GC（Garbage Collection）；不仅需要销毁对象还要空间整理</li></ul><h5 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h5><ul><li>作为方法区的物理存储容器，而方法区存储的内容有：类信息、常量池、方法数据、方法代码</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li><code>栈</code>：存放局部变量</li><li><code>堆</code>：存放new出来的东西</li><li><code>方法区</code>：被虚拟机加载的类信息、常量、静态常量等</li></ul><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>①对象的创建位置</p><ul><li>取决于对象的类型和在Java类中存在的位置</li><li>对象分为基本数据类型和普通对象；针对<strong>普通对象</strong>，JVM会首先在堆上创建对象，然后在其他地方使用的其实是它的引用，比如把这个引用保存在虚拟机栈的局部变量表中。针对<strong>基本数据类型</strong>，如果方法体内声明了基本数据类型的对象，它就会在栈上直接分配，其他情况都是在堆上分配</li><li>除方法内部的基本数据类型是直接在栈上分配（引用与值并存于此）；<strong>常规而言，栈一般只持有引用，堆只持有实例对象，常量池持有字符串常量以及基本类型常量（public、static、final）</strong></li></ul><p>②存在栈中的数据可以共享</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go进阶</title>
      <link href="/posts/4ecb59a/"/>
      <url>/posts/4ecb59a/</url>
      
        <content type="html"><![CDATA[<h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><h5 id="协程池"><a href="#协程池" class="headerlink" title="协程池"></a>协程池</h5><ul><li>限制执行次数（单位时间上限及单个执行次数）</li></ul><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><ul><li>传值</li><li>取消多个协程</li></ul><h5 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h5><ul><li>不要放在结构体，要以参数形式传递</li><li>作为函数参数时候，要放在第一位</li><li>使用conetxt.Backgroud函数生成得根节点Context，即最顶层Context</li><li>传值时候尽量少传</li><li>多协程中是安全的</li></ul><h4 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h4><h5 id="for-select"><a href="#for-select" class="headerlink" title="for select"></a>for select</h5><ul><li>常规使用<h5 id="select-timeout"><a href="#select-timeout" class="headerlink" title="select timeout"></a>select timeout</h5></li><li>设置超时时间，避免无限等待<h5 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h5></li><li>适用于工序相互依赖，顺序性的流水线模式<h5 id="扇出和扇入"><a href="#扇出和扇入" class="headerlink" title="扇出和扇入"></a>扇出和扇入</h5></li><li>优化型的Pipeline模式，通过多个协程并发，把多个channel合成一个</li><li>适用于针对流水线模型下，需要增加某个节点数量<h5 id="Futures"><a href="#Futures" class="headerlink" title="Futures"></a>Futures</h5></li><li>工序相互独立，可同时进行</li><li>区别与一般协程，可以通过<code>channel</code>返回结果</li></ul><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul><li><code>var</code>声明的指针变量是不能直接赋值和取值的，因为此时仅仅是一个变量，还没有对应的内存地址，值为 <code>nil</code></li></ul><h5 id="使用原则-1"><a href="#使用原则-1" class="headerlink" title="使用原则"></a>使用原则</h5><ul><li>指针的接收者是map、slice、channel这类引用类型，不适用指针</li><li>如果需要修改接收者，那么需要使用指针</li><li>如果接收者是比较大的类型，那么需要考虑使用指针。因为内存拷贝廉价，所以效率高；对于int、bool等小数据类型没有必要使用</li><li>变量赋值，参数传值时候可以节省内存</li><li>并发安全的情况下，尽可能不适用指针，使用指针需要保证并发安全</li><li>指针不要嵌套，虽然允许，但是最好不要</li></ul><hr><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><ul><li>单元测试</li><li>单元测试覆盖率</li><li>基准测试 （评估测量和评估软件性能指标）</li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li>逃逸分析</li></ul><h5 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h5><ul><li>尽可能避免逃逸，因为栈内存效率更高，还不用GC。小对象的传参，array比slice效果好；如果无法避免逃逸，还是在堆上分配内存，对于频繁的内存申请操作，需要使用<code>sync.Pool</code>进行重用内存</li><li>结合合适的算法</li><li>可使用Go自带的性能剖析工具<code>pprof</code>，查看CPU分析、内存分析、阻塞分析、互斥锁分析</li></ul><hr><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统之进程与线程</title>
      <link href="/posts/89292719/"/>
      <url>/posts/89292719/</url>
      
        <content type="html"><![CDATA[<h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p><strong>Process</strong> 正在执行的应用程序，软件执行副本，分配资源的基础单位<br><strong>Thread</strong> 轻量级进程，程序执行的基本单位</p><ul><li>操作系统的三个资源：计算资源（CPU）、内存资源、文件资源。后期为了避免一个应用开启多个进程过于耗费资源，所以在进程下面设计了一个仅仅被分配CPU资源的程序执行单位，线程</li><li>操作系统启动后，进程的入口被分配了一个主线程，而操作系统通过调用主线程及其子线程进行资源调度</li><li>创建进程开销大、成本高；创建线程开销小，成本低</li><li>操作系统中存在大量进程，为了不互相干扰所以分配了彼此完全隔离的内存区域，所以一般来说进程之间无法访问相互的内存，除非使用<strong>进程间通信</strong>。但是进程间的线程可以共享进程间的内存资源</li><li><code>用户态线程</code>和<code>内核态线程</code>，区别在于有一个在用户空间创建，一个是执行在内核态，可通过系统调用创造（内核线程是真正的线程，因为为会分配到CPU的执行资源）；<strong>用户态和内核态是为了保护内存资源，而线程划分是为了更好地使用计算资源</strong></li></ul><h5 id="开销对比"><a href="#开销对比" class="headerlink" title="开销对比"></a>开销对比</h5><hr><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><ul><li>实现锁需要底层提供的原子操作（<strong>操作不可分</strong>）</li></ul><h4 id="竞争条件"><a href="#竞争条件" class="headerlink" title="竞争条件"></a>竞争条件</h4><ul><li>多线程+多核</li></ul><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><ul><li>避免临界区</li><li>cas (Compare And Swap)</li><li>tas (Test And Set)</li></ul><h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><ul><li>目的在于达到同步(<strong>Synchronized</strong>)的状态</li></ul><h5 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h5><ul><li>悲观锁<ul><li><strong>Pressimistic Lock</strong></li><li>让<strong>临界区</strong>（访问共享资源的程序片段）互斥，每次只有一个线程可以进入临界区</li></ul></li><li>乐观锁<ul><li><strong>Optimistic Lock</strong></li><li>类似git操作，后提交的需要先确认是否有最新，再判断是否冲突，解决后再提交</li><li>类似 cas 指令</li></ul></li></ul><h5 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h5><ul><li>① 区块链形式，但是会分支太多</li><li>② 不是很清晰，大意是所有吞吐不直接由中心处理，而是用户与商家先处理。以商家和用户们为一个节点，后期在判断后逐级合并到主分支，一定程度暂缓高峰期中心处理的压力</li></ul><h4 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h4><h5 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h5><ul><li>先到先得 (First Come First Service) <ul><li>使用队列的先进先出，保证公平性和吞吐量</li></ul></li><li>短作业优先 (Shortest Job First)<ul><li>为了减少用户的平均等待时间</li></ul></li></ul><p><strong>缺点</strong></p><ul><li>无法处理紧急插队任务</li><li>等待太久的任务怎么插队</li><li>用时多的任务执行一半,又来了短作业</li></ul><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><ul><li>优先级队列 (PriorityQueue) <ul><li>使用数据结构：堆，每次遍历优先级最高的任务，解决紧急插队问题</li></ul></li><li>抢占 (Preemption)<ul><li>执行能力分时，结合优先级队列构成基本线程调度</li></ul></li></ul><h5 id="二次优化"><a href="#二次优化" class="headerlink" title="二次优化"></a>二次优化</h5><ul><li>多级队列<br>多个队列执行调度</li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><h5 id="基本条件"><a href="#基本条件" class="headerlink" title="基本条件"></a>基本条件</h5><ul><li>资源存在互斥逻辑：每次只有一个线程可以抢到资源</li><li>持有等待</li><li>禁止抢占：拿不到就会一直处于等待而不是释放已拥有的资源</li><li>循环等待</li></ul><h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><h4 id="空缺"><a href="#空缺" class="headerlink" title="空缺"></a>空缺</h4><ul><li>IPC （Intermediate Process Communication）</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统之基础知识</title>
      <link href="/posts/6a0c4ab9/"/>
      <url>/posts/6a0c4ab9/</url>
      
        <content type="html"><![CDATA[<p>操作系统原则：进程向内核发起一个请求，然后将CPU执行权限让出给内核。内核接手CPU执行权限，然后完成请求，再转让出CPU执行权限给调用进程</p><h4 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h4><ul><li>操作系统中应用连接设备的桥梁</li><li>权限非常高，可以管理进程、可以直接访问所有的内存</li><li>进程调用内核的过程中，是存在资源共享的</li></ul><h5 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h5><ul><li>管理进程、线程（决定哪个进程、线程使用CPU）</li><li>管理内存（决定内存做什么）</li><li>连接硬件设备（为进程、和设备间提供通信能力）</li><li>提供系统调用（接收进程发送来的系统调用）</li></ul><hr><pre class="mermaid">graph TD;Application --> KernelKernel --> CPUKernel -->MEORYKernel --> DEVICE</pre><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><h5 id="宏内核"><a href="#宏内核" class="headerlink" title="宏内核"></a>宏内核</h5><ul><li><p><strong>Monolithic Kernel</strong></p></li><li><p>有很多程序打包在内核中（文件系统、驱动、内存管理等）</p></li><li><p>Linux就是宏内核，且内核用最高权限来运行，内核模块可以动态加载</p></li></ul><h5 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h5><ul><li><p><strong>Microkenel</strong></p></li><li><p>只保留最基础能力（进程调度、虚拟内存、中断）</p></li><li><p>多数应用（甚包括驱动程序、文件系统）是在用户空间管理；驱动在内核外，驱动和硬件的交互就需要频繁做内核态切换</p></li></ul><h5 id="混合内核"><a href="#混合内核" class="headerlink" title="混合内核"></a>混合内核</h5><ul><li>Windows系统</li><li>Mac OS (使用 XNU内核)</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-中介模式</title>
      <link href="/posts/46cbf5bc/"/>
      <url>/posts/46cbf5bc/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>定义一单独的中介对象，封装一组对象之间的交互，将这种对象之间的交互委派给与中介对象交互，从而避免直接交互</li><li>降低类耦合,典型的迪米特法则</li></ul><hr><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="%E4%B8%AD%E4%BB%8Buml.jpg" alt="中介uml"></p><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChatRoom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg, String userId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoomImpl</span> <span class="keyword">implements</span> <span class="title">ChatRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; usersMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg, String userId)</span> </span>&#123;</span><br><span class="line">        User u = usersMap.get(userId);</span><br><span class="line">        u.receive(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usersMap.put(user.getId(), user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatRoom mediator;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(ChatRoom room, String id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = room;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg, String userId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatRoom <span class="title">getMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mediator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatUser</span><span class="params">(ChatRoom room, String id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(room, id, name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg, String userId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" :: Sending Message : "</span> + msg);</span><br><span class="line">        getMediator().sendMessage(msg, userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" :: Received Message : "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatRoom chatroom = <span class="keyword">new</span> ChatRoomImpl();</span><br><span class="line">        User user1 = <span class="keyword">new</span> ChatUser(chatroom,<span class="string">"1"</span>, <span class="string">"Spike"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> ChatUser(chatroom,<span class="string">"2"</span>, <span class="string">"Mia"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> ChatUser(chatroom,<span class="string">"3"</span>, <span class="string">"Max"</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> ChatUser(chatroom,<span class="string">"4"</span>, <span class="string">"Mick"</span>);</span><br><span class="line">        chatroom.addUser(user1);</span><br><span class="line">        chatroom.addUser(user2);</span><br><span class="line">        chatroom.addUser(user3);</span><br><span class="line">        chatroom.addUser(user4);</span><br><span class="line">        user1.send(<span class="string">"Hello man"</span>, <span class="string">"2"</span>);</span><br><span class="line">        user2.send(<span class="string">"Hey"</span>, <span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">//Spike :: Sending Message : Hello man</span></span><br><span class="line"><span class="comment">//Mia :: Received Message : Hello man</span></span><br><span class="line"><span class="comment">//Mia :: Sending Message : Hey</span></span><br><span class="line"><span class="comment">//Spike :: Received Message : Hey</span></span><br></pre></td></tr></table></figure><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象中介公司</span></span><br><span class="line"><span class="keyword">type</span> MeditorCompany <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetSeller() Colleaguer</span><br><span class="line">    SetSeller(seller ColleagueSeller)</span><br><span class="line">    GetBuyer() Colleaguer</span><br><span class="line">    SetBuyer(ColleagueBuyer)</span><br><span class="line">    GetName() <span class="keyword">string</span></span><br><span class="line">    SetName(name <span class="keyword">string</span>)</span><br><span class="line">    Publish(message <span class="keyword">string</span>,colleaguer Colleaguer)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体中介者</span></span><br><span class="line"><span class="keyword">type</span> Meditor <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    buyer *ColleagueBuyer</span><br><span class="line">    seller *ColleagueSeller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">SetSeller</span><span class="params">(seller ColleagueSeller)</span></span> &#123;</span><br><span class="line">    m.seller = &amp;seller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">SetBuyer</span><span class="params">(b ColleagueBuyer)</span></span> &#123;</span><br><span class="line">    m.buyer = &amp;b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">Publish</span><span class="params">(message <span class="keyword">string</span>, colleaguer Colleaguer)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 如果是卖家发布</span></span><br><span class="line">    <span class="keyword">if</span> reflect.DeepEqual(colleaguer,m.seller)&#123;</span><br><span class="line">        m.buyer.Accept(message)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> reflect.DeepEqual(colleaguer, m.buyer) &#123;</span><br><span class="line">        m.seller.Accept(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">GetSeller</span><span class="params">()</span> <span class="title">Colleaguer</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.seller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">GetBuyer</span><span class="params">()</span> <span class="title">Colleaguer</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.buyer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meditor)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    m.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象同事角色</span></span><br><span class="line"><span class="keyword">type</span> Colleaguer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Colleguer(meditor MeditorCompany)</span><br><span class="line">    Send(<span class="keyword">string</span>)</span><br><span class="line">    Accept(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卖家-同事角色</span></span><br><span class="line"><span class="keyword">type</span> ColleagueSeller <span class="keyword">struct</span> &#123;</span><br><span class="line">    meditor MeditorCompany</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ColleagueSeller)</span> <span class="title">Send</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    c.meditor.Publish(message,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ColleagueSeller)</span> <span class="title">Accept</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"卖家收到的消息是"</span>+message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ColleagueSeller)</span> <span class="title">Colleguer</span><span class="params">(meditor MeditorCompany)</span></span> &#123;</span><br><span class="line">    c.meditor = meditor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 买家-同事角色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ColleagueBuyer <span class="keyword">struct</span> &#123;</span><br><span class="line">    meditor MeditorCompany</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ColleagueBuyer)</span> <span class="title">Colleguer</span><span class="params">(meditor MeditorCompany)</span></span> &#123;</span><br><span class="line">    c.meditor = meditor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ColleagueBuyer)</span> <span class="title">Send</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    c.meditor.Publish(message,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ColleagueBuyer)</span> <span class="title">Accept</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"买家收到的消息是"</span>+message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">        meitdor MeditorCompany</span><br><span class="line">        seller *ColleagueSeller</span><br><span class="line">        buyer *ColleagueBuyer</span><br><span class="line">    )</span><br><span class="line">    seller = &amp;ColleagueSeller&#123;meditor:meitdor&#125;</span><br><span class="line">    buyer = &amp;ColleagueBuyer&#123;meditor:meitdor&#125;</span><br><span class="line">    meitdor = &amp;Meditor&#123;</span><br><span class="line">        name:   <span class="string">"58同城"</span>,</span><br><span class="line">        buyer:  buyer,</span><br><span class="line">        seller: seller,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 卖家和卖家注册到中介</span></span><br><span class="line">    seller.Colleguer(meitdor)</span><br><span class="line">    buyer.Colleguer(meitdor)</span><br><span class="line">    <span class="comment">// 发布需求</span></span><br><span class="line">    seller.Send(<span class="string">"卖一套两室一厅100平米的Lofty"</span>)</span><br><span class="line">    buyer.Send(<span class="string">"求购一个两室一厅的房子"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点:</p><ul><li>弱化对象间的依赖关系，即松耦合，降低同时类的耦合度，符合迪米特法则；</li><li>将对象间的调用关系进行封装，使得对象更容易复用。</li></ul><p>缺点:</p><ul><li>如果对象增多，就要去修改抽象中介者和具体的中介者角色；</li><li>中介者角色承担了太多了业务逻辑功能，流程复杂时就会显得比较臃肿，不好管理。</li></ul><hr><ul><li>中介者模式的场景中,参与者之间的关系错综复杂,既可以是消息的发送者也可以同时是消息的接收者</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-职责链模式</title>
      <link href="/posts/ed523091/"/>
      <url>/posts/ed523091/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>将请求的发送和接收解耦，让多个接收对象有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个对象能够处理为止</li></ul><hr><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="%E8%81%8C%E8%B4%A3%E9%93%BEUML.jpg" alt="职责链UML"></p><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler handler)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerA</span> <span class="keyword">implements</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HandlerA 执行 代码逻辑，处理："</span>+request.getData());</span><br><span class="line">        request.setData(request.getData().replace(<span class="string">"AB"</span>,<span class="string">""</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != next) &#123;</span><br><span class="line">            next.handle(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行中止！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerB</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HandlerB 执行 代码逻辑，处理："</span>+request.getData());</span><br><span class="line">        request.setData(request.getData().replace(<span class="string">"CD"</span>,<span class="string">""</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != next) &#123;</span><br><span class="line">            next.handle(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行中止！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerC</span> <span class="keyword">implements</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HandlerC 执行 代码逻辑，处理："</span>+request.getData());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != next) &#123;</span><br><span class="line">            next.handle(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行中止！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler h1 = <span class="keyword">new</span> HandlerA();</span><br><span class="line">        Handler h2 = <span class="keyword">new</span> HandlerB();</span><br><span class="line">        Handler h3 = <span class="keyword">new</span> HandlerC();</span><br><span class="line">        h1.setNext(h2);</span><br><span class="line">        h2.setNext(h3);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request();</span><br><span class="line">        request.setData(<span class="string">"请求数据ABCDE"</span>);</span><br><span class="line">        h1.handle(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">HandlerA 执行 代码逻辑，处理：请求数据ABCDE</span><br><span class="line">HandlerB 执行 代码逻辑，处理：请求数据CDE</span><br><span class="line">HandlerC 执行 代码逻辑，处理：请求数据E</span><br><span class="line">执行中止！</span><br></pre></td></tr></table></figure><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    DIFFICULTY_LEVEL_1 = <span class="number">1</span></span><br><span class="line">    DIFFICULTY_LEVEL_2 = <span class="number">2</span></span><br><span class="line">    DIFFICULTY_LEVEL_3 = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandleMessage <span class="function"><span class="keyword">func</span><span class="params">(request IRequest)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IRequest <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 请求级别</span></span><br><span class="line">    GetRequestLevel() <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// 获取要请求的内容</span></span><br><span class="line">    GetRequest() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 难度1--初级工程师</span></span><br><span class="line">    <span class="comment">// 难度2--中级工程师</span></span><br><span class="line">    <span class="comment">// 难度3--高级工程师</span></span><br><span class="line">    level <span class="keyword">int</span></span><br><span class="line">    request <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRequset</span><span class="params">(level <span class="keyword">int</span>, request <span class="keyword">string</span>)</span> *<span class="title">Request</span></span> &#123;</span><br><span class="line">    r := &amp;Request&#123;</span><br><span class="line">        level:   level,</span><br><span class="line">        request: request,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> r.level &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        r.request = <span class="string">"难度级别1的请求是："</span>+ request</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        r.request = <span class="string">"难度级别2的请求是："</span>+ request</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        r.request = <span class="string">"难度级别3的请求是："</span>+ request</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Request)</span> <span class="title">GetRequestLevel</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Request)</span> <span class="title">GetRequest</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    HandleMessage(request IRequest)</span><br><span class="line">    SetNextHandler(handler Handler)</span><br><span class="line">    Response(request IRequest)</span><br><span class="line">    GetLevel()<span class="keyword">int</span></span><br><span class="line">    GetNext() Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初级工程师</span></span><br><span class="line"><span class="keyword">type</span> Primary <span class="keyword">struct</span> &#123;</span><br><span class="line">    level <span class="keyword">int</span></span><br><span class="line">    request <span class="keyword">string</span></span><br><span class="line">    next Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Primary)</span> <span class="title">GetNext</span><span class="params">()</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Primary)</span> <span class="title">GetLevel</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Primary)</span> <span class="title">HandleMessage</span><span class="params">(request IRequest)</span></span> &#123;</span><br><span class="line">    message := <span class="function"><span class="keyword">func</span><span class="params">(request IRequest)</span></span>  &#123;</span><br><span class="line">        <span class="comment">// 如果请求级别小于可以处理的级别就直接处理</span></span><br><span class="line">        <span class="keyword">if</span> request.GetRequestLevel() &lt;= p.GetLevel() &#123;</span><br><span class="line">            p.Response(request)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> p.GetNext() != <span class="literal">nil</span> &#123;</span><br><span class="line">                p.next.HandleMessage(request)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">"---难度级别为"</span>,request.GetRequestLevel(),<span class="string">"的请求无法处理"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    message(request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Primary)</span> <span class="title">SetNextHandler</span><span class="params">(handler Handler)</span></span> &#123;</span><br><span class="line">    p.next = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Primary)</span> <span class="title">Response</span><span class="params">(request IRequest)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"---难度级别1的请求---"</span>)</span><br><span class="line">    fmt.Printf(request.GetRequest())</span><br><span class="line">    fmt.Println(<span class="string">"初级工程师已经处理完毕"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitPrimary</span><span class="params">()</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Primary&#123;</span><br><span class="line">        level:   DIFFICULTY_LEVEL_1,</span><br><span class="line">        request: <span class="string">""</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Middle <span class="keyword">struct</span> &#123;</span><br><span class="line">    level <span class="keyword">int</span></span><br><span class="line">    request <span class="keyword">string</span></span><br><span class="line">    next Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Middle)</span> <span class="title">HandleMessage</span><span class="params">(request IRequest)</span></span> &#123;</span><br><span class="line">    message := <span class="function"><span class="keyword">func</span><span class="params">(request IRequest)</span></span>  &#123;</span><br><span class="line">        <span class="comment">// 如果请求级别小于可以处理的级别就直接处理</span></span><br><span class="line">        <span class="keyword">if</span> request.GetRequestLevel() &lt;= p.GetLevel() &#123;</span><br><span class="line">            p.Response(request)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> p.GetNext() != <span class="literal">nil</span> &#123;</span><br><span class="line">                p.next.HandleMessage(request)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">"---难度级别为"</span>,request.GetRequestLevel(),<span class="string">"的请求无法处理"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    message(request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Middle)</span> <span class="title">SetNextHandler</span><span class="params">(handler Handler)</span></span> &#123;</span><br><span class="line">    p.next = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Middle)</span> <span class="title">Response</span><span class="params">(request IRequest)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"---难度级别2的请求---"</span>)</span><br><span class="line">    fmt.Printf(request.GetRequest())</span><br><span class="line">    fmt.Println(<span class="string">"中级工程师已经处理完毕"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Middle)</span> <span class="title">GetLevel</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Middle)</span> <span class="title">GetNext</span><span class="params">()</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Senior <span class="keyword">struct</span> &#123;</span><br><span class="line">    level <span class="keyword">int</span></span><br><span class="line">    request <span class="keyword">string</span></span><br><span class="line">    next Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Senior)</span> <span class="title">HandleMessage</span><span class="params">(request IRequest)</span></span> &#123;</span><br><span class="line">    message := <span class="function"><span class="keyword">func</span><span class="params">(request IRequest)</span></span>  &#123;</span><br><span class="line">        <span class="comment">// 如果请求级别小于可以处理的级别就直接处理</span></span><br><span class="line">        <span class="keyword">if</span> request.GetRequestLevel() &lt;= p.GetLevel() &#123;</span><br><span class="line">            p.Response(request)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> p.GetNext() != <span class="literal">nil</span> &#123;</span><br><span class="line">                p.next.HandleMessage(request)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">"---难度级别为"</span>,request.GetRequestLevel(),<span class="string">"的请求无法处理"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    message(request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Senior)</span> <span class="title">SetNextHandler</span><span class="params">(handler Handler)</span></span> &#123;</span><br><span class="line">    p.next = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Senior)</span> <span class="title">Response</span><span class="params">(request IRequest)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"---难度级别3的请求---"</span>)</span><br><span class="line">    fmt.Printf(request.GetRequest())</span><br><span class="line">    fmt.Println(<span class="string">"高级工程师已经处理完毕"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Senior)</span> <span class="title">GetLevel</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Senior)</span> <span class="title">GetNext</span><span class="params">()</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        pri Handler</span><br><span class="line">        mid Handler</span><br><span class="line">        sen Handler</span><br><span class="line">        list []IRequest</span><br><span class="line">    )</span><br><span class="line">    list = <span class="built_in">make</span>([]IRequest,<span class="number">0</span>)</span><br><span class="line">    list = <span class="built_in">append</span>(list,&amp;Request&#123;</span><br><span class="line">        level:   DIFFICULTY_LEVEL_1,</span><br><span class="line">        request: <span class="string">"1+1=?"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    list = <span class="built_in">append</span>(list,&amp;Request&#123;</span><br><span class="line">        level:   DIFFICULTY_LEVEL_2,</span><br><span class="line">        request: <span class="string">"4*3"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    list = <span class="built_in">append</span>(list,&amp;Request&#123;</span><br><span class="line">        level:   DIFFICULTY_LEVEL_3,</span><br><span class="line">        request: <span class="string">"99*99"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    list = <span class="built_in">append</span>(list,&amp;Request&#123;</span><br><span class="line">        level:   <span class="number">4</span>,</span><br><span class="line">        request: <span class="string">"aaaaaaaaaaa"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    pri = InitPrimary()</span><br><span class="line">    mid = &amp;Middle&#123;</span><br><span class="line">        level:   DIFFICULTY_LEVEL_2,</span><br><span class="line">        request: <span class="string">""</span>,</span><br><span class="line">        next:    <span class="literal">nil</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    sen = &amp;Senior&#123;</span><br><span class="line">        level:   DIFFICULTY_LEVEL_3,</span><br><span class="line">        request: <span class="string">""</span>,</span><br><span class="line">        next:    <span class="literal">nil</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置链的顺序</span></span><br><span class="line">    pri.SetNextHandler(mid)</span><br><span class="line">    mid.SetNextHandler(sen)</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="comment">// 责任链中处理该请求</span></span><br><span class="line">        pri.HandleMessage(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>常用于开发框架的过滤器和拦截器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-模板模式</title>
      <link href="/posts/53f98d70/"/>
      <url>/posts/53f98d70/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在方法中定义一个算法框架，并将某些步骤推迟到子类中实现</li><li>可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p>复用<br>所有的子类可以复用父类中提供的模板方法的代码</p></li><li><p>拓展</p><p>框架通过模板模式提高功能拓展点，让用户在不修改框架源码的情况下，基于拓展定制化框架的功能</p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>将不变的流程抽象到父类定义的模板方法中 （模板方法中调用了抽象流程的函数）</li><li>子类继承后，可通过调用该模板方法间接执行子类自身实现的抽象流程 \</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上班抽象模板接口</span></span><br><span class="line"><span class="keyword">type</span> AbstractkWork <span class="keyword">interface</span>&#123;</span><br><span class="line"><span class="comment">// 由于go是面向组合的一种思维，从语言层不支持聚合，所以聚合需要自己把接口变量传入来实现</span></span><br><span class="line">    GotoWork(work AbstractWork)</span><br><span class="line">    Getup()</span><br><span class="line">    Commute()</span><br><span class="line">    Arrive()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上班抽象类</span></span><br><span class="line"><span class="keyword">type</span> AbsClass <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a AbsClass)</span> <span class="title">GotoWork</span><span class="params">(work AbstractWork)</span></span> &#123;</span><br><span class="line">    a.Getup()</span><br><span class="line">    work.Commute()</span><br><span class="line">    a.Arrive()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a AbsClass)</span> <span class="title">Getup</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"1. 起床"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a AbsClass)</span> <span class="title">Commute</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a AbsClass)</span> <span class="title">Arrive</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"3. 到达"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> DriveToWork <span class="keyword">struct</span> &#123;</span><br><span class="line">    AbsClass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DriveToWork)</span> <span class="title">Commute</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"2. 开车去公司"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DriveToWork)</span> <span class="title">GotoWork</span><span class="params">(work AbstractWork)</span></span>&#123;</span><br><span class="line">    d.AbsClass.GotoWork(d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BusToWork <span class="keyword">struct</span> &#123;</span><br><span class="line">    AbsClass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *BusToWork)</span> <span class="title">Commute</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"2. 坐公交去公司"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *BusToWork)</span> <span class="title">GotoWork</span><span class="params">(work AbstractWork)</span></span> &#123;</span><br><span class="line">    d.AbsClass.GotoWork(d)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        work AbstractWork</span><br><span class="line">    )</span><br><span class="line">    work = &amp;BusToWork&#123;AbsClass&#123;&#125;&#125;</span><br><span class="line">    work.GotoWork(work)</span><br><span class="line">    work = &amp;DriveToWork&#123;AbsClass&#123;&#125;&#125;</span><br><span class="line">    work.GotoWork(work)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><h5 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h5><ul><li>函数返回之前执行回调函数</li><li>从场景上看像模板模式</li></ul><h5 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h5><ul><li>函数返回之后执行回调函数</li><li>从场景上看很像观察者模式</li></ul><hr><h3 id="模板模式-VS-回调"><a href="#模板模式-VS-回调" class="headerlink" title="模板模式 VS 回调"></a>模板模式 VS 回调</h3><ul><li>回调基于组合关系实现，将一个对象传递给另一个对象，是一种对象间的关系</li><li>模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类与类之间的关系</li><li>代码实现上，回调会比模板模式更加灵活</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-解释器模式</title>
      <link href="/posts/a665927f/"/>
      <url>/posts/a665927f/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>为某个语言定义它的语法表示，并定义一个解释器来处理这个语法</li></ul><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><ul><li>将语法规则拆分成一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">    text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象解释器</span></span><br><span class="line"><span class="keyword">type</span> AbstractExpress <span class="keyword">interface</span>&#123;</span><br><span class="line">Interpreter(*Context) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 终结符，即我们的参数构造类</span></span><br><span class="line"><span class="keyword">type</span> TerminalExpression <span class="keyword">struct</span> &#123;</span><br><span class="line">    arg <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TerminalExpression)</span> <span class="title">Interpreter</span><span class="params">(ctx *Context)</span> <span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符，即我们的运算符构造类</span></span><br><span class="line"><span class="keyword">type</span> NonTerminalExpression <span class="keyword">struct</span> &#123;</span><br><span class="line">    left AbstractExpress</span><br><span class="line">    right AbstractExpress</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n NonTerminalExpression)</span> <span class="title">Interpreter</span><span class="params">(ctx *Context)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实现具体的a+b的解释执行操作</span></span><br><span class="line">    <span class="keyword">if</span> !bytes.Equal([]<span class="keyword">byte</span>(ctx.text),[]<span class="keyword">byte</span>(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> n.left.Interpreter(ctx) + n.right.Interpreter(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        left AbstractExpress</span><br><span class="line">        right AbstractExpress</span><br><span class="line">        callExpression AbstractExpress</span><br><span class="line">    )</span><br><span class="line">    left = &amp;TerminalExpression&#123;arg:<span class="number">12</span>&#125;</span><br><span class="line">    right = &amp;TerminalExpression&#123;arg:<span class="number">34</span>&#125;</span><br><span class="line">    callExpression = &amp;NonTerminalExpression&#123;left:left,right:right&#125;</span><br><span class="line"></span><br><span class="line">    context := &amp;Context&#123;text:<span class="string">"+"</span>&#125;</span><br><span class="line"></span><br><span class="line">    result := callExpression.Interpreter(context)</span><br><span class="line">    fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点:</p><ul><li>拓展性强：修改文法规则只需要修改相应的非终结符表达式就可以了，即增加非终结符类就可以了。</li></ul><p>缺点:</p><ul><li>采用递归调用方法，不利于调试，增加了系统的复杂性以及降低了系统执行的效率；</li><li>解释器模式比较容易造成类设计的膨胀，主要是非终结符表达式类会随着系统的复杂性而膨胀；</li><li>可利用的场景比较少；</li><li>对于比较复杂的文法不好解析。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-访问者模式</title>
      <link href="/posts/f21f8074/"/>
      <url>/posts/f21f8074/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>允许一个或者多个操作应用到一组对象上，解耦操作和对象本身</li></ul><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="%E8%AE%BF%E9%97%AE%E8%80%85.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Extractor extractor = <span class="keyword">new</span> Extractor();</span><br><span class="line">        <span class="keyword">for</span> (ResourceFile i : listAllResourceFiles()) &#123;</span><br><span class="line">            i.accept(extractor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Compressor compressor = <span class="keyword">new</span> Compressor();</span><br><span class="line">        <span class="keyword">for</span> (ResourceFile i : listAllResourceFiles()) &#123;</span><br><span class="line">            i.accept(compressor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;ResourceFile&gt; <span class="title">listAllResourceFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ResourceFile&gt; resourceFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> PdfFile(<span class="string">"a.pdf"</span>));</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> WordFile(<span class="string">"b.word"</span>));</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> PPTFile(<span class="string">"c.ppt"</span>));</span><br><span class="line">        <span class="keyword">return</span> resourceFiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ul><li><p>所谓的双分派和单分派的区分，指的是：执行哪对象的哪个方法，和几个因素的运行时类型有关</p><p>具体到编程语言的语法机制，双分派（<code>Double Dispatch</code>）和单分派（<code>Single Dispatch</code>）跟多态和函数重载直接相关</p></li></ul><h4 id="双分派"><a href="#双分派" class="headerlink" title="双分派"></a>双分派</h4><ul><li>执行哪个对象的哪个方法，跟<code>对象</code>和<code>方法参数</code>两者的运行时类型有关</li></ul><h4 id="单分派"><a href="#单分派" class="headerlink" title="单分派"></a>单分派</h4><ul><li><p>执行哪个对象的哪个方法，只跟<code>对象</code>的运行时类型有关</p></li><li><p>当前主流的面向对象编程语言（Java、C++、C#）都只支持Single Dispatch</p><ul><li>Java支持多态，代码可以在运行时候获取对象实际类型（即：运行时类型），然后跟根据实际类型调用哪个方法</li><li>尽管Java支持函数重载，但是Java函数重载的语法规则是：并不是在运行时候，根据传递函数的参数的声明类型（运行时类型），来决定调用哪个重载函数，而是编译时候，根据传递进函数的参数的声明类型（即：编译类型），来决定调用哪个重载函数</li><li>总的来说，具体来说，执行那个对象的哪个方法，只跟对象的运行时类型有关，跟参数的运行时类型无关</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-迭代器模式</title>
      <link href="/posts/6ff4cba/"/>
      <url>/posts/6ff4cba/</url>
      
        <content type="html"><![CDATA[<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><ul><li><p>完整的迭代器模式，一般会涉及容器和容器迭代器两部分内容</p></li><li><p>为了达到基于接口编程的目的，所以容器又包含容器接口、容器实现类迭代器又包含迭代器接口、迭代器实现类!</p><p><img src="%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt=""></p></li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象迭代器</span></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">interface</span>&#123;</span><br><span class="line">Next() <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">HasNext() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体迭代器</span></span><br><span class="line"><span class="keyword">type</span> ConcreteIterator <span class="keyword">struct</span>&#123;</span><br><span class="line">index <span class="keyword">int</span></span><br><span class="line">size <span class="keyword">int</span> </span><br><span class="line">con Aggregate</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c *ConcreteIterator)</span><span class="title">HasNext</span><span class="params">()</span> <span class="title">bool</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.index &lt; c.size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(c *ConcreteIterator)</span><span class="title">Next</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line"><span class="keyword">if</span> c.HasNext()&#123;</span><br><span class="line">res := c.con.GetElement(c.index)</span><br><span class="line">c.index++</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象聚集</span></span><br><span class="line"><span class="keyword">type</span> Aggregate <span class="keyword">interface</span>&#123;</span><br><span class="line">Add(obj <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">CreateIterator() Iterator</span><br><span class="line">GetElement(index <span class="keyword">int</span>) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Size() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体聚集</span></span><br><span class="line"><span class="keyword">type</span> ConcreteAggregate <span class="keyword">struct</span>&#123;</span><br><span class="line">docker []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ConcreteAggregate)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(c.docker)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ConcreteAggregate)</span> <span class="title">Add</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">c.docker = <span class="built_in">append</span>(c.docker,obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ConcreteAggregate)</span> <span class="title">CreateIterator</span><span class="params">()</span> <span class="title">Iterator</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;ConcreteIterator&#123;</span><br><span class="line">        index: <span class="number">0</span>,</span><br><span class="line">        size:  c.Size(),</span><br><span class="line">        con:   c,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ConcreteAggregate)</span><span class="title">GetElement</span><span class="params">(index <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line"><span class="keyword">return</span> c.docker[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 定义聚族对象</span></span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        aggregate Aggregate</span><br><span class="line">        iter Iterator</span><br><span class="line">    )</span><br><span class="line">    aggregate = &amp;ConcreteAggregate&#123;docker: []<span class="keyword">interface</span>&#123;&#125;&#123;&#125;&#125;</span><br><span class="line">    aggregate.Add(<span class="string">"java"</span>)</span><br><span class="line">    aggregate.Add(<span class="string">"Golang"</span>)</span><br><span class="line">    aggregate.Add(<span class="string">"Python"</span>)</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    iter = aggregate.CreateIterator()</span><br><span class="line">    <span class="keyword">for</span> iter.HasNext() &#123;</span><br><span class="line">        fmt.Println(iter.Next())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li><code>foreach()</code>的底层也是基于迭代器实现的</li></ul><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><ul><li>常规简单的数据结构，直接使用<code>for</code>循环来遍历是足够的</li><li>但是相对于<code>树、图</code>等复杂的数据结构，有着复杂的遍历方式。对于复杂性的结构，最好使用拆分形式，将遍历操作拆分到迭代器中，分别实现对应需求的遍历方式</li></ul><hr><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>封装集合内部的复杂数据结构，开发者不需要了解如何遍历，直接使用容提供的迭代器即可</li><li>将集合对象的遍历操作从集合类中拆分出来，放在迭代器中，让两者的职责更加单一</li><li>让添加新的遍历算法更容易，符合开闭原则</li><li>迭代器都实现自同样的接口，基于接口编程，替换更方便</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-策略模式</title>
      <link href="/posts/58639/"/>
      <url>/posts/58639/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>定义一组算法类，将每个类分别封装起来，让它们可以互相替换，使算法的变化独立于被调用者</li><li>简单而言就是定义一组通用算法的上层接口，各个算法实现类实现该算法接口</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="策略定义"><a href="#策略定义" class="headerlink" title="策略定义"></a>策略定义</h4><ul><li>定义一个策略接口以及一组实现这个接口的策略类</li><li>客户端基于接口灵活替换不同策略</li></ul><h4 id="策略创建"><a href="#策略创建" class="headerlink" title="策略创建"></a>策略创建</h4><ul><li>使用工厂模式屏蔽创建细节，并根据类型判断使用对应策略</li><li>根据策略类是否有状态决定是否事先创建好缓存在工厂类中还是使用的时候进行实例化</li></ul><h4 id="策略使用"><a href="#策略使用" class="headerlink" title="策略使用"></a>策略使用</h4><ul><li>编译时候静态确定</li><li>运行时候动态决定 （典型运用场景）</li></ul><h4 id="实现行为"><a href="#实现行为" class="headerlink" title="实现行为"></a>实现行为</h4><ul><li>独立出来，并且可以被其他对象复用</li></ul><h5 id="UML"><a href="#UML" class="headerlink" title="UML"></a><strong>UML</strong></h5><p><img src="%E5%AE%9E%E7%8E%B0%E8%A1%8C%E4%B8%BA.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I can't fly"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="整合行为"><a href="#整合行为" class="headerlink" title="整合行为"></a>整合行为</h4><ul><li>将一些行为动作委托别人处理，而不是直接使用Duck的内部fly和quack方法</li><li>在显现类的构造方法中，继承而来的变量又会被初始化为对应的新实例</li></ul><h5 id="UML-1"><a href="#UML-1" class="headerlink" title="UML"></a><strong>UML</strong></h5><p><img src="%E6%95%B4%E5%90%88.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这两个变量也会被继承</span></span><br><span class="line">QuackBehavior quackBehavior;</span><br><span class="line">FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">quackBehavior.quack();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">flyBehavior.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"All ducks float , even decoys! "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">flyBehavior = <span class="keyword">new</span> FlyWithWing();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I'm a real Mallard duck"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h4><ul><li>调用继承来的对应QuackBehavior引用对象的quack()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Duck mallar = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">mallar.performQuack();</span><br><span class="line">mallar.performFly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="%E6%AD%A3%E5%B8%B8%E7%BB%93%E6%9E%9C.jpg" alt=""></p><h4 id="升级，动设定行为"><a href="#升级，动设定行为" class="headerlink" title="升级，动设定行为"></a>升级，动设定行为</h4><p><strong>UML</strong></p><p><img src="%E5%8D%87%E7%BA%A7.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这两个变量也会被继承</span></span><br><span class="line">QuackBehavior quackBehavior;</span><br><span class="line">FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">quackBehavior.quack();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">flyBehavior.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"All ducks float , even decoys! "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态设定行为</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior fb)</span> </span>&#123;</span><br><span class="line">flyBehavior = fb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior qb)</span> </span>&#123;</span><br><span class="line">quackBehavior = qb;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新建实现类"><a href="#新建实现类" class="headerlink" title="新建实现类"></a>新建实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModeDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ModeDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 起初模型是不会飞</span></span><br><span class="line">flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I'm a model duck"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新建行为类型"><a href="#新建行为类型" class="headerlink" title="新建行为类型"></a>新建行为类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I'm fly with a rocket!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运用-1"><a href="#运用-1" class="headerlink" title="运用"></a>运用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Duck mallar = <span class="keyword">new</span> ModeDuck();</span><br><span class="line">mallar.performQuack();</span><br><span class="line">mallar.performFly();</span><br><span class="line"></span><br><span class="line">Duck model = <span class="keyword">new</span> ModeDuck();</span><br><span class="line">model.setFlyBehavior(<span class="keyword">new</span> FlyRocketPowered());</span><br><span class="line">model.performQuack();</span><br><span class="line">model.performFly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="%E5%8D%87%E7%BA%A7%E5%90%8E%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt=""></p><h4 id="总体UML"><a href="#总体UML" class="headerlink" title="总体UML"></a>总体UML</h4><p><img src="%E6%80%BB%E4%BD%93UML.jpg" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>找出变化之处，独立于不需要变化的代码</li><li>针对接口编程，而不是针对实现编程</li><li>多用组合，少用继承</li></ul><h4 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://github.com/wuhansan/design-mode">传送门</a></h4>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-备忘模式</title>
      <link href="/posts/e4fae02c/"/>
      <url>/posts/e4fae02c/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对对象之外保存这个状态，以便恢复对象为之前的状态</li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">// 备忘录</span></span><br><span class="line"><span class="keyword">type</span> Memento <span class="keyword">struct</span> &#123;</span><br><span class="line">    state <span class="keyword">string</span> <span class="comment">// 这里就是保存的状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memento)</span> <span class="title">SetState</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    m.state = s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Memento)</span> <span class="title">GetState</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.state</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发起人</span></span><br><span class="line"><span class="keyword">type</span> Originator <span class="keyword">struct</span> &#123;</span><br><span class="line">    state <span class="keyword">string</span> <span class="comment">// 这里就简单一点，要保存的状态就是一个字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Originator)</span> <span class="title">SetState</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    o.state = s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Originator)</span> <span class="title">GetState</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> o.state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就是规定了要保存的状态范围</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Originator)</span> <span class="title">CreateMemento</span><span class="params">()</span> *<span class="title">Memento</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Memento&#123;state: o.state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负责人</span></span><br><span class="line"><span class="keyword">type</span> Caretaker <span class="keyword">struct</span> &#123;</span><br><span class="line">    memento *Memento</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Caretaker)</span> <span class="title">GetMemento</span><span class="params">()</span> *<span class="title">Memento</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.memento</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Caretaker)</span> <span class="title">SetMemento</span><span class="params">(m *Memento)</span></span> &#123;</span><br><span class="line">    c.memento = m</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个发起人并设置初始状态</span></span><br><span class="line">    <span class="comment">// 此时与备忘录模式无关，只是模拟正常程序运行</span></span><br><span class="line">    o := &amp;Originator&#123;state: <span class="string">"hello"</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">"当前状态:"</span>,o.GetState())</span><br><span class="line">    <span class="comment">// 现在需要保存当前状态</span></span><br><span class="line">    <span class="comment">// 就创建一个负责人来设置（一般来说，对于一个对象的同一个备忘范围，应当只有一个负责人，这样方便做多状态多备忘管理）</span></span><br><span class="line">    c := <span class="built_in">new</span>(Caretaker)</span><br><span class="line">    c.SetMemento(o.CreateMemento())</span><br><span class="line"></span><br><span class="line">    o.SetState(<span class="string">"world"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"更改当前状态:"</span>,o.GetState())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复备忘</span></span><br><span class="line">    o.SetState(c.GetMemento().GetState())</span><br><span class="line">    fmt.Println(<span class="string">"恢复后状态"</span>,o.GetState())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>针对大的备份而言，会占用大量的内存以及时间消耗。针对不同的场景，不同的业务场景需要不同的处理方式</li><li>只备份必要的恢复信息，结合最新的数据来恢复。再比如，全量备份和增量备份相结合，低频全量备份，高频全量备份，两者相结合</li></ul><hr><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>减少代码体积，利于拓展：状态模式可以消除繁杂的条件判断语句块，使得业务逻辑清晰，很好地应对对象状态的增加、删除的业务场景，因为添加新的状态只需要增加新的状态类就好了；</li><li>状态模式状态很多时会导致状态类比较多，子类太多的时候就不方便维护管理了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构型-组合模式</title>
      <link href="/posts/c39917f/"/>
      <url>/posts/c39917f/</url>
      
        <content type="html"><![CDATA[<ul><li>将一组对象组织成树形结构，以表示一种”部分-整体”的层次结构</li><li>让编写者可以统一单个对象和组合对象的处理逻辑</li></ul><hr><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>数据必须能表示成树形结构</li></ul><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MenuComponent <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 采购设备或者添加子部门</span></span><br><span class="line">    Add(menuComponent MenuComponent)</span><br><span class="line">    Remove(menuComponent MenuComponent)</span><br><span class="line">    <span class="comment">// 查询该节点下所有设备和部门</span></span><br><span class="line">    GetName() <span class="keyword">string</span></span><br><span class="line">    GetPrice() <span class="keyword">float64</span></span><br><span class="line">    GetDescription() <span class="keyword">string</span></span><br><span class="line">    IsVegetarian() <span class="keyword">bool</span></span><br><span class="line">    CreateIterator()</span><br><span class="line">    Display(depth <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Leaf <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    vegetarian <span class="keyword">bool</span></span><br><span class="line">    description <span class="keyword">string</span></span><br><span class="line">    price <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">Add</span><span class="params">(menuComponent MenuComponent)</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"Leaf Node can not add"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">Remove</span><span class="params">(menuComponent MenuComponent)</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"Leaf Node can not remove"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l.price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">IsVegetarian</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l.vegetarian</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l.description</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">CreateIterator</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"implement me"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">Display</span><span class="params">(depth <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 输出树形结构的叶子结点，这里直接输出设备名</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;depth; i++ &#123;</span><br><span class="line">        fmt.Print(<span class="string">"*"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(l.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Leaf)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    l.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合构件</span></span><br><span class="line"><span class="keyword">type</span> Composite <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    description <span class="keyword">string</span></span><br><span class="line">    arr []MenuComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"It is not an item."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.description</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">IsVegetarian</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"implement me"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">CreateIterator</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"implement me"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">Add</span><span class="params">(MenuComponent MenuComponent)</span></span> &#123;</span><br><span class="line">    c.arr = <span class="built_in">append</span>(c.arr,MenuComponent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">Remove</span><span class="params">(MenuComponent MenuComponent)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> c.arr &#123;</span><br><span class="line">        <span class="keyword">if</span> v == MenuComponent &#123;</span><br><span class="line">            <span class="comment">// 删除第i个元素,因为interface类型在golang中</span></span><br><span class="line">            <span class="comment">// 以地址的方式传递，所以可以直接比较进行删除</span></span><br><span class="line">            <span class="comment">// golang中只要记得byte,int,bool,string，数组，结构体，默认传值，其他的默认传地址即可</span></span><br><span class="line">            c.arr = <span class="built_in">append</span>(c.arr[:i],c.arr[i+<span class="number">1</span>:]...)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Composite)</span> <span class="title">Display</span><span class="params">(depth <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 输出树形结构</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;depth; i++ &#123;</span><br><span class="line">        fmt.Print(<span class="string">"*"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(c.GetName())</span><br><span class="line">    <span class="comment">// 递归显示</span></span><br><span class="line">    <span class="keyword">for</span> _,com := <span class="keyword">range</span> c.arr &#123;</span><br><span class="line">        com.Display(depth+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    root := Composite&#123;</span><br><span class="line">        name: <span class="string">"和平饭店"</span>,</span><br><span class="line">        arr:  <span class="built_in">make</span>([]MenuComponent, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    branchLevel21 := Composite&#123;</span><br><span class="line">        name: <span class="string">"招牌菜"</span>,</span><br><span class="line">        arr:  <span class="built_in">make</span>([]MenuComponent, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    branchLevel21.Add(&amp;Leaf&#123;<span class="string">"红烧肉"</span>,<span class="literal">false</span>,<span class="string">"精五花"</span>,<span class="number">20.0</span>&#125;)</span><br><span class="line">    branchLevel21.Add(&amp;Leaf&#123;<span class="string">"醋溜土豆丝"</span>,<span class="literal">true</span>,<span class="string">"新鲜"</span>,<span class="number">10.0</span>&#125;)</span><br><span class="line">    branchLevel21.Add(&amp;Leaf&#123;<span class="string">"京酱肉丝"</span>,<span class="literal">false</span>,<span class="string">"鲜肉"</span>,<span class="number">30.0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    root.Add(&amp;branchLevel21)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并列的二级节点</span></span><br><span class="line">    branchLevel22 := Composite&#123;</span><br><span class="line">        name: <span class="string">"家常菜"</span>,</span><br><span class="line">        arr:  <span class="built_in">make</span>([]MenuComponent, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    branchLevel22.Add(&amp;Leaf&#123;<span class="string">"辣椒炒肉"</span>,<span class="literal">false</span>,<span class="string">"1"</span>,<span class="number">14.2</span>&#125;)</span><br><span class="line">    branchLevel22.Add(&amp;Leaf&#123;<span class="string">"杂拌"</span>,<span class="literal">false</span>,<span class="string">"1234"</span>,<span class="number">15</span>&#125;)</span><br><span class="line">    branchLevel22.Add(&amp;Leaf&#123;<span class="string">"回锅肉"</span>,<span class="literal">false</span>,<span class="string">"2134"</span>,<span class="number">30</span>&#125;)</span><br><span class="line"></span><br><span class="line">    branchLevel221 := Composite&#123;</span><br><span class="line">        name: <span class="string">"麻辣烫"</span>,</span><br><span class="line">        arr:  <span class="built_in">make</span>([]MenuComponent, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    branchLevel221.Add(&amp;Leaf&#123;<span class="string">"豆蔻"</span>,<span class="literal">true</span>,<span class="string">"1"</span>,<span class="number">0.5</span>&#125;)</span><br><span class="line">    branchLevel221.Add(&amp;Leaf&#123;<span class="string">"腐竹"</span>,<span class="literal">true</span>,<span class="string">"1"</span>,<span class="number">0.5</span>&#125;)</span><br><span class="line">    branchLevel22.Add(&amp;branchLevel221)</span><br><span class="line"></span><br><span class="line">    root.Add(&amp;branchLevel22)</span><br><span class="line"></span><br><span class="line">    root.Display(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    root.Remove(&amp;branchLevel22)</span><br><span class="line">    root.Display(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>将一组对象组织成树形结构，将单个对象和组合对象都看作是树中的节点，以统一的处理逻辑，利用树形结构的特点，递遍历子树，依次简化代码实现</li><li>一致性处理单个对象或者容器对象，简化操作</li><li>结点添加自由</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>抽象性要求较高：子结点和叶子结点具有一定的一致性才能抽象成一个组合角色</p></li><li><p>不是一种常用模式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构型-享元模式</title>
      <link href="/posts/3223afa7/"/>
      <url>/posts/3223afa7/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>复用对象，节省内存（前提是享元对象是不可改变的对象）</p></li><li><p>将系统中的大量重复的<strong>不可变对象</strong>，使用享元模式，使其在内存中只保留一份实例，共多处代码使用。从而达到减少因过多实例化导致不必要的内存开销（即：使用共享对象有效的支持大量的细粒度的对象）</p></li></ul><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>抽取出原始类中的公有基础属性，封装成一个不可变的享元对象</li><li>使用不可变享元对象替换掉原始类的公有基础属性</li><li>使用工厂模式对已经创建过的享元对象使用进行缓存处理，从而达到复用的目的</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Flyweight <span class="keyword">interface</span>&#123;</span><br><span class="line">operate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ExamInfo <span class="keyword">struct</span>&#123;</span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">subject <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ExamInfo)</span> <span class="title">operate</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(e.user,<span class="string">"开始考试，考试科目为"</span>,e.subject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ExamInfo)</span> <span class="title">User</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ExamInfo)</span> <span class="title">SetUser</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    e.user = user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ExamInfo)</span> <span class="title">Subject</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.subject</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ExamInfo)</span> <span class="title">SetSubject</span><span class="params">(subject <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    e.subject = subject</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ExamInfo)</span> <span class="title">String</span> <span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ExamInfo&#123;"</span> +</span><br><span class="line">        <span class="string">"user = "</span> + e.user + <span class="string">"\n"</span> +</span><br><span class="line">        <span class="string">"subject = "</span> + e.subject + <span class="string">"\n"</span> + <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ExamInfoFactory <span class="keyword">struct</span>&#123;</span><br><span class="line">pool <span class="keyword">map</span>[<span class="keyword">string</span>]*ExamInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(factory *ExamInfoFactory)</span><span class="title">GetExamInfo</span><span class="params">(subject <span class="keyword">string</span>)</span><span class="params">(Ex *ExamInfo)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> v,ok := factory.pool[subject];ok&#123;</span><br><span class="line">Ex = v</span><br><span class="line">fmt.Println(<span class="string">"直接从池中取出"</span>,subject)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"建立对象，并放入池中"</span>,subject)</span><br><span class="line">Ex = &amp;ExamInfo&#123;subject:subject&#125;</span><br><span class="line">factory.pool[subject] = Ex</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    exF := &amp;ExamInfoFactory&#123;</span><br><span class="line">        <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ExamInfo),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        sub := <span class="string">"科目"</span> + strconv.Itoa(i)</span><br><span class="line">        exF.GetExamInfo(sub)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line">            <span class="comment">// 注意在此嵌套循环中，我们的Examinfo是由工厂返回出来的</span></span><br><span class="line">            <span class="comment">// 很显然我们只创建了两次这个对象，而不是像嵌套理所应当的六次</span></span><br><span class="line">            Examinfo := exF.GetExamInfo(<span class="string">"科目"</span>+strconv.Itoa(j))</span><br><span class="line">            Examinfo.SetUser(<span class="string">"考生"</span>+strconv.Itoa(i))</span><br><span class="line">            fmt.Println(Examinfo)</span><br><span class="line">            Examinfo.operate()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>享元模式 VS 单例、缓存、对象池<ul><li>享元：实现对象复用，节省内存</li><li>单例：保证对象的全局唯一</li><li>缓存：提高访问率，而非复用</li><li>对象池：重复使用，主要是为了节省时间</li></ul></li></ul><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><ul><li>对JVM的GC机制不友好，因为一直保存引用导致无法回收，所以不适用于生命周期短且不会被密集使用的对象</li></ul><hr><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><ul><li>通过构造函数初始化之后，成员变量和属性就不会被修改。因为不能暴露出<code>set()</code>等修改内部的方法，避免影响其他代码使用</li></ul><ul><li>棋子、文档格….</li></ul><hr><h4 id="Integer-享元"><a href="#Integer-享元" class="headerlink" title="Integer 享元"></a>Integer 享元</h4><ul><li>基本数据类型的装箱是为了<strong>将基础数据类型转换成包装类型</strong>，包装类型才能有对象的性质，才能操作属性和方法</li><li>Integer的享元对象实在类加载的时候就一次性创建好的。区间值为 <code>-128到127</code>的数值会从IntegerCache类直接返回，其余的通过new 方法创建</li></ul><hr><h4 id="String-享元"><a href="#String-享元" class="headerlink" title="String 享元"></a>String 享元</h4><ul><li>只有在第一次被使用的时候，存储到常量池中，第二次使用时候就是直接在常量池中引用即可，而不是重新创建</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构型-适配器模式</title>
      <link href="/posts/2e7c4fc7/"/>
      <url>/posts/2e7c4fc7/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>将不兼容的接口转换为可兼容的接口</li></ul><hr><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li>类适配器 （使用继承来实现）</li><li>对象适配器 （组合关系实现）</li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">type</span> Turkey <span class="keyword">interface</span>&#123;</span><br><span class="line">Gobble()</span><br><span class="line">TurkeyFly()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TurkeyClass <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a TurkeyClass)</span> <span class="title">Gobble</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"火鸡咕咕叫"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a TurkeyClass)</span> <span class="title">TurkeyFly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"火鸡起飞"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Duck <span class="keyword">interface</span>&#123;</span><br><span class="line">Quack()</span><br><span class="line">Fly()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Adapter <span class="keyword">struct</span>&#123;</span><br><span class="line">TurkeyClass</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Adapter)</span> <span class="title">Quack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"鸭子嘎嘎叫"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Adapter)</span> <span class="title">Fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"鸭子起飞"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">adpter := Adapter&#123;&#125;</span><br><span class="line">adpter.Quack()</span><br><span class="line">adpter.Fly()</span><br><span class="line"></span><br><span class="line">adpter.Gobble()</span><br><span class="line">adpter.TurkeyFly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>可以看作是一种<code>补偿模式</code>，用来补救设计上的缺陷</p><ul><li>对有缺陷的接口设计二次封装</li><li>某个功能的实现依赖多个外部类时候，将接口适配为统一的接口定义（即：均实现同一接口，使用时向上转型成接口）</li><li>把项目中依赖的一个外部系统替换为另一个外部系统（即：均实现同一接口，使用时向上转型成接口）</li><li>兼容老接口</li><li>适配不同格式数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构型-门面模式</title>
      <link href="/posts/2a133c38/"/>
      <url>/posts/2a133c38/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>为子系统提供一组统一的接口，定义一组高层接口让子系统更容易用，使得复杂的子系统与客户端的分离</li></ul><hr><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>解决易用性</li><li>解决性能问题</li><li>解决分布式事务问题</li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GunSystem <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GunSystem)</span><span class="title">Fire</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"开火"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GunSystem)</span><span class="title">UseBullet</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"上子弹"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserSystem <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(UserSystem)</span> <span class="title">AddScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"得分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(UserSystem)</span> <span class="title">LoseBlood</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"掉血"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Facede <span class="keyword">struct</span>&#123;</span><br><span class="line">fire *GunSystem</span><br><span class="line">user *UserSystem</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Facede)</span> <span class="title">shooting</span><span class="params">()</span></span>&#123;</span><br><span class="line">f.fire.Fire()</span><br><span class="line">f.fire.UseBullet()</span><br><span class="line">f.user.AddScore()</span><br><span class="line">f.user.LoseBlood()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">facede := &amp;Facede&#123;</span><br><span class="line">fire : &amp;GunSystem&#123;&#125;,</span><br><span class="line">user: &amp;UserSystem&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">facede.shooting()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点:</p><ol><li>实现了子系统与客户端之间关系的解耦；</li><li>客户端屏蔽了子系统组件，使得客户端所需处理的对象数目有所减少，使得子系统使用起来更加容易。</li></ol></li><li><p>缺点:</p><ol><li>增加新的子系统可能需要修改外观类或者客户端的源代码，违背了开闭原则；</li><li>外观类并没有阻断子系统被外部使用的可能性。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构型-代理模式</title>
      <link href="/posts/a8ef08fd/"/>
      <url>/posts/a8ef08fd/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在不改变原始类代码的情况下，通过引入代理类来给原始类附加功能</li><li>将框架代码与业务代码解耦</li></ul><hr><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="%E4%BB%A3%E7%90%86.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SubjectImpl subject = <span class="keyword">new</span> SubjectImpl();</span><br><span class="line">      InvocationHandler subjectProxy = <span class="keyword">new</span> SubjectProxy(subject);</span><br><span class="line">      ISubject proxyInstance = (Subject) Proxy.newProxyInstance(subjectProxy.getClass().getClassLoader(), subjectProxy.getClass().getInterfaces(), subjectProxy);</span><br><span class="line">      proxyInstance.doSomeThing(<span class="string">"打铁"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>RPC、缓存、监控、Spring AOP（动态代理）…</li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>让代理类和原始类实现同样接口</li><li>如果原始类没有定义接口，且原始类不是我们开发为维护，这种情况可以通过让代理类继承原始类来实现代理</li></ul><hr><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><h5 id="内部代码实现"><a href="#内部代码实现" class="headerlink" title="内部代码实现"></a>内部代码实现</h5><ul><li><p>基于接口和组合实现</p></li><li><p>代理类和原始类实现相同接口，代理类的实例参数为原始类（相当于，在代理类实现的接口方法中委托原始类实例调用实例方法）</p></li></ul><h5 id="外部代码拓展"><a href="#外部代码拓展" class="headerlink" title="外部代码拓展"></a>外部代码拓展</h5><ul><li>无法修改原始类定义情况下，采取继承方式</li><li>代理类继承原始类，直接使用<code>super.</code>方法，调用原始类方法</li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ul><li><p>解决常规代理下，大量复杂的附加类导致的大量代理类</p></li><li><p>在运行时候，动态的创建原始类对应的代理类，然后在系统中用代理类替换掉原始类</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结构型-桥接模式</title>
      <link href="/posts/858c6e31/"/>
      <url>/posts/858c6e31/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>将抽象和实现解耦，让它们可以独立变化</li><li>通过组合关系来替代继承关系，避免继承层次的指数级爆炸；将类的功能层次结构与实现层次结构连接起来</li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>将骨架代码“抽象“出来，将真正的业务逻辑委派给定义中的”实现”完成</li><li>“抽象”与”实现“独立开发，通过对象的组合关系组装在一起</li></ul><hr><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MobilePhone <span class="keyword">struct</span>&#123;</span><br><span class="line">Impl SoftImplementor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(MobilePhone)</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SoftImplementor <span class="keyword">interface</span>&#123;</span><br><span class="line">RawRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GameSoft <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ChatSoft <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(GameSoft)</span><span class="title">RawRun</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"游戏软件启动"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(ChatSoft)</span><span class="title">RawRun</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"聊天软件启动"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">struct</span>&#123;</span><br><span class="line">MobilePhone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *H)</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">h.Impl.RawRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *H)</span> <span class="title">GPUTurbo</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"GPUTurbo started"</span>)</span><br><span class="line">h.Run()</span><br><span class="line">fmt.Println(<span class="string">"GPUTurbo ended"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> M <span class="keyword">struct</span>&#123;</span><br><span class="line">MobilePhone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(x *M)</span><span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">x.Impl.RawRun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(x *M)</span> <span class="title">GameTurbo</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"GameTurbo started"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    h1 := H&#123;MobilePhone&#123;ChatSoft&#123;&#125;&#125;&#125;</span><br><span class="line">    h2 := H&#123;MobilePhone&#123;GameSoft&#123;&#125;&#125;&#125;</span><br><span class="line">    h1.Run()</span><br><span class="line">    h2.Run()</span><br><span class="line">h2.GPUTurbo()</span><br><span class="line"></span><br><span class="line">    m1 := M&#123;MobilePhone&#123;ChatSoft&#123;&#125;&#125;&#125;</span><br><span class="line">    m2 := M&#123;MobilePhone&#123;GameSoft&#123;&#125;&#125;&#125;</span><br><span class="line">    m1.Run()</span><br><span class="line">    m2.Run()</span><br><span class="line">    m2.GameTurbo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>创建型-原型模式</title>
      <link href="/posts/34963c84/"/>
      <url>/posts/34963c84/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>创建对象的成本较大，而同一个类的不同对象之间差别不大（大部分字段相同），此时可以利用已有对象（原型）进行拷贝的的方式来创建新对象，以达到节省创建时间的目的一种基于原型创建对象的设计模式（即：不需要根据类来生成实例，而是根据实例生成新的实例）</li><li>不关心对象的具体类型，而是找到一个对象，再通过克隆来创建一个一模一样的对象</li></ul><hr><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>对象中的数据需要经过复杂的计算才能得到（排序、计算哈希），或者是需要从RPC、网络、数据库、文件系统等非常慢的IO中读取</li></ul><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul><li>不仅会复制索引，还会复制数据本身</li></ul><h5 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h5><ul><li><p>递归拷贝对象、对象的引用对象以及引用对象的引用对象…</p></li><li><p>将对象序列化，再反序列化成新的对象</p><h5 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h5></li><li><p>两种实现方式都会比浅拷贝耗时、耗内存空间</p></li></ul><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul><li>只会拷贝对象中的基本数据类型以及引用对象的内存地址，不会拷贝数据本身对象。相当于浅拷贝得到对象和被拷贝的对象实际上还是在共享同一个数据</li><li>Java中，<code>Object</code>的<code>clone()</code>方法就是浅拷贝</li></ul><h4 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a>优化方式</h4><ul><li><p>先浅拷贝，再将需要更新的对象进行深度拷贝，替换掉浅拷贝中的老对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;String, SearchWord&gt; currentKeywords=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> lastUpdateTime = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//浅拷贝</span></span><br><span class="line">    HashMap&lt;String, SearchWord&gt; newKeywords = (HashMap&lt;String, SearchWord&gt;) currentKeywords.clone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数据库中取出更新时间&gt;lastUpdateTime的数据，放入到newKeywords中</span></span><br><span class="line">    List&lt;SearchWord&gt; toBeUpdatedSearchWords = getSearchWords(lastUpdateTime);</span><br><span class="line">    <span class="keyword">long</span> maxNewUpdatedTime = lastUpdateTime;</span><br><span class="line">    <span class="keyword">for</span> (SearchWord searchWord : toBeUpdatedSearchWords) &#123;</span><br><span class="line">      <span class="keyword">if</span> (searchWord.getLastUpdateTime() &gt; maxNewUpdatedTime) &#123;</span><br><span class="line">        maxNewUpdatedTime = searchWord.getLastUpdateTime();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (newKeywords.containsKey(searchWord.getKeyword())) &#123;</span><br><span class="line">        newKeywords.remove(searchWord.getKeyword());</span><br><span class="line">      &#125;</span><br><span class="line">      newKeywords.put(searchWord.getKeyword(), searchWord);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastUpdateTime = maxNewUpdatedTime;</span><br><span class="line">    currentKeywords = newKeywords; <span class="comment">//替换</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;SearchWord&gt; <span class="title">getSearchWords</span><span class="params">(<span class="keyword">long</span> lastUpdateTime)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 从数据库中取出更新时间&gt;lastUpdateTime的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>尽量避免IO操作，而是宁愿选择内存操作与CPU计算这些耗时操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之设计原则</title>
      <link href="/posts/4a7ab732/"/>
      <url>/posts/4a7ab732/</url>
      
        <content type="html"><![CDATA[<h4 id="单一原则"><a href="#单一原则" class="headerlink" title="单一原则"></a>单一原则</h4><ul><li>一个类或者模块只负责完成一个职责</li><li>只设计颗粒度小、功能单一的类，而非大而全</li><li>不要求一味追求原则，灵活变动</li></ul><hr><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><ul><li>对拓展开放，对修改关闭（可以新增方法、属性等，而非修改原来的代码）</li><li>扩展意识、抽象意识、封装意识</li><li>并不是说完全杜绝修改，而是以最小代码代价</li><li>只要没有破环原来代码的正常运行，没有破坏原有的单元测试就是合格的代码改动</li></ul><hr><h4 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h4><ul><li>子类对象能够替换程序中父类对象出现的任何地方，并保证程序的逻辑行为不变及正确性不被破坏</li><li>子类在设计的时候要遵守父类的行为约定。父类定义了函数的行为约定，那子类可以改变函数的内部实现逻辑，但不能改变函数原有的行为约定。<ul><li>函数声明要实现的功能</li><li>对输入、输出、异常的约定</li><li>甚至注释</li></ul></li><li>实际中，定义父类和子类之间的关系，也可以替换成接口和实现类之间的关系</li><li>开闭原则的实现基础</li><li><strong>简单而言，子类继承抽象类或者实现接口，而调用类使用抽象类或者接口基类，具体运行时候再决定基类对应的具体子类型</strong></li></ul><hr><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><ul><li>在设计的时候，如果部分接口只是被部分调用者使用，那么需要将这部分接口隔离出来，单独给对应的调用者使用，而不是强迫其他调用者也依赖这部分不会被使用的接口</li><li>函数的设计要功能单一，不要将多个功能不同的逻辑在同一函数实现，而是应该选择拆分成颗粒度更细的多个函数。侧重点在接口设计，而非是单一职责原则的那种很对模块、类和接口的设计</li></ul><hr><h4 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h4><ul><li>高层模块（调用者）不要依赖底层模块，而是通过抽象来互相依赖。除此之外，抽象不要依赖具体实现细节，而是具体实现细节依赖抽象</li></ul><h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><ul><li>控制反转  IOC (Inversion Of Control)</li><li>依赖注入 DI（Dependency Injection）<br>不通过new() 的方式在类内部创建依赖对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类使用</li></ul><hr><h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><h5 id="高内聚"><a href="#高内聚" class="headerlink" title="高内聚"></a>高内聚</h5><ul><li>类本身设计应将相近功能放在同一个类中，不相近的功能不要放在同一个类中</li></ul><h5 id="低耦合"><a href="#低耦合" class="headerlink" title="低耦合"></a>低耦合</h5><ul><li>类之间的依赖简单清晰，即使两个类有依赖关系，一个类的改动也不会或者很少导致依赖类的代码改动</li><li>不该有直接依赖关系的类之间不要有依赖，有依赖关系的类之间尽量只依赖必要的接口</li></ul><hr><h4 id="需求分析与设计"><a href="#需求分析与设计" class="headerlink" title="需求分析与设计"></a>需求分析与设计</h4><h5 id="功能划分"><a href="#功能划分" class="headerlink" title="功能划分"></a>功能划分</h5><ul><li>如果一个功能的修改或添加经常需要多方面修改，就说明模块划分的不够合理，耦合严重</li><li>为了避免业务耦合，让下层系统更通用。一般的，不要让下层系统包含过多的上层系统业务逻辑，但是可以接受上层系统包含下层系统的业务逻辑</li></ul><h5 id="交互关系"><a href="#交互关系" class="headerlink" title="交互关系"></a>交互关系</h5><ul><li>上下层之间的调用倾向同步接口</li><li>同层之间调用倾向于消息中间件异步消息调用</li></ul><hr><h5 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h5><ul><li>接口设计</li><li>数据库设计</li><li>业务模型设计</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之面向对象</title>
      <link href="/posts/c308e44d/"/>
      <url>/posts/c308e44d/</url>
      
        <content type="html"><![CDATA[<h3 id="三剑客"><a href="#三剑客" class="headerlink" title="三剑客"></a>三剑客</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>信息隐藏或者数据保护</li><li>类通过暴露有限的访问接口，授权外部仅能通过类提供的方式来访问内部信息或者数据</li><li>通过访问权限来控制 （private…）</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>关键字（extends）java只支持单继承</li><li>可以代码复用，但是推荐 <strong>多用组合少用继承</strong></li><li>结构稳定继承层次较浅使用继承，不稳定且继承层次深尽量使用组合来替代继承</li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>子类可替换父类</li><li>实现方式：1：继承加方法重写  2：接口类语法  3：duck-typing语法 （动态语言才支持）</li><li>提高代码的可拓展性和复用性</li></ul><hr><h3 id="接口与抽象"><a href="#接口与抽象" class="headerlink" title="接口与抽象"></a>接口与抽象</h3><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><ul><li>隐藏方法的具体实现，让调用者只关心提供了哪些功能，而无需知道如何实现</li><li>关键字实现 （interface、abstract）语法机制，实现抽象特性</li><li>只关注功能点不关注实现</li><li>只能被继承，不能被实例化</li><li>可包含属性和方法，方法可含代码实现也可以abstract定义</li><li>子类必须实现抽象父类的所有抽象方法</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li>不能含有属性</li><li>只能声明方法</li><li>实现类必须实现接口中所有方法</li></ul><h5 id="基于接口编程"><a href="#基于接口编程" class="headerlink" title="基于接口编程"></a>基于接口编程</h5><ul><li>函数命名不能暴露任何细节（泛笼统化）</li><li>封装具体细节实现</li><li>抽取统一依赖的接口定义，让使用者依赖接口操作。将接口与实现相分离</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><strong>接口侧重于解耦，而抽象为了代码复用</strong></li><li>is-a 且为了解决复用，就使用抽象</li><li>has-a 且为了解决抽象，就是使用接口</li><li>抽象自下而上，先有子类代码重复，而后抽象成上层抽象父类</li><li>接口自上而下，先设计接口，而后考虑具体实现</li></ul><hr><h3 id="贫血模型"><a href="#贫血模型" class="headerlink" title="贫血模型"></a>贫血模型</h3><ul><li>只含数据，不含业务逻辑，将数据与操作分离破坏了面向对象的封装特性</li><li>违反了OOP特性，实际是面向过程</li><li>适用于业务简单的系统开发</li></ul><h3 id="充血模型"><a href="#充血模型" class="headerlink" title="充血模型"></a>充血模型</h3><ul><li>数据与对应业务逻辑封装在一起</li><li>适用于业务复杂的系统开发</li></ul><h3 id="领域驱动设计"><a href="#领域驱动设计" class="headerlink" title="领域驱动设计"></a>领域驱动设计</h3><ul><li><p>DDD，主要是用来指导解耦业务系统，划分业务模块，定义业务领域及其交互</p></li><li><p>基于贫血模型的DDD，重Service轻业务对象。而基于充血模型的，轻Service重Domain</p></li></ul><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ul><li>理清所有业务，定义领域模型所包含的属性与方法，将数据与操作结合</li><li>领域模型相当于可复用的因为中间层，新开发基于之前定义号的领域模型来自完成</li><li>单一职责</li></ul><hr><h3 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><h5 id="OOA"><a href="#OOA" class="headerlink" title="OOA"></a>OOA</h5><ul><li>面向对象分析</li></ul><h5 id="OOD"><a href="#OOD" class="headerlink" title="OOD"></a>OOD</h5><ul><li>面向对象设计</li></ul><h5 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h5><ul><li>面向对象编程</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><h5 id="划分职责"><a href="#划分职责" class="headerlink" title="划分职责"></a>划分职责</h5><ul><li>根据需求点，罗列功能点，将判断功能点相近及操作同样属性是否可归为同一类</li></ul><h5 id="定义类及属性和方法"><a href="#定义类及属性和方法" class="headerlink" title="定义类及属性和方法"></a>定义类及属性和方法</h5><ul><li>需求描述中的动词作为函数名，涉及的名词作为候选属性</li></ul><h5 id="定义交互关系"><a href="#定义交互关系" class="headerlink" title="定义交互关系"></a>定义交互关系</h5><ul><li>UML定义了六种关系：泛化、实现、关联、聚合、组合、依赖</li><li>保留四个关系：泛化、实现、组合、依赖</li></ul><h5 id="组装并提供入口"><a href="#组装并提供入口" class="headerlink" title="组装并提供入口"></a>组装并提供入口</h5>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习笔记</title>
      <link href="/posts/9d1d146e/"/>
      <url>/posts/9d1d146e/</url>
      
        <content type="html"><![CDATA[<h3 id="概述篇"><a href="#概述篇" class="headerlink" title="概述篇"></a>概述篇</h3><h4 id="层次结构设计"><a href="#层次结构设计" class="headerlink" title="层次结构设计"></a>层次结构设计</h4><p>OSI七层模型并不是广为流传的标准模型，存在一些不合理性，市场化过程困难重重。 TCP/IP在全球范围成功运行</p><img src="模型对比.png" style="zoom:55%;" /><h4 id="物理层概述"><a href="#物理层概述" class="headerlink" title="物理层概述"></a>物理层概述</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li>连接不同物理设备</li><li>传输比特流</li></ul><h5 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h5><ul><li>信道是往一个方向传输信息的媒体，一个通信电路含一个接受信道和一个发送信道</li></ul><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><img src="数据链路层传输.png" style="zoom:80%;" /><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>数据封装成帧</li><li>数据透明传输</li><li>差错监测： 物理层只管传输比特流，无法控制是否出错，需要数据链路层负责监测</li></ul><h5 id="差错监测"><a href="#差错监测" class="headerlink" title="差错监测"></a>差错监测</h5><ul><li>奇偶校验码(有一定局限性)</li><li>循环冗余校验码 CRC ：根据传输或者保存的数据<strong>产生固定位数校验码</strong>的方法，<strong>通过生成的数字计算出来并且附加得到数据后面来</strong>检测数据传输或者保存后可能出现的错误</li></ul><h5 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h5><h3 id="网络层篇"><a href="#网络层篇" class="headerlink" title="网络层篇"></a>网络层篇</h3><h4 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h4><ul><li>解决了虚拟网络中数据报传输路径的问题</li><li>IP头部<img src="IP协议头部具体内容.png" style="zoom:40%;" /></li></ul><h4 id="协议转发"><a href="#协议转发" class="headerlink" title="协议转发"></a>协议转发</h4><h3 id="传输篇"><a href="#传输篇" class="headerlink" title="传输篇"></a>传输篇</h3><p>使用端口来标记不同的网络进程</p><h4 id="UDP协议详解"><a href="#UDP协议详解" class="headerlink" title="UDP协议详解"></a>UDP协议详解</h4><ul><li>User Datagram Protocol 用户数据协议，是一个简单的协议</li></ul><p><img src="UDP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3.png" alt=""></p><h4 id="TCP协议详解"><a href="#TCP协议详解" class="headerlink" title="TCP协议详解"></a>TCP协议详解</h4><ul><li>Transmission Control Protocal 传输协议控制 </li></ul><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><ul><li>面向连接的协议</li><li>点对点通信</li><li>提供可靠的传输服务</li><li>提供<code>全双工</code>的通信 (也就是可以互相同时接/发彼此信息)</li><li>面向字节流的协议</li></ul><h4 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h4><p><a href="http://www.cppblog.com/wangfeng2500/articles/150758.html">数据报与字节流的区分</a></p><h3 id="应用层篇"><a href="#应用层篇" class="headerlink" title="应用层篇"></a>应用层篇</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 待完成 </tag>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统学习笔记</title>
      <link href="/posts/71959014/"/>
      <url>/posts/71959014/</url>
      
        <content type="html"><![CDATA[<h3 id="概述篇"><a href="#概述篇" class="headerlink" title="概述篇"></a>概述篇</h3><p>​      管理计算机软硬件资源的计算机程序<br>​      管理配置内存  决定资源供需顺序 控制输入输出设备等<br>​      提供让用户和系统交互的操作界面 (不局限种类和设备)</p><p>简单而言就是 管理硬件,提供用户交互的软件系统</p><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li><p>并发性(前提) :  需要区分并行和并发的概念</p></li><li><p>共享性  :  操作系统中的资源可以供多个并发的程序共同使用,共享分为 <code>互斥共享形式</code> 和<code>同时访问形式</code></p></li><li><p>虚拟性 : 表现为把一个物理实体转变为诺干个逻辑实体,而物理实体是真实存在但是逻辑实体是虚拟的. 虚拟技术主要有 <code>时分复用技术</code> 和 <code>空分复用技术</code></p><ul><li>时分复用技术<br>资源在时间上复用,不同程序并发使用<br>多道程序分时使用计算机的硬件资源<br>提高资源的利用率</li></ul></li><li><p>异步性</p></li></ul><hr><h4 id="进程实体"><a href="#进程实体" class="headerlink" title="进程实体"></a>进程实体</h4><ul><li>系统进行资源分配和调度的<strong>基本单位</strong></li><li>作为程序独立运行的载体保障程序正常运行</li><li>线程是操作系统进行运行调度的<strong>最小单位</strong>，包含在进程中，是进程实际运行工作的单位。<strong><em>进程的线程共享进程资源</em></strong></li></ul><h5 id="主存中进程形态"><a href="#主存中进程形态" class="headerlink" title="主存中进程形态"></a>主存中进程形态</h5><ul><li>进程标识符</li><li>处理机状态</li><li>进程调度信息</li><li>进程控制信息</li></ul><h5 id="进程控制块-PCB"><a href="#进程控制块-PCB" class="headerlink" title="进程控制块 PCB"></a>进程控制块 PCB</h5><ul><li>描述和控制进程运行的通用数据结构</li><li>记录当前状态和控制进程运行的全部信息</li><li>使得进程是能够独立运行的基本单位</li><li>PCB 是操作系统进行调度经常会被读取的信息</li><li>PCB是常驻内存的，存放在系统专门开辟的PCB区域内</li></ul><h4 id="五状态模型"><a href="#五状态模型" class="headerlink" title="五状态模型"></a>五状态模型</h4><img src="状态切换.png" style="zoom:70%;" /><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><ul><li>创建进程时拥有PCB但是其他资源尚未就绪的状态</li><li>操作系统提供<strong><em>fork函数</em></strong>接口创建进程</li></ul><h5 id="就绪"><a href="#就绪" class="headerlink" title="就绪"></a>就绪</h5><ul><li>所有的资源都准备好，只差CPU资源的状态 </li><li>在一个系统中多个处于就绪状态的进程通常排成一个队列</li></ul><h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><ul><li>进程获得CPU，其程序正在执行</li><li>单处理机中，在某一个时刻只能有一个进程是处于执行状态</li></ul><h5 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h5><ul><li>放弃CPU的状态 （其他设备未就绪而无法继续执行）</li><li>也存在 阻塞队列</li></ul><h5 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h5><ul><li>进程结束由系统清理或者归还CPU的状态</li></ul><h4 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h4><ul><li>对竞争资源在多进程间进行使用次序的协调</li><li>使得并发执行的多个进程之间可以有效地使用资源和相互合作</li></ul><h5 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h5><ul><li>空闲让进： 资源无占用，允许使用</li><li>忙着等待：资源有占用，请求进程等待</li><li>有限等待：保证有限的等待时间能够使用资源</li><li>让权等待：等待时候，进程需要让出CPU</li></ul><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><ul><li>消息队列</li><li>共享存储</li><li>信号量</li></ul><h5 id="线程同步方法"><a href="#线程同步方法" class="headerlink" title="线程同步方法"></a>线程同步方法</h5><p>进程间多线程也需要同步，当多进程并发使用进程资源</p><ul><li>互斥量</li><li>读写锁</li><li>自旋锁</li><li>条件变量</li></ul><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><ul><li>前台进程</li><li>后台进程  将需要的执行的指令后面加<code>&amp;</code>启动</li><li>守护进程   进程名字以<code>d</code>结尾的一般都是</li></ul><h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><ul><li><p>进程ID： 进程唯一标记，每个进程的不一样。是非负整数，最大值由操作系统限定</p><p>ID为0的进程为<strong>idle</strong>进程，是系统创建的第一个进程<br>ID为1的进程是<strong>init</strong>进程，是0号进程的子进程，完成系统初始化<br>Init进程是所有用户进程的祖先进程</p></li><li><p>关系<br>父子进程间关系可以通过 <code>pstree</code>命令查看</p></li></ul><h4 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h4><p> 计算机通过决策决定哪个就绪进程可以获得CPU使用权</p><ul><li>保留旧进程运行信息，请出就进程</li><li>选择新进程，准备运行环境并分配CPU</li></ul><h5 id="调度机制"><a href="#调度机制" class="headerlink" title="调度机制"></a>调度机制</h5><ul><li>就绪队列的排队机制：将就绪进程按照一定的方式排成队列，以便调度程序可以最快的找到就绪进程</li><li>选择运行进程额委派机制：调度程序以一定的策略选择就绪进程，将CPU资源分配给它</li><li>新老进程的上下文切换机制：保存当前进程的上下文信息，装入被委派执行进程的运行上下文</li></ul><h4 id="调度方式"><a href="#调度方式" class="headerlink" title="调度方式"></a>调度方式</h4><table><thead><tr><th align="center"></th><th align="center">抢占式调度</th><th align="center">非抢占式调度</th></tr></thead><tbody><tr><td align="center">系统开销</td><td align="center">切换频繁、开销大</td><td align="center">切换次数少、开销少</td></tr><tr><td align="center">公平性</td><td align="center">相对公平</td><td align="center">不公平</td></tr><tr><td align="center">应用</td><td align="center">通用系统</td><td align="center">专用系统</td></tr></tbody></table><h5 id="非抢占式"><a href="#非抢占式" class="headerlink" title="非抢占式"></a>非抢占式</h5><p> 处理器一旦分配给某个进程，会让该进程一直使用下去。调度程序不以任何理由抢占正在被使用的处理器，直到完成工作或者因为IO阻塞才会让出处理器</p><h5 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h5><p>允许调度程序以一定的策略让出当前运行的程序,保存好旧进程的上下文信息,分配处理器给新进程</p><h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><table><thead><tr><th align="left">算法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">先来先服务</td><td align="left">按照就绪队列排序</td></tr><tr><td align="left">短进程优先</td><td align="left">优先选择就绪队列中估计运行时间最短的进程<br />不利于长作业进程执行</td></tr><tr><td align="left">高优先权优先</td><td align="left">进程附带优先权，调度进程优先选择权重高的进程<br />使得紧迫的任务可以优先处理</td></tr><tr><td align="left">时间片轮转</td><td align="left">先来先服务的原则排队就绪进程<br />每次从队列头部去除待执行进程，分配一个时间片执行后，插入尾部<br />相对公平，但不能保证及时响应用户操作</td></tr></tbody></table><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>两个或者两个以上的进程在执行过程中，由于竞争资源或者彼此通信造成的一种阻塞现象，无外力作用无法推进下去</p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ul><li>竞争资源</li><li>进程调度顺序不当</li></ul><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><ul><li>互斥</li><li>请求保持</li><li>不可剥夺</li><li>环路等待</li></ul><h5 id="预防算法"><a href="#预防算法" class="headerlink" title="预防算法"></a>预防算法</h5><ul><li>银行家算法</li></ul><hr><h4 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h4><ul><li>确保计算机由足够的内存使用</li><li>确保程序可以从可用内存中获取一部分内存使用</li><li>确保程序可以归还使用后的内存给其他程序使用</li></ul><h5 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h5><ul><li><strong>缺失!!!!!!!!!!!!!!!</strong></li></ul><h5 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h5><p><img src="%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6.png" alt=""></p><h4 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h4><p>操作系统管理进程的空间</p><h5 id="页式存储管理"><a href="#页式存储管理" class="headerlink" title="页式存储管理"></a>页式存储管理</h5><h5 id="段式存储管理"><a href="#段式存储管理" class="headerlink" title="段式存储管理"></a>段式存储管理</h5><h5 id="段页式存储管理-1"><a href="#段页式存储管理-1" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h5>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 待完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理学习笔记</title>
      <link href="/posts/32d92359/"/>
      <url>/posts/32d92359/</url>
      
        <content type="html"><![CDATA[<h3 id="概述篇"><a href="#概述篇" class="headerlink" title="概述篇"></a>概述篇</h3><h4 id="程序翻译-与-程序解释"><a href="#程序翻译-与-程序解释" class="headerlink" title="程序翻译 与 程序解释"></a>程序翻译 与 程序解释</h4><ul><li>计算机执行的都是低级语言</li><li>翻译过程执行新的低级语言,解释过程不生成新的低级语言</li><li>解析的过程是低级语言的编写的解释器去解释高级语言</li></ul><h4 id="计算机的层次与编程语言"><a href="#计算机的层次与编程语言" class="headerlink" title="计算机的层次与编程语言"></a>计算机的层次与编程语言</h4><img src="计算机分层.png" alt="计算机分层" style="zoom:58%;" /><h4 id="计算单位"><a href="#计算单位" class="headerlink" title="计算单位"></a>计算单位</h4><h5 id="容量单位"><a href="#容量单位" class="headerlink" title="容量单位"></a>容量单位</h5><ul><li>物理层,高低电平记录信息   高低使用0/1表示,成为 <code>bit</code>(比特位)</li><li>一个字节(Byte)等于8bit<h5 id="速度单位"><a href="#速度单位" class="headerlink" title="速度单位"></a>速度单位</h5></li></ul><ul><li><p>网络速度是实际<br> 百兆光纤为啥只有12M/s的下载速度</p><p>网络常用单位是<code>Mbps</code> . 百兆光纤也就是100M/s,即: 100Mbps 也就是 100Mbit/s</p><p>换算过来: 100Mbit/s=(100/8)MB/s 也就是 12.5MB/s</p></li><li><p>CPU速度</p><ul><li>一般体现为CPU的时钟频率,时钟频率单位一般是赫兹 (Hz)  主流CPU都在2GHz以上</li><li>Hz 秒分之一 : 每秒的周期性变动重复次数的计量</li></ul></li></ul><h4 id="组成篇"><a href="#组成篇" class="headerlink" title="组成篇"></a>组成篇</h4><h5 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h5><ul><li>提供对外连接接口</li><li>分类<ul><li>片内总线: 高集成度芯片内部的信息传输线</li><li>系统总线: CPU  主内存 IO设备 各组件之间的信息传输线 (USB…)</li></ul></li></ul><p><strong>作用</strong>: 解决不同设备之间通信问题</p><h5 id="指令执行过程"><a href="#指令执行过程" class="headerlink" title="指令执行过程"></a>指令执行过程</h5><h4 id="计算篇"><a href="#计算篇" class="headerlink" title="计算篇"></a>计算篇</h4><h5 id="原码表示法"><a href="#原码表示法" class="headerlink" title="原码表示法"></a>原码表示法</h5><ul><li>进行运发非常复杂</li></ul><h5 id="补码-反码"><a href="#补码-反码" class="headerlink" title="补码/反码"></a>补码/反码</h5><h4 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h4><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><ul><li>每一个节点都有上一个节点和下一个节点的地址或者引用,首节点没有上一个节点,尾节点没有下一个节点</li></ul><h5 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h5><h5 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h5><h5 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h5>]]></content>
      
      
      
        <tags>
            
            <tag> 待完成 </tag>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密算法基础</title>
      <link href="/posts/afdc1432/"/>
      <url>/posts/afdc1432/</url>
      
        <content type="html"><![CDATA[<h4 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h4><ul><li><code>非对称算法</code>需要<code>公钥</code>和<code>私钥</code>，关于使用：简单而言就是“<strong>公钥加密，私钥解密；私钥加密，公钥解密</strong>”。因为加密解密使用的是不同的密钥，所以就叫做非对称加密算法。也就是说<code>对称算法</code>就是<strong>加密解密的密钥一致</strong></li></ul><hr><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><h5 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h5><ul><li>用的是哈希函数,<code>数据唯一检测</code>用的居多  登录 不想让知道  唯一</li><li>直白的说就是:将一段信息使用md5加密后，会产生信息摘要，以防止被篡改且<strong>不可逆</strong>。无论是多长的输入，<code>MD5</code> 都会输出长度为 <code>128bits</code> 的一个串 (通常用 <code>16</code> 进制 表示为 <code>32</code> 个字符)。</li></ul><h5 id="Base64加密"><a href="#Base64加密" class="headerlink" title="Base64加密"></a>Base64加密</h5><ul><li>字节转字符串时候使用  byte转字符串</li></ul><h5 id="DES加密"><a href="#DES加密" class="headerlink" title="DES加密"></a>DES加密</h5><ul><li>数据加密标准，是对称算法领域的典型算法。以 <code>64</code> 位为 <strong>分组对数据</strong> 加密，它的 <strong>密钥长度</strong> 是 <code>56</code> 位，<strong>加密解密</strong> 用 <strong>同一算法</strong>。<code>DES</code> 加密算法是对 <strong>密钥</strong> 进行保密，而 <strong>公开算法</strong>，包括加密和解密算法。</li><li>缺点：密钥偏短（56位）、生命周期短（避免被破解） </li></ul><h5 id="3DES加密"><a href="#3DES加密" class="headerlink" title="3DES加密"></a>3DES加密</h5><ul><li>将密钥长度增至112位或168位，通过增加迭代次数提高安全性 </li><li>缺点：处理速度较慢、密钥计算时间较长、加密效率不高 </li></ul><h5 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h5><ul><li><p>常规使用  </p></li><li><p>高级数据加密标准，能够有效抵御已知的针对DES算法的所有攻击 </p></li><li><p>密钥建立时间短、灵敏性好、内存需求低、安全性高 </p></li></ul><h5 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h5><ul><li>加密算法是目前最有影响力的 <strong>公钥加密算法</strong>，并且被普遍认为是目前 <strong>最优秀的公钥方案</strong> 之一。<code>RSA</code> 是第一个能同时用于 <strong>加密</strong> 和 <strong>数字签名</strong> 的算法，它能够 <strong>抵抗</strong> 到目前为止已知的 <strong>所有密码攻击</strong>，已被 <code>ISO</code> 推荐为公钥数据加密标准</li><li><strong>最安全</strong> 性能最差   常用于支付之类</li></ul><hr><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="https://blog.csdn.net/baidu_22254181/article/details/82594072">浅谈常见的七种加密算法及实现</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 待完成 </tag>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习笔记</title>
      <link href="/posts/57192/"/>
      <url>/posts/57192/</url>
      
        <content type="html"><![CDATA[<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>​        <code>widget</code>构造参数应当使用构造函数应使用命名参数，必要参数要使用<code>required</code>标注，有利于静态代码分析器进行检查。继承<code>widget</code>的时候，第一个参数应该是<code>Key</code>，另外，如果Widget需要接收子Widget，那么<code>child</code>或<code>children</code>参数通常应被放在参数列表的最后。同样是按照惯例，Widget的属性应尽可能的被声明为<code>final</code>，防止被意外改变。《Flutter实战 》</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>StatefulWidget 和 State 是独立的对象。在Flutter中，这两个类型的对象具有不同的生命周期。Widget是临时对象，用于构造应用当前状态的展示，而State对象是调用build()之间是持久的，以此来存储信息。Widget通过回调得到状态改变的通知，同时当前状态通知给其他widget用于显示， 重定向这一流程的共同父级是State。</p><h5 id="布局选项"><a href="#布局选项" class="headerlink" title="布局选项"></a>布局选项</h5><ul><li>Flutter仅支持一帧，并且在每一帧上，Flutter的框架都会创建一个Widget实例树（即：<u>一次性绘制整个界面</u>）。而与之对应的是，<u>在Android中：View绘制结束之后，就不会重绘，直到调用invalidate时候才会重绘</u>。</li><li>与Android的视图层次系统不同（在framework改变视图），可以直接对view进行改变来更改视图。而在Flutter中的widget是不可变的，这允许widget变得超级轻量。但是也引申出了俩个Widget概念：<ul><li><strong>StatelessWidget</strong> : 用户界面不依赖对象配置信息以外的其他任何内容</li><li><strong>StatefulWidget</strong>：需要通过动态数据（数据请求）来更改用户界面，而且还要告诉Flutter框架该Widget的状态已经更新，以便可以更新该Widget。简单得说：就是需要用户交互、状态变动、网络数据请求就必须使用这个</li></ul></li></ul><h5 id="组件变更"><a href="#组件变更" class="headerlink" title="组件变更"></a>组件变更</h5><ul><li>Android可以通过父控件addChild或者removeChild动态增删View。但是在Flutter中，Widget是不可变的，也就意味着只能通过控制影响是否创建渲染。</li></ul><hr><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><ul><li>widget管理自己的状态</li><li>父widget管理此widget的状态</li><li>混搭管理</li></ul><h5 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h5><ul><li>状态是用户数据（复选框的选中状态、滑块的位置，则该状态最好是父widget管理）</li><li>状态关乎于界面效果（动画…）那么状态最好是widget本身来管理</li></ul><hr><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><img src="%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p><hr><h4 id="轴项属性"><a href="#轴项属性" class="headerlink" title="轴项属性"></a>轴项属性</h4><ul><li><code>Row</code>与<code>Columu</code>分别会让布局控件<strong>水平排列</strong>以及<strong>竖直排列</strong>,而且<u>Row的起点在左边</u>,<u>Column的起点在顶点</u>。对于Android来说，只存在横竖方向布局，但是像这种web形式语言，横竖屏排列也有自己的主轴与横轴。</li></ul><table><thead><tr><th align="center">属性</th><th align="center">选项</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">mainAxisSize</td><td align="center">MainAxisSize.max<br />MainAxisSize.min</td><td align="center">类似于Android里面的match与wrap，<br />默认max</td></tr><tr><td align="center">mainAxisAlignment</td><td align="center">MainAxisAlignment.start<br />MainAxisAlignment.end<br />MainAxisAlignment.center<br />MainAxisAlignment.spaceBetween<br />MainAxisAlgnment.spaceEvenly<br />MainAxisAlignment.spaceAround</td><td align="center">主轴对齐方式,其中<br />spaceBetween：在 children 之间平均分配额外空间<br />spaceEvenly与spaceAround还是不大理解<br />默认start</td></tr><tr><td align="center">crossAxisAlignment</td><td align="center">CrossAxisAlignment.start<br />CrossAxisAlignment.end<br />CrossAxisAlignment.center<br />CrossAxisAlignment.stretch<br />CrossAxisAlignment.baseline</td><td align="center">横轴对齐方式，默认 center</td></tr></tbody></table><hr><h4 id="权重布局-✋"><a href="#权重布局-✋" class="headerlink" title="权重布局 ✋"></a>权重布局 ✋</h4><ul><li><code>Flexible</code>与<code>Expanded</code>区别在于：前者包裹一个布局让这个布局变得可以调整大小，而后者能够包裹一个布局并强制其填满剩余空间。也即是说前者可以重新调整布局的大小就可以调整子 Widget 的间距同时保持其相对于父 Widget 的大小。 <code>Expanded</code>改变子窗口小部件的约束，所以它会填补全部空白空间<h5 id="Flexible"><a href="#Flexible" class="headerlink" title="Flexible"></a>Flexible</h5></li></ul><table><thead><tr><th align="center">属性</th><th align="center">选项</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">fit</td><td align="center">FlexFit.loose<br />FlexFit.tight</td><td align="center">默认loose，也就是默布局自身大小<br />而tight则是强制布局充满所有剩余</td></tr><tr><td align="center">flex</td><td align="center"></td><td align="center">Android权重布局</td></tr></tbody></table><h5 id="Expanded"><a href="#Expanded" class="headerlink" title="Expanded"></a>Expanded</h5><hr><h4 id="自适应应用"><a href="#自适应应用" class="headerlink" title="自适应应用"></a>自适应应用</h4><p>在不同得的设备平台上运行时候，处理多平台的物理触发机制</p><h4 id="响应式应用"><a href="#响应式应用" class="headerlink" title="响应式应用"></a>响应式应用</h4><p>布局会根据可用的屏幕大小做调整</p><h5 id="LayoutBuilder"><a href="#LayoutBuilder" class="headerlink" title="LayoutBuilder"></a><strong><a href="https://api.flutter-io.cn/flutter/widgets/LayoutBuilder-class.html"><code>LayoutBuilder</code></a></strong></h5><p>根据其 builder 属性，得到一个 BoxConstraints 对象，根据约束条件做对应的布局调整 </p><h5 id="MediaQuery-of"><a href="#MediaQuery-of" class="headerlink" title="MediaQuery.of()"></a><strong><a href="https://api.flutter-io.cn/flutter/widgets/MediaQuery/of.html"><code>MediaQuery.of()</code></a></strong></h5><p>获取当前应用的尺寸及旋转方向等信息，适用于基于完整的上下文信息进行布局决策，而非特定的 widget </p><h5 id="响应式-widget"><a href="#响应式-widget" class="headerlink" title="响应式 widget"></a>响应式 widget</h5><ul><li><a href="https://api.flutter-io.cn/flutter/widgets/AspectRatio-class.html"><code>AspectRatio</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/CustomSingleChildLayout-class.html"><code>CustomSingleChildLayout</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/CustomMultiChildLayout-class.html"><code>CustomMultiChildLayout</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/FittedBox-class.html"><code>FittedBox</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/FractionallySizedBox-class.html"><code>FractionallySizedBox</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/LayoutBuilder-class.html"><code>LayoutBuilder</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/MediaQuery-class.html"><code>MediaQuery</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/MediaQueryData-class.html"><code>MediaQueryData</code></a></li><li><a href="https://api.flutter-io.cn/flutter/widgets/OrientationBuilder-class.html"><code>OrientationBuilder</code></a></li></ul><h4 id="布局约束"><a href="#布局约束" class="headerlink" title="布局约束"></a>布局约束</h4><ul><li><p>首先，上层 widget 向下层 widget 传递约束条件（最大/最小宽度、最大/最小高度）</p></li><li><p>然后，下层 widget 向上层 widget 传递大小信息</p></li><li><p>最后，上层 widget 决定下层 widget 的位置（Android没有指定位置/大小，默认是直接使用上层/下级约束）</p></li></ul><h5 id="松约束"><a href="#松约束" class="headerlink" title="松约束"></a>松约束</h5><p><code>loose</code>：只要没有超过最大高度/宽度，随便子 widget 设置</p><h5 id="紧约束"><a href="#紧约束" class="headerlink" title="紧约束"></a>紧约束</h5><p><code>Tight</code>：widget 告诉子级必须为指定大小</p><h5 id="约束式-widget"><a href="#约束式-widget" class="headerlink" title="约束式 widget"></a>约束式 widget</h5><ul><li>SizeBox</li><li><a href="https://api.flutter-io.cn/flutter/widgets/FractionallySizedBox-class.html"><code>FractionallySizedBox</code></a></li><li>BoxConstraints</li></ul><h4 id="边界约束"><a href="#边界约束" class="headerlink" title="边界约束"></a>边界约束</h4><hr><h4 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a><a href="https://www.bilibili.com/video/BV1254y1s7Zo?spm_id_from=333.999.0.0">布局原理</a></h4>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射与动态代理</title>
      <link href="/posts/51485/"/>
      <url>/posts/51485/</url>
      
        <content type="html"><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ul><li>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为<code>java语言的反射机制</code></li></ul><h5 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h5><ul><li>实际运用中,某些类、方法以及属性是私有的,甚至是只对系统应用开放</li></ul><h5 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h5><ul><li><p>Class</p></li><li><p>Field</p></li><li><p>Method</p></li><li><p>Constructor</p></li></ul><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><ul><li><p>这些类型的对象在JVM运行时候创建</p></li><li><p>使用<code>Contructor</code>创建新的对象，用<code>get()</code>和<code>set()</code>方法读取与修改Field对象关联的字段</p></li><li><p>用 <code>invoke()</code>方法调用与Method对象关联的方法.</p></li><li><p>调用<code>getFields()</code>、<code>getMethods()</code>、 和 <code>getContructors()</code>等方法返回表示字段,方法以及构造器的对象的数组</p></li></ul><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><ul><li>代理类通过调用委托类的方法,提供实际操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealObject doSomeThing"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealObject SomeThingElse "</span> + arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxy</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Interface proxied;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleProxy</span><span class="params">(Interface proxied)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("SimpleProxy doSomeThing");</span></span><br><span class="line">proxied.doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("SimpleProxy somethingElse " + arg);</span></span><br><span class="line">proxied.somethingElse(arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SimpleProxy simpleProxy =<span class="keyword">new</span> SimpleProxy(<span class="keyword">new</span> RealObject());</span><br><span class="line">simpleProxy.doSomething();</span><br><span class="line">simpleProxy.somethingElse(<span class="string">"简单代理"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RealObject doSomeThing</span><br><span class="line">RealObject SomeThingElse 简单代理</span><br></pre></td></tr></table></figure></li></ul><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><ul><li>不同于普通代理那种在程序运行前就编译的方式,而是在运行时动态生成。优势在于：可以很方便的对代理类的函数做统一处理，而不是修改每一个代理类的方法</li><li>重点在于 <code>Proxy.newProxyInstance</code>函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealObject doSomeThing"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealObject SomeThingElse "</span> + arg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxy</span>  </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Interface proxied = <span class="keyword">new</span> RealObject();</span><br><span class="line"></span><br><span class="line"><span class="function">Interface <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Interface)Proxy.newProxyInstance(proxied.getClass().getClassLoader(), proxied.getClass().getInterfaces(),<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">"doSomething"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"somethingElse"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SimpleProxy simpleProxy =<span class="keyword">new</span> SimpleProxy();</span><br><span class="line">Interface mInterface = simpleProxy.getProxy();</span><br><span class="line">mInterface.doSomething();</span><br><span class="line">mInterface.somethingElse(<span class="string">"动态代理"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RealObject doSomeThing</span><br><span class="line">RealObject SomeThingElse 动态代理</span><br></pre></td></tr></table></figure></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="RTTI与反射的区别"><a href="#RTTI与反射的区别" class="headerlink" title="RTTI与反射的区别"></a>RTTI与反射的区别</h5><ul><li>对于前者来说,编译器在编译时候打开和检查<code>.class</code>文件(简而言之,可以用”普通”方式调用对象的所有方法)。而对于反射来说，<code>.class</code>在编译时候不可获取，所以在运行时候检查和打开<code>.class</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UML简单笔记</title>
      <link href="/posts/13021/"/>
      <url>/posts/13021/</url>
      
        <content type="html"><![CDATA[<h4 id="简单的图示"><a href="#简单的图示" class="headerlink" title="简单的图示"></a>简单的图示</h4><p><img src="UML%E7%B1%BB%E5%9B%BE.png" alt=""></p><h4 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h4>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang语法学习笔记</title>
      <link href="/posts/39897/"/>
      <url>/posts/39897/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="完整第三方资料"><a href="#完整第三方资料" class="headerlink" title="完整第三方资料"></a><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md">完整第三方资料</a></h4><ul><li>基于此资料做的笔记，看不到其中文档的图片示例的话，那就只能小✈全开</li></ul><hr><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>访问控制只有公开和私有两种</li><li>所有首字母大写的类型、结构体、字段、变量、函数、方法等都是公开的，可供其他包使用。而小写的则是私有的，只能在包内使用。</li></ul><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>函数是通过<strong>&lt;pkgName&gt;.&lt;funcName&gt;</strong>的方式调用的，这一点和Python十分相似。包名和包所在的文件夹名可以是不同的，此处的<strong>&lt;pkgName&gt;</strong>即为通过<strong>package &lt;pkgName&gt;</strong>声明的包名，而非文件夹名。</p><h5 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化“variableName”的变量为“value”值，类型是“type” 适用于全局变量</span></span><br><span class="line"><span class="keyword">var</span> variableName <span class="keyword">type</span> = value</span><br><span class="line"><span class="comment">// :=  依次赋值，编译器会根据初始化的值自动推导出相应的类型，只能在函数内部定义</span></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3</span><br><span class="line"><span class="comment">// _ </span></span><br><span class="line">_, b := <span class="number">34</span>, <span class="number">35</span></span><br></pre></td></tr></table></figure><ul><li><code>:=</code>这个符号直接取代了<code>var</code>和<code>type</code>,这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用<code>var</code>方式来定义全局变量</li><li><code>_</code>（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃 </li></ul><h5 id="访问修饰符的定义"><a href="#访问修饰符的定义" class="headerlink" title="访问修饰符的定义"></a>访问修饰符的定义</h5><ul><li>大写字母开头的变量是可导出的，也就是其它包可以读取的，是<strong>公有变量</strong>；小写字母开头的就是不可导出的，是<strong>私有变量</strong>，只能在包内使用</li><li>大写字母开头的函数也是一样，相当于<code>class</code>中的带<code>public</code>关键词的<strong>公有函数</strong>；小写字母开头的就是有<code>private</code>关键词的<strong>私有函数</strong></li></ul><h5 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h5><ul><li>数组是一种 <strong>值类型</strong>（不像 C/C++ 中是指向首元素的指针），所以也可以通过 <code>new()</code> 来创建：<ul><li><code>var arr1 = new([5]int)</code></li><li>那么这种方式和 <code>var arr2 [5]int</code> 的区别是什么呢？arr1 的类型是 <code>*[5]int</code>，而 arr2的类型是 <code>[5]int</code>。这样的结果就是当把一个数组赋值给另一个时，需要再做一次数组内存的拷贝操作</li></ul></li><li><strong>切片</strong>是一种引用类型<ul><li>声明切片的格式是： <code>var identifier []type</code>（不需要说明长度）一个切片在未初始化之前默认为 nil，长度为 0</li><li>切片的初始化格式是：<code>var slice1 []type = arr1[start:end]</code>。</li></ul></li><li>slice   可理解为<code>动态数组</code>，即初始定义时候不明确长度，但是实际是一个引用类型。<code>slice</code>总是指向一个底层<code>array</code></li><li>map 常规字典</li></ul><h5 id="实例创建"><a href="#实例创建" class="headerlink" title="实例创建"></a>实例创建</h5><p>  都是用于内存分配</p><ul><li>*<em>make(T) *</em>返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：slice、map 和 channel</li><li><strong>new(T) *<em>为每个新的类型T分配一片内存，初始化为 0 并且返回类型为</em>T的内存地址：这种方法 **返回一个指向类型为 T，值为 0 的地址的指针</strong>，它适用于值类型如数组和结构体）；它相当于 <code>&amp;T{}</code>，且需要显示返回指针情况，不常用</li><li><em>new 函数分配内存，make 函数初始化</em></li></ul><hr><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="传值与传指针"><a href="#传值与传指针" class="headerlink" title="传值与传指针"></a>传值与传指针</h5><ul><li><p><code>channel</code>，<code>slice</code>，<code>map</code>这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变<code>slice</code>的长度，则仍需要取地址传递指针）</p></li><li><p>常规操作时候，需要操作某个变量的值。使用<code>&amp;v</code>将实际地址传向参数类型为<code>*T</code>的函数中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的一个函数，实现了参数+1的操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add1</span><span class="params">(a *<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// 请注意，</span></span><br><span class="line">*a = *a+<span class="number">1</span> <span class="comment">// 修改了a的值</span></span><br><span class="line"><span class="keyword">return</span> *a <span class="comment">// 返回新值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">3</span></span><br><span class="line">fmt.Println(<span class="string">"x = "</span>, x)  <span class="comment">// 应该输出 "x = 3"</span></span><br><span class="line"></span><br><span class="line">x1 := add1(&amp;x)  <span class="comment">// 调用 add1(&amp;x) 传x的地址</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"x+1 = "</span>, x1) <span class="comment">// 应该输出 "x+1 = 4"</span></span><br><span class="line">fmt.Println(<span class="string">"x = "</span>, x)    <span class="comment">// 应该输出 "x = 4"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h5><ul><li>延迟语句，函数执行到最后的时候会按照逆序执行这些个<code>defer</code>修饰的操作。后进先出，最先写的方法最后才会被调用</li><li>常用来做关闭资源等操作</li></ul><h5 id="保留函数"><a href="#保留函数" class="headerlink" title="保留函数"></a>保留函数</h5><ul><li>Go里面有两个保留的函数：<code>init</code>函数（能够应用于所有的<code>package</code>）和<code>main</code>函数（只能应用于<code>package main</code>）。这两个函数在定义时不能有任何的参数和返回值</li><li>如果 <code>package main</code>中同时存在<code>main</code>和<code>init</code>函数，那么会先执行<code>init</code>再执行<code>main</code></li></ul><hr><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>与函数不同的是，方法是一种带有指定接收者的函数</li><li>虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样。即：只有对应的接收者才能够调用该函数</li><li>method里面可以访问接收者的字段</li><li>调用method通过<code>.</code>访问，就像struct里面访问字段一样</li></ul><hr><h4 id="interface-🛫"><a href="#interface-🛫" class="headerlink" title="interface 🛫"></a>interface 🛫</h4><ul><li><p>是一组<strong>方法组合</strong>，我们通过interface来定义对象的一组行为</p></li><li><p>interface就是一组抽象方法的集合，它必须由其他非interface类型实现，而不能自我实现</p></li></ul><h5 id="接口函数参数"><a href="#接口函数参数" class="headerlink" title="接口函数参数"></a>接口函数参数</h5><ul><li>interface的变量可以持有任意实现该interface类型的对象，通过定义interface参数，让函数接受各种类型的参数</li></ul><h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><ul><li><p>给实现者定义方法，方法与接口里面的签名（名称、参数、返回值）一样，就是实现了接口</p></li><li><p>接口的实现者必须是一个具体的类型，且必须实现了接口所有的方法才算是实现了接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">String</span><span class="params">()</span>  <span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"the name is %s,age is %d"</span>,p.name,p.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><h5 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h5><ul><li><p>goroutine是通过Go的runtime管理的一个线程管理器。goroutine通过<code>go</code>关键字实现了，其实就是一个普通的函数</p></li><li><p>说白了就是协程，运行在相同的地址空间、内存共享的，但是<strong>不要通过共享来通信，而要通过通信来共享</strong></p></li></ul><h5 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h5><ul><li>提供给goroutine作为数据通信的一种通信机制</li><li>非缓存类型，容量是0，不能存任何数据，只起传输作用，不做数据停留</li><li>使用内置的make直接声明即可，内置 close函数关闭</li><li>chan只有两个操作（发送和接收）</li></ul><p><strong>Buffered Channel</strong></p><ul><li>缓冲型Channel，类似可阻塞队列，允许指定缓冲大小，先进先出</li><li>通过make的函数的第二个函数即可指定容</li></ul><p><strong>单向 channel</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onlySend := make(chan&lt;- int)</span><br><span class="line">onlyReceive:=make(&lt;-chan int)</span><br></pre></td></tr></table></figure><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><ul><li>用于读取slice、map、channel数据</li></ul><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><ul><li>用于选择不同类型的通讯，监听Channel</li><li>设置超时</li></ul><hr><h4 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h4><h5 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">   sum <span class="keyword">int</span></span><br><span class="line">   mutex sync.Mutex <span class="comment">//声明互斥锁</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   mutex.Lock() <span class="comment">//加锁</span></span><br><span class="line">   sum += i</span><br><span class="line">   mutex.Unlock() <span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h5><ul><li>用以让代码只执行一次</li></ul><h5 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h5><ul><li>确保协程执行完毕后，及时退出</li></ul><h5 id="sync-RWMutex"><a href="#sync-RWMutex" class="headerlink" title="sync.RWMutex"></a>sync.RWMutex</h5><ul><li>解决资源竞争，提高性能</li></ul><hr><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><ul><li>作为一个并发安全的接口，具备手动、定时、超时发出取消信号、传值等功能，主要用于控制多个协程之间的协作；尤其是取消操作</li></ul><hr><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="变量逃逸分析"><a href="#变量逃逸分析" class="headerlink" title="变量逃逸分析"></a>变量逃逸分析</h5><ul><li>栈用于内存分配，栈的分配和回收速度非常快</li><li>堆分配内存和栈分配内存相比，堆适合不可预知大小的内存分配，但是为此付出的代价是分配速度较慢，而且会形成内存碎片</li><li>通过编译器分析代码特征何代码的生命周期，决定应该使用堆还是栈来进行内存分配</li><li>编译器觉得应该分配在堆和栈的原则是：<ul><li>变量是否被取地址</li><li>变量是否发生逃逸</li></ul></li></ul><h5 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h5><ul><li>map在并发情况下，只读是安全的，同时读写是线程不安全的。一般做法是加锁，但是性能不高。</li><li>1.9版本添加了<code>sync</code>包下的 <code>Map</code>，使用方法与常规的Map不一样，且没有提供获取map数量的方法.替代方法是在获取 sync.Map时遍历自行提取</li><li>sync.Map为了保证并发安全会有一些性能损失。因此在非并发的情况下，推荐使用常规map</li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android的第一个进程之init</title>
      <link href="/posts/36103/"/>
      <url>/posts/36103/</url>
      
        <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>Linux中第一个进程,进程号为<code>1</code></li><li>负责创建系统中的几个关键进程</li><li>提供了 property_service来管理Android系统属性</li></ul><h5 id="四个阶段"><a href="#四个阶段" class="headerlink" title="四个阶段"></a>四个阶段</h5><ul><li>early-init</li><li>init</li><li>early-boot</li><li>boot</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><h5 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h5><ul><li><p>动作是以命令流程命名的，有一个触发器决定动作是否发生 </p></li><li><p>配合触发器  <code>trigger</code>使用</p></li><li><p>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on &lt;trigger&gt;   ##触发条件</span><br><span class="line">     &lt;command1&gt;  ##执行命令</span><br><span class="line">     &lt;command2&gt;  ##可以同时执行多个命令</span><br></pre></td></tr></table></figure></li></ul><h5 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h5><ul><li><p><code>init.rc</code>中常规<strong>trigger</strong></p><table><thead><tr><th>trigger</th><th align="center">Description</th></tr></thead><tbody><tr><td>boot</td><td align="center">init程序启动后触发的第一个事件</td></tr><tr><td>&lt;name&gt;=&lt;value&gt;</td><td align="center">当属性&lt;name&gt; 满足&lt;value&gt;时触发</td></tr><tr><td>device-added/removed-&lt;patch&gt;</td><td align="center">当设备节点添加/删除时触发此事件</td></tr><tr><td>sevice-exited-&lt;name&gt;</td><td align="center">当指定服务&lt;name&gt; 存在时触发</td></tr></tbody></table><p><strong>init.rc中常见的Commands如下：</strong></p><table><thead><tr><th>Command</th><th align="center">Description</th></tr></thead><tbody><tr><td>exec &lt;:path&gt; [&lt;argument&gt;]*</td><td align="center">Fork 并执行一个程序，其路径为&lt;path&gt;。该命令将阻塞 直到该程序启动完成</td></tr><tr><td>export &lt;name&gt; &lt;value&gt;</td><td align="center">设置某个环境变量&lt;name&gt; 的值为&lt;value&gt;。对全局有效，之后的进程都将继承这个变量</td></tr><tr><td>ifup &lt;interface&gt;</td><td align="center">使网络接口&lt;interface&gt; 成功连接</td></tr><tr><td>import &lt;filename&gt;</td><td align="center">解析另一个配置文件&lt;filename&gt;，以扩展当前配置</td></tr><tr><td>chdir &lt;directory&gt;</td><td align="center">更换工作目录为&lt;directory&gt;</td></tr><tr><td>chmod &lt;octal-mode&gt; &lt;path&gt;</td><td align="center">更改文件访问权限</td></tr><tr><td>chown &lt;owner&gt; &lt;group&gt; &lt;path&gt;</td><td align="center">更改文件所有者和群组</td></tr><tr><td>mount &lt;type&gt; &lt;device&gt; &lt;dir&gt; [&lt;mountoption&gt;]*</td><td align="center">尝试在指定路径上挂载一个设备</td></tr><tr><td>start &lt;service&gt;</td><td align="center">启动一个服务，如果它没有处于运行状态的话</td></tr><tr><td>stop &lt;service&gt;</td><td align="center">停止一个服务，如果它当前处于运行状态的话</td></tr><tr><td>setprop &lt;name&gt; <value></td><td align="center">设置系统属性&lt;name&gt; 的值为 &lt;value&gt;</td></tr><tr><td>trigger &lt;event&gt;</td><td align="center">触发一个事件</td></tr></tbody></table></li></ul><h5 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h5><ul><li><p>是init进程启动的程序,当服务退出时init进程会视情况重启服务 </p></li><li><p>init生成的子进程，定义在rc文件，其中每一个service，在启动时会通过<a href="http://blog.csdn.net/jason314/article/details/5640969">fork</a>方式生成子进程 </p></li><li><p>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [ &lt;argument&gt; ]*</span><br><span class="line">        &lt;option&gt;</span><br><span class="line">        &lt;option&gt;</span><br></pre></td></tr></table></figure></li><li><p>参数</p><ul><li>name: 表示service 的名字；</li><li>pathname: 表示service所在路径，此处的service是可执行文件，所以一定有存储路径；</li><li>argument: 启动service所带的参数；</li><li>option: 对此service的约束选项；</li></ul></li></ul><h5 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h5><ul><li><p>init.rc 中可用的选项</p><table><thead><tr><th align="left">Option</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">on early-init</td><td align="left">设置init进程以及创建的子进程的优先级,设置init进程的安全环境</td></tr><tr><td align="left">on init</td><td align="left">设置全局环境,为cpu accounting创建cgroup(资源控制)挂载点</td></tr><tr><td align="left">on fs</td><td align="left">挂载mtd分区</td></tr><tr><td align="left">on post-fs</td><td align="left">改变系统目录的访问权限</td></tr><tr><td align="left">on post-fs-data</td><td align="left">改变/data目录及其子目录的访问权限</td></tr><tr><td align="left">on boot</td><td align="left">基本网络的初始化,内存管理等</td></tr><tr><td align="left">critical</td><td align="left">表明这是对设备至关重要的服务；如果它在四分钟内退出超过四次，则设备将进入Recovery 模式</td></tr><tr><td align="left">disabled</td><td align="left">表示此服务是不会自动启动，而是需要通过显示调用服务名来启动</td></tr><tr><td align="left">oneshot</td><td align="left">当次服务退出时，不要主动去重启它</td></tr><tr><td align="left">socket &lt;name&gt; &lt;type&gt; &lt;perm&gt; [&lt;user&gt; [&lt;group&gt;] ]</td><td align="left">创建一个名为dev/socket/&lt;name&gt;的 socket，然后将它的fd值传给启动它的进，有效的&lt;type&gt;值包括dgram,stream 和seqpacket。ueser 和group 的默认值为0。</td></tr><tr><td align="left">class &lt;name&gt;</td><td align="left">为该服务指定一个class 名。同一个class 的所有服务必须同时启动或者停止。默认情况下服务的class名是“default”</td></tr><tr><td align="left">service servicemanager</td><td align="left">启动系统管理器管理所有的本地服务,比如位置 音频 …</td></tr><tr><td align="left">service zygote</td><td align="left">启动zygote作为应用进程</td></tr><tr><td align="left">onrestart</td><td align="left">当次服务重启时，执行某些命令</td></tr><tr><td align="left">user &lt;username&gt;</td><td align="left">在启动服务前将用户切换至&lt;username&gt;,默认情况下用户都是root。</td></tr><tr><td align="left">group &lt;groupname&gt; [&lt;groupname&gt;]</td><td align="left">在启动服务前将用户组切换至&lt;groupname&gt;</td></tr></tbody></table></li></ul><h4 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h4><h5 id="引导zygote"><a href="#引导zygote" class="headerlink" title="引导zygote"></a>引导zygote</h5><ul><li><p>init.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_parse_config_file(<span class="string">"/init.rc"</span>);</span><br></pre></td></tr></table></figure></li><li><p>init.rc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># init.rc 中  import /init.$&#123;ro.zygote&#125;.rc -&gt;内容如下</span><br><span class="line"># 会先执行 init.rc 再执行 init.zygotexxx.</span><br><span class="line"># 此处 会执行 zygote的启动</span><br><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">    class main</span><br><span class="line">    // 代表创建一个 AF_STREAM类型的socket (即:TCP socket) 该socket名为 &quot;zygote&quot; 读写权限 666</span><br><span class="line">    socket zygote stream 660 root system  </span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br></pre></td></tr></table></figure></li></ul><h4 id="简单流程图示"><a href="#简单流程图示" class="headerlink" title="简单流程图示"></a>简单流程图示</h4><p><img src="init%E8%A7%A3%E6%9E%90services.png" alt=""></p><p><img src="init%E4%BA%8B%E4%BB%B6%E7%BB%93%E6%9E%84.jpg" alt=""></p><ul><li>解析返回的 list 会在 <code>init.c</code> 中 <code>execute_one_command</code>和<code>restart_processes</code>执行相关</li></ul><h4 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h4><ul><li>内核是怎么触发的 <code>init</code>进程</li><li>service_start()函数中是怎么创建的zygote进程<ul><li><code>init.c</code>的create_socket函数中的<strong>create_socket</strong>函数创建了<strong>socket</strong>（Zygote），之后执行了<strong>publish_socket</strong>函数</li></ul></li></ul><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.jianshu.com/p/4de52d8fb8aa">Android启动过程分析-从按下电源键到第一个用户进程</a></p><p><a href="https://blog.csdn.net/zhonglunshun/article/details/78615980">Android系统init进程启动及init.rc全解析</a></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC学习</title>
      <link href="/posts/10120/"/>
      <url>/posts/10120/</url>
      
        <content type="html"><![CDATA[<ul><li>在任何网络环境下都能够建立网络连接，交换会话信息后，由客户端直接点对点通讯</li></ul><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><h5 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a>P2P</h5><ul><li>Point to Point ,指数据的传输不再通过服务器，而是网络用户之间直接传递数据</li></ul><h5 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h5><ul><li><strong>Basic NAT（Network Address Translation）</strong><ul><li>内网IP地址和端口向外部发送请求时（例如Socket请求），NAT设备只转换IP地址，端口保持不变 （基本淘汰）</li></ul></li><li><strong>NAPT（Network Address/Port Translator）</strong><ul><li>内网IP地址和端口向外部发送请求时，NAT设备同时将IP和端口映射为外部IP地址和外部端口  （目前主流）</li><li><a href="https://www.ietf.org/rfc/rfc3489.txt">STUN 协议</a>  第五章有详细关于 <code>NAT的分类</code></li></ul></li></ul><h5 id="STUN"><a href="#STUN" class="headerlink" title="STUN"></a>STUN</h5><p><img src="STUN_Algorithm.jpg" alt=""></p><ul><li>Session Traversal Utilities for NAT，NAT会话穿越应用程序</li><li><a href="https://www.ietf.org/rfc/rfc3489.txt">STUN 协议</a></li><li>在应用中，采取了STUN方式实现了<strong>P2P</strong>,采用了辅助的方式探测NAT的IP和端口</li><li>探测和发现通讯对方是否躲在防火墙或者NAT路由器后面</li><li>确定内网客户端所暴露在外的广域网的IP和端口以及NAT类型等信息，STUN服务器利用这些信息协助不同内网的计算机之间建立点对点的UDP通讯 </li></ul><h5 id="TURN"><a href="#TURN" class="headerlink" title="TURN"></a>TURN</h5><ul><li>Traversal Using Relay NAT，通过中继穿透NAT</li><li>在复杂的NAT实现下，STUN无法穿透NAT，这时就要通过中继服务器来实现穿透</li><li>会占用大量的带宽资源</li></ul><h5 id="SDP"><a href="#SDP" class="headerlink" title="SDP"></a>SDP</h5><ul><li>SDP 完全是一种会话描述格式 ,它不属于传输协议,只使用不同的适当的传输协议</li><li><a href="https://www.cnblogs.com/idignew/p/7249056.html">SDP协议介绍</a></li></ul><h5 id="Signal-Server"><a href="#Signal-Server" class="headerlink" title="Signal Server"></a>Signal Server</h5><ul><li>给客户端之间传送彼此的SDP信息和candidate信息，客户端通过这些信息建立P2P连接来传送音视频数据</li></ul><hr><h4 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h4><p><img src="%E9%80%9A%E8%AE%AF%E6%B5%81%E7%A8%8B.png" alt=""></p><hr><h4 id="STUN-TURN"><a href="#STUN-TURN" class="headerlink" title="STUN/TURN"></a>STUN/TURN</h4><ul><li>暂未作处理</li></ul><hr><h4 id="实现Demo"><a href="#实现Demo" class="headerlink" title="实现Demo"></a>实现Demo</h4><p>客户端代码基于 <a href="https://github.com/flutter-webrtc/flutter-webrtc">flutter-webrtc</a>  及开源的后台源码，简单作了结合，以便后期拓展；</p><p>服务器端使用的是<code>PostgreSQL</code>，好友列表是固定的ID，需酌情修改。只做了视频通讯，在华为手机上挂断有出现资源未释放的问题</p><p><a href="https://gitee.com/wl960127/rtc_app">客户端</a></p><p><a href="https://gitee.com/wl960127/server">服务器端</a></p><hr><p><img src="%E6%9C%BA%E7%81%B5%E7%8C%AB.gif" alt=""></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.mamicode.com/info-detail-1907841.html">webrtcclient与TURN和信令server通讯流程图</a></p><p><a href="https://www.jzgwind.com/?p=973"><a href="https://www.jzgwind.com/?p=973">P2P网络节点间如何互访——详解STUN方式NAT穿透</a></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android线程池</title>
      <link href="/posts/63527/"/>
      <url>/posts/63527/</url>
      
        <content type="html"><![CDATA[<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>为了让线程在实际使用中，统一管理因为线程调度不统一而导致的各种频繁GC、资源竞争、甚至是内存泄漏问题</li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><h5 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h5><ul><li><p>一个类，只能被继承</p></li><li><p>run  在当前线程中运行</p></li><li><p>start 新建线程运行</p></li></ul><h5 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h5><ul><li>一个接口 资源可以共享</li></ul><h5 id="Callble"><a href="#Callble" class="headerlink" title="Callble"></a>Callble</h5><ul><li><p>一个接口，但是有返回值，而 run() 方法不行</p></li><li><p>可以抛出受检查的异常，而run()不能抛出</p></li><li><p>Callable 使用 call（） 方法， Runnable 使用 run() 方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     Callable&lt;String&gt; callable = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line">     Future&lt;String&gt; future = executor.submit(callable);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(future.get());  <span class="comment">//会输出 result</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h5 id="new-ThreadPoolExecutor"><a href="#new-ThreadPoolExecutor" class="headerlink" title="new ThreadPoolExecutor"></a>new ThreadPoolExecutor</h5><p><em>创建基本线程池</em></p><ul><li><p>corePoolSize：核心线程池的线程数量</p></li><li><p>maximumPoolSize：最大的线程池线程数量</p></li><li><p>keepAliveTime：线程活动保持时间，线程池的工作线程空闲后，保持存活的时间</p></li><li><p>unit：线程活动保持时间的单位</p></li><li><p>workQueue：指定任务队列所使用的阻塞队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="四大类"><a href="#四大类" class="headerlink" title="四大类"></a>四大类</h4><h5 id="Executors-newFixedThreadPool"><a href="#Executors-newFixedThreadPool" class="headerlink" title="Executors.newFixedThreadPool"></a>Executors.newFixedThreadPool</h5><p><em>可重复固定线程数</em></p><ul><li><p>参数为核心线程数，只有核心线程，无非核心线程，并且阻塞队列无界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Executors-newCachedThreadPool"><a href="#Executors-newCachedThreadPool" class="headerlink" title="Executors.newCachedThreadPool"></a><strong>Executors.newCachedThreadPool</strong></h5><p><em>按需求创建</em></p><ul><li><p>没有核心线程，只有非核心线程，并且每个非核心线程空闲等待的时间为60s，采用SynchronousQueue队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                     <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Executors-newSingleThreadExecutor"><a href="#Executors-newSingleThreadExecutor" class="headerlink" title="Executors.newSingleThreadExecutor"></a><strong>Executors.newSingleThreadExecutor</strong></h5><p><em>单核的Fix</em></p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">         (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                 <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                 <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Executors-newScheduledThreadPool"><a href="#Executors-newScheduledThreadPool" class="headerlink" title="Executors.newScheduledThreadPool"></a>Executors.newScheduledThreadPool</h5><p><em>定时延时执行</em></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h5><ul><li>底层：返回ThreadPoolExecutor实例，接收参数为所设定线程数量nThread，corePoolSize为nThread，maximumPoolSize为nThread；keepAliveTime为0L(不限时)；unit为：TimeUnit.MILLISECONDS；WorkQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列<br>通俗：创建可容纳固定数量线程的池子，每隔线程的存活时间是无限的，当池子满了就不再添加线程了；如果池中的所有线程均在繁忙状态，对于新任务会进入阻塞队列中(无界的阻塞队列)<br><strong>适用：执行长期的任务，性能好很多</strong></li></ul><h5 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h5><ul><li>底层：返回ThreadPoolExecutor实例，corePoolSize为0；maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为60L；unit为TimeUnit.SECONDS；workQueue为SynchronousQueue(同步队列)<br>通俗：当有新任务到来，则插入到SynchronousQueue中，由于SynchronousQueue是同步队列，因此会在池中寻找可用线程来执行，若有可以线程则执行，若没有可用线程则创建一个线程来执行该任务；若池中线程空闲时间超过指定大小，则该线程会被销毁。<br><strong>适用：执行很多短期异步的小程序或者负载较轻的服务器</strong></li></ul><h5 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h5><ul><li>底层：FinalizableDelegatedExecutorService包装的ThreadPoolExecutor实例，corePoolSize为1；maximumPoolSize为1；keepAliveTime为0L；unit为：TimeUnit.MILLISECONDS；workQueue为：new LinkedBlockingQueue<Runnable>() 无解阻塞队列<br>通俗：创建只有一个线程的线程池，且线程的存活时间是无限的；当该线程正繁忙时，对于新任务会进入阻塞队列中(无界的阻塞队列)<br><strong>适用：一个任务一个任务执行的场景</strong></li></ul><h5 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h5><ul><li>底层：创建ScheduledThreadPoolExecutor实例，corePoolSize为传递来的参数，maximumPoolSize为Integer.MAX_VALUE；keepAliveTime为0；unit为：TimeUnit.NANOSECONDS；workQueue为：new DelayedWorkQueue() 一个按超时时间升序排序的队列<br>通俗：创建一个固定大小的线程池，线程池内线程存活时间无限制，线程池可以支持定时及周期性任务执行，如果所有线程均处于繁忙状态，对于新任务会进入DelayedWorkQueue队列中，这是一种按照超时时间排序的队列结构<br><strong>适用：周期性执行任务的场景</strong></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li>shutDown()  关闭线程池，<strong>不影响已经提交的任务</strong></li><li>shutDownNow() 关闭线程池，并尝试去<strong>终止正在执行的线程</strong></li><li>allowCoreThreadTimeOut(boolean value) 允许核心线程闲置超时时被回收</li><li>submit 一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是<strong>submit有返回值</strong></li><li>beforeExecute() - 任务执行前执行的方法</li><li>afterExecute() -任务执行结束后执行的方法</li><li>terminated() -线程池关闭后执行的方法</li></ul><h4 id="参考出处🔗"><a href="#参考出处🔗" class="headerlink" title="参考出处🔗"></a>参考出处🔗</h4>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg基础学习</title>
      <link href="/posts/53823/"/>
      <url>/posts/53823/</url>
      
        <content type="html"><![CDATA[<h4 id="源码下操作"><a href="#源码下操作" class="headerlink" title="源码下操作"></a>源码下操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 展示可用信息</span></span><br><span class="line">./configure --help</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><ul><li><p>Ubuntu 18.04</p><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt  install -y autoconf automake build-essential git libass-dev libfreetype6-dev libsdl2-dev libtheora-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev pkg-config texinfo wget zlib1g-dev </span><br><span class="line"></span><br><span class="line">sudo apt  install -y nasm yasm cmake mercurial</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><ul><li><p>cd 进入源码目录</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-shared  --prefix=/usr/local/ffmpeg</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>可通过“–prefix=安装目录”进行修改。–enable-shared：指定生成动态库，默认是静态库。静态库不方便后续开发</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make </span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li></ul><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export FFMPEG_HOME=/usr/local/ffmpeg</span><br><span class="line">export PATH=$FFMPEG_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><ul><li><p>在/etc/ld.so.conf中 末尾添加 /usr/local/ffmpeg/lib </p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig   //即刷新链接</span><br></pre></td></tr></table></figure></li></ul><h4 id="FFmpeg包"><a href="#FFmpeg包" class="headerlink" title="FFmpeg包"></a>FFmpeg包</h4><p><img src="%E5%BC%80%E5%8F%91%E8%80%85api%E5%BA%93.jpg" alt="FFmpeg为开发人员提供的库"></p><h4 id="FFmpeg命令分类"><a href="#FFmpeg命令分类" class="headerlink" title="FFmpeg命令分类"></a>FFmpeg命令分类</h4><h5 id="基本信息查询"><a href="#基本信息查询" class="headerlink" title="基本信息查询"></a>基本信息查询</h5><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">-version</td><td align="center">显示版本</td><td align="center">-formats</td><td align="center">显示可用的格式</td></tr><tr><td align="center">-demuxers</td><td align="center">显示可用的demuxers</td><td align="center">-protocols</td><td align="center">显示可用的协议</td></tr><tr><td align="center">-muxers</td><td align="center">显示可用的muxers</td><td align="center">-filters</td><td align="center">显示可用的过滤器</td></tr><tr><td align="center">-devices</td><td align="center">显示可用的设备</td><td align="center">-pix_fmts</td><td align="center">显示可用的像素格式</td></tr><tr><td align="center">-codecs</td><td align="center">显示所有的编解码器</td><td align="center">-sample_fmts</td><td align="center">显示可用的采样格式</td></tr><tr><td align="center">-decoders</td><td align="center">显示可用的解码器</td><td align="center">-layouts</td><td align="center">显示channel的格式</td></tr><tr><td align="center">-encoders</td><td align="center">显示所有的编码器</td><td align="center">-color</td><td align="center">显示识别的颜色名称</td></tr><tr><td align="center">-bsfs</td><td align="center">显示比特流filter</td><td align="center"></td><td align="center"></td></tr></tbody></table><h5 id="裁剪与合并命令"><a href="#裁剪与合并命令" class="headerlink" title="裁剪与合并命令"></a>裁剪与合并命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i in.mp4 -ss 00:00:00 -t 10 out.ts</span><br></pre></td></tr></table></figure><ul><li>-ss 裁剪的时间节点 时：分：秒</li><li>-t 裁剪时间 秒</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpge -f concat -i input.txt out.flv</span><br></pre></td></tr></table></figure><ul><li>input.txt 需要裁剪的文件 格式为  file ‘filename’</li></ul><h5 id="录制命令"><a href="#录制命令" class="headerlink" title="录制命令"></a>录制命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f avfoundation -i 1 -r 30 out.yuv</span><br></pre></td></tr></table></figure><ul><li>-f ：指定使用 avfoundation 采集数据</li><li>-i ：指定从哪采集数据 1是屏幕 0是摄像头</li><li>-r：指定帧率</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -s 分辨率 out.yuv</span><br></pre></td></tr></table></figure><ul><li>播放 </li></ul><h5 id="图片-视频互转命令"><a href="#图片-视频互转命令" class="headerlink" title="图片/视频互转命令"></a>图片/视频互转命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i in.flv -r 1 -f image2 image-%3d.jpeg</span><br></pre></td></tr></table></figure><ul><li>-r 帧率  -r 1 即每秒转一张</li><li>-f image2  转为 image2  格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i image-3d.jpeg out.mp4</span><br></pre></td></tr></table></figure><ul><li>图片转视频</li></ul><h5 id="分解-复用命令"><a href="#分解-复用命令" class="headerlink" title="分解/复用命令"></a>分解/复用命令</h5><p><img src="%E5%88%86%E8%A7%A3%E4%B8%8E%E5%A4%8D%E7%94%A8.jpg" alt=""></p><ul><li><p>多媒体格式转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -vcodec copy -acodec copy out.flv</span><br></pre></td></tr></table></figure><ul><li>-i : 输入文件</li><li>-vcodec copy 视频编码不做处理 即copy</li><li>-acodec copy 音频编码不做处理 即copy</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -an -vcodec copy out.h264</span><br></pre></td></tr></table></figure><ul><li>抽取视频</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -acodec copy -vn out.aac</span><br></pre></td></tr></table></figure><ul><li>抽取音频</li></ul></li></ul><h5 id="直播相关命令"><a href="#直播相关命令" class="headerlink" title="直播相关命令"></a>直播相关命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i out.mp4 -c copy -f flv rtmp://server:port/live/streamName</span><br></pre></td></tr></table></figure><ul><li>直播推流<ul><li>-re 按照时间戳推流</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i rtmp://server:port/live/streamName -c copy dump.flv</span><br></pre></td></tr></table></figure><ul><li>直播拉流</li></ul><h5 id="处理原始数据命令"><a href="#处理原始数据命令" class="headerlink" title="处理原始数据命令"></a>处理原始数据命令</h5><ul><li>原始数据 （FFmpeg 解码后数据 音频就是PCM  视频就是YUV）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -an -c:v rawvideo -pix_fmts yuv420p out.yuv</span><br></pre></td></tr></table></figure><ul><li>处理出视频<ul><li>-an  a: audio  n：no  （即：不包括音频）</li><li>-c:v 对视频编码   rawvideo 格式</li><li>-pix_fmt 指定像素格式   yuv420p</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -vn -ar 44100 -ac2 -f s16le out.pcm</span><br></pre></td></tr></table></figure><ul><li>处理音频<ul><li>-vn  video no</li><li>-ar  audio rate 44.1k 采样率  （16k/32k/48k 常用）</li><li>-ac2 audio channel 双声道</li><li>-f  抽取的音频存储格式  format</li><li>s : 有符号  16  ：每一个数值用16位标识  le  ：latter end ？？？</li></ul></li></ul><h5 id="各种滤镜命令"><a href="#各种滤镜命令" class="headerlink" title="各种滤镜命令"></a>各种滤镜命令</h5><p><img src="%E6%BB%A4%E9%95%9C%E6%B5%81%E7%A8%8B.jpg" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i in.mov -vf crop=in_w-200:in_h-200</span><br><span class="line">-c:v libx264 -c:a copy out.mp4</span><br></pre></td></tr></table></figure><ul><li><p>vf crop 视频滤镜为 crop </p></li><li><p>in_w-200:in_h-200  宽高各减200</p></li><li><p>-c:v libx264  视频编码器为libx264 </p><ul><li>-c  或者 codec    [：stream_specifier]编解码器（输入/输出，每个流)</li></ul></li></ul><h4 id="FFmpeg处理流程"><a href="#FFmpeg处理流程" class="headerlink" title="FFmpeg处理流程"></a>FFmpeg处理流程</h4><p><img src="%E5%A4%84%E7%90%86%E9%9F%B3%E8%A7%86%E9%A2%91%E6%B5%81%E7%A8%8B.jpg" alt=" "></p><h4 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h4><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/15811977">FFMPEG视音频编解码零基础学习方法</a> 感恩雷神 🌲 比较详细和系统的入门资料，留着以后慢慢探索</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插件化简单学习笔记</title>
      <link href="/posts/16653/"/>
      <url>/posts/16653/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>热修复 （热更新）</li><li>增量更新<ul><li>生成差异包，进行合成 （ 搜索：版本迭代之BSDiff）</li></ul></li><li>插件化<ul><li>把需要的功能或业务当作独立独立模块取出来，涉及到：动态代理、ClassLoader以及资源加载</li></ul></li></ul><h4 id="三个基础问题"><a href="#三个基础问题" class="headerlink" title="三个基础问题"></a>三个基础问题</h4><h5 id="资源访问"><a href="#资源访问" class="headerlink" title="资源访问"></a>资源访问</h5><ul><li>AssetManager</li></ul><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><ul><li>反射、接口模式</li></ul><h5 id="DexClassLoader管理"><a href="#DexClassLoader管理" class="headerlink" title="DexClassLoader管理"></a>DexClassLoader管理</h5><ul><li>创建DexClassLoader加载插件化代码</li></ul><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>​         主APP打包，会生成 <code>dex</code>、<code>images</code> 、<code>xml</code>资源，<code>dex</code>靠ClassLoader加载，<code>图片及xml</code>靠Resourece加载。Android的ClassLoader机制主要用来加载dex文件，系统提供了<code>PathClassLoader</code>和<code>DexClassLoader</code>，但是前者只能加载到已经安装到Android系统的APK文件，因此不符合插件化的考虑，而后者支持加载外部的APK、Jar或者dex文件，所以<strong>所有的的插件方案都是使用DexClassLoader来加载APK中的.Class文件</strong>。</p><ul><li>获取主APP的上下文，得到 <code>PackageInfo</code>，从而创建<code>DexClassLoader</code>、<code>AssetManager</code>、<code>Resource</code></li><li>跳转至<code>ProxyActivity</code>(即：代理Activity)，继承自 Activity<ul><li>获取最终跳转的完整路径</li><li>通过<code>DexClassLoad</code>加载类名　　　　</li></ul></li></ul><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p><img src="%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.jpg" alt=""></p><ul><li><code>主APP</code>和<code>加载APK</code>两个项目都需要<strong>依赖</strong><code>实现lib</code></li></ul><h5 id="生命周期管理-IPlugin"><a href="#生命周期管理-IPlugin" class="headerlink" title="生命周期管理 IPlugin"></a>生命周期管理 IPlugin</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPlugin</span> </span>&#123;  <span class="comment">//生命周期管理,让代理去使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> FROM_INTERNAL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> FROM_EXTERNAL = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Activity proxyActivity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="封装需要的功能类-PluginApk"><a href="#封装需要的功能类-PluginApk" class="headerlink" title="封装需要的功能类 PluginApk"></a>封装需要的功能类 PluginApk</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginApk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插件apk的实体类</span></span><br><span class="line">    <span class="keyword">public</span> PackageInfo mPackageInfo;</span><br><span class="line">    <span class="keyword">public</span> Resources mResources;</span><br><span class="line">    <span class="keyword">public</span> AssetManager mAssetManager;</span><br><span class="line">    <span class="keyword">public</span> DexClassLoader mDexClassLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginApk</span><span class="params">(PackageInfo packageInfo, Resources resources, DexClassLoader dexClassLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mPackageInfo = packageInfo;</span><br><span class="line">        <span class="keyword">this</span>.mResources = resources;</span><br><span class="line">        mAssetManager = resources.getAssets();</span><br><span class="line">        <span class="keyword">this</span>.mDexClassLoader = dexClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="资源加载及类加载-PluginManager"><a href="#资源加载及类加载-PluginManager" class="headerlink" title="资源加载及类加载 PluginManager"></a>资源加载及类加载 PluginManager</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PluginManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> PluginManager instance = <span class="keyword">new</span> PluginManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PluginManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PluginApk mPluginApk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PluginApk <span class="title">getPluginApk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPluginApk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载apk文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadApk</span><span class="params">(String apkPath)</span> </span>&#123;</span><br><span class="line">        PackageInfo packageInfo = mContext.getPackageManager().getPackageArchiveInfo(apkPath, PackageManager.GET_ACTIVITIES | PackageManager.GET_SERVICES);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == packageInfo) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DexClassLoader dexClassLoader = createDexClassLoader(apkPath);</span><br><span class="line">        AssetManager am = createAssetManager(apkPath);</span><br><span class="line">        Resources resources = createResource(am);</span><br><span class="line"></span><br><span class="line">        mPluginApk = <span class="keyword">new</span> PluginApk(packageInfo, resources, dexClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Resources <span class="title">createResource</span><span class="params">(AssetManager am)</span> </span>&#123;</span><br><span class="line">        Resources res = mContext.getResources();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Resources(am, res.getDisplayMetrics(), res.getConfiguration());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AssetManager <span class="title">createAssetManager</span><span class="params">(String apkPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AssetManager am = AssetManager<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line"><span class="comment">//            Method method = am.getClass().getMethod("addAssetPath", String.class);</span></span><br><span class="line">            Method method = AssetManager.class.getDeclaredMethod("addAssetPath", String.class);</span><br><span class="line">            method.invoke(am, apkPath);</span><br><span class="line">            <span class="keyword">return</span> am;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DexClassLoader <span class="title">createDexClassLoader</span><span class="params">(String apkPath)</span> </span>&#123;</span><br><span class="line">        File file = mContext.getDir(<span class="string">"dex"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DexClassLoader(apkPath, file.getAbsolutePath(), <span class="keyword">null</span></span><br><span class="line">                , mContext.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理类-ProxyActivity"><a href="#代理类-ProxyActivity" class="headerlink" title="代理类 ProxyActivity"></a>代理类 ProxyActivity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  <span class="comment">//代理activity 管理插件activity生命周期</span></span><br><span class="line">    <span class="keyword">private</span> String mClassName;</span><br><span class="line">    <span class="keyword">private</span> PluginApk mPluginApk;</span><br><span class="line">    <span class="keyword">private</span> IPlugin mIPlugin;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">//拿到需要启动的Activity</span></span><br><span class="line">        mClassName = getIntent().getStringExtra(<span class="string">"className"</span>);</span><br><span class="line">        mPluginApk = PluginManager.getInstance().getPluginApk();</span><br><span class="line">        launchPluginActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">launchPluginActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mPluginApk) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"load your apk file first "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//加载该Activity的字节码对象</span></span><br><span class="line">                Class&lt;?&gt; clazz = mPluginApk.mDexClassLoader.loadClass(mClassName);</span><br><span class="line">                <span class="comment">//创建该Activity的示例</span></span><br><span class="line">                Object o = clazz.newInstance();</span><br><span class="line">                <span class="comment">//程序健壮性检查</span></span><br><span class="line">                <span class="keyword">if</span> (o <span class="keyword">instanceof</span> IPlugin) &#123;</span><br><span class="line">                    mIPlugin = (IPlugin) o;</span><br><span class="line">                    <span class="comment">//将代理Activity的实例传递给三方Activity</span></span><br><span class="line">                    mIPlugin.attach(<span class="keyword">this</span>);</span><br><span class="line">                    <span class="comment">//创建bundle用来与三方apk传输数据</span></span><br><span class="line">                    Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                    bundle.putInt(<span class="string">"FROM"</span>, IPlugin.FROM_EXTERNAL);</span><br><span class="line">                    <span class="comment">//调用三方Activity的onCreate，</span></span><br><span class="line">                    mIPlugin.onCreate(bundle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> != mPluginApk ? mPluginApk.mResources : <span class="keyword">super</span>.getResources();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AssetManager <span class="title">getAssets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> != mPluginApk ? mPluginApk.mAssetManager : <span class="keyword">super</span>.getAssets();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> != mPluginApk ? mPluginApk.mDexClassLoader : <span class="keyword">super</span>.getClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插件Activity"><a href="#插件Activity" class="headerlink" title="插件Activity"></a>插件Activity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">IPlugin</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mFrom = FROM_INTERNAL;</span><br><span class="line">    <span class="keyword">private</span> Activity mProxyActivity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Activity proxyActivity)</span> </span>&#123;</span><br><span class="line">        mProxyActivity = proxyActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != saveInstanceState) &#123;</span><br><span class="line">            mFrom = saveInstanceState.getInt(<span class="string">"FROM"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogUtils.e(<span class="string">"null = saveInstanceState"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onCreate(saveInstanceState);</span><br><span class="line">            mProxyActivity = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onRestart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onResume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onPause();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onStop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFrom == FROM_INTERNAL) &#123;</span><br><span class="line">            <span class="keyword">super</span>.setContentView(layoutId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mProxyActivity.setContentView(layoutId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主APP操作"><a href="#主APP操作" class="headerlink" title="主APP操作"></a>主APP操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化，获取到上下文</span></span><br><span class="line">      PluginManager.getInstance().init(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      findViewById(R.id.load).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">//模拟下载</span></span><br><span class="line">                  String filePath = Utils.copyAssetAndWrite(MainActivity.<span class="keyword">this</span>, <span class="string">"aa.apk"</span>);</span><br><span class="line">                  <span class="comment">//加载插件apk</span></span><br><span class="line">                  PluginManager.getInstance().loadApk(filePath);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      findViewById(R.id.jump).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//代理跳转</span></span><br><span class="line">              Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">              intent.setClass(MainActivity.<span class="keyword">this</span>, ProxyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">              intent.putExtra(<span class="string">"className"</span>, <span class="string">"com.wl.nepluginapk.NePluginActivity"</span>);</span><br><span class="line">              startActivity(intent);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt=""></p><h4 id="案例代码传送门"><a href="#案例代码传送门" class="headerlink" title="案例代码传送门"></a><a href="https://github.com/wuhansan/Plugin">案例代码传送门</a></h4><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li>插件APK的Activity要继承插件Activity,即文中的 <code>PluginActivity</code></li><li>主APP的清单文件需要注册代理Activity,即文中的 <code>ProxyActivity</code></li></ul><h4 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h4><ul><li><a href="https://www.jianshu.com/p/a4ab102fa4ac">Android插件化之动态加载APK实现</a></li><li>Android开发艺术探索</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM简单学习</title>
      <link href="/posts/52221/"/>
      <url>/posts/52221/</url>
      
        <content type="html"><![CDATA[<h4 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h4><ul><li>JAVA虚拟机使用来存放各式各样的数据的内存区域叫做<code>运行时数据区</code>，分为<ul><li>线程私有：运行时数据区在线程创建线程时候创建，线程退出时候销毁     </li><li>多线程共享：运行时数据区在Java虚拟机启动时创建好，退出时侯销毁</li></ul></li></ul><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><p>jvm在运行过程中讲所管理的内存划分为若干n个不同数据区域</p><p><img src="%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt=""></p><h5 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h5><p> 每个线程都有独立的空间，随线程生命周期而创建而销毁</p><ul><li><p>程序计数器（pc寄存器，指向当前线程正在执行的字节码指令的地址（行号））</p><ul><li>存在的意义<ul><li>java是多线程的，意味着线程切换</li><li>确保多线程情况下的程序正常运行</li></ul></li></ul></li><li><p>本地方法栈</p><ul><li>和虚拟机栈功能相似，虚拟机栈是为了虚拟机执行JAVA方法准备的，而本地方法是为了虚拟机使用native本地方法而准备的</li></ul></li><li><p>虚拟机栈 </p><ul><li>栈帧 （类中每一个方法对应一个栈帧）保存的数据<ul><li>局部变量表</li><li>操作数栈</li><li>动态连接</li><li>返回地址</li></ul></li></ul><p>存贮当前线程运行方法所需要的数据、指令、 返回地址，由栈帧构成。线程中方法执行的模型，每个方法执行时候，就会在虚拟机栈中创建一个栈帧，每个方法从调用到执行的过程，就对应着栈帧在虚拟机栈中从入栈到出栈的过程</p></li></ul><h5 id="线程共享"><a href="#线程共享" class="headerlink" title="线程共享"></a>线程共享</h5><p> 所有的线程都能访问它独立的空间，随线程生命周期而创建和销毁</p><ul><li><p>堆 </p><ul><li>对象实例</li><li>数组</li></ul><p>唯一的作用就是存放对象实例，几乎所有的对象、数组都在这里存放。对于大多数应用而言，堆是JVM管理得内存中最大的一块内存区域，也是最容易OOM的区域。大多数JVM的堆大小都是可拓展的</p></li><li><p>方法区 （静态存储区）</p><ul><li>类信息</li><li>常量</li><li>静态变量</li><li>即时编译期编译后的代码 （动态 运行时编译）</li></ul><p>方法区存在垃圾回收，但是回收效率低；回收主要针对常量池的回收以及类型的卸载，如果方法区无法满足内存需求的时候，报OOM。在虚拟机启动的时候创建</p></li><li><p>总而言之：多线程共享的内存区域主要存放两类数据：类数据和类实例<br>  （也就是对象）。对象数据存放在<code>堆</code>（Heap）中，类数据存放在<code>方法区</code><br>  （Method Area）中。堆由垃圾收集器定期清理，所以程序员不需要关<br>  心对象空间的释放。类数据包括字段和方法信息、方法的字节码、<br>  运行时常量池，等等。从逻辑上来讲，方法区其实也是堆的一部<br>  分  </p></li><li><p>JVM线程私有区域异常</p><ul><li>StackOverFlowEror<ul><li>执行的虚拟机栈深度大于虚拟机允许的最大深度（方法的递归调用）</li></ul></li></ul></li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p> 局部变量的基本数据类型和引用存储于栈中，引用的对象实体存储于堆中。因为它们属于方法中的变量，生命周期随方法而结束。</p><p>成员变量全部存储与堆中（包括基本数据类型，引用和引用的对象实体）。因为它们属于类，类对象终究是要被new出来使用的。</p><p><a href="https://www.e-learn.cn/content/java/2365016">Java中堆区 | 栈区 | 方法区</a></p><h4 id="回收模块"><a href="#回收模块" class="headerlink" title="回收模块"></a>回收模块</h4><ul><li><p><img src="jvm%E6%A8%A1%E5%9E%8B.jpg" alt=""></p><ul><li>对象是有生命周期</li></ul></li></ul><h5 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h5><ul><li><code>引用计数算法</code>  （引用就加一，释放就减一，为零则释放，所以要避免互相引用，造成死循环）JVM能解决回收问题，所以不是采用的引用计数法</li><li><code>可达性分析算法</code> 采取GC Root方式，目前虚拟机采取的大多是这个</li><li><code>标记清除算法</code>  （垃圾回收最基础的算法 ）<ul><li>所有对象分配完成之后，遍历一次。将垃圾对象标记之后，将其清除</li><li>标记和清除都需要遍历对象，效率并不高</li><li>碎片化严重，清除的垃圾对象内存不连贯。虽然操作系统会将空间做分散分配，但是实际上存储的是连在一块的，造成反而需要一个额外的管理开销，造成下一次内存管理分配成本很高</li></ul></li><li><code>复制算法</code><ul><li>一定程度上解决了标记清除算法的碎片化问题</li><li>理念是将内存分成两部分，留一部分内存做备用（暂不分配）。将已经分配的内存中的存活对象连贯性的拷贝到之前做备用的内存中，这样就不会存在碎片化。接着将最开始分配的内存全部做回收，这样保持始终有一部分内存可以做备用（暂不分配）。第二次回收的时候，再继续按照之前的操作，依次循环。</li><li>内存的利用率变低，必须要有额外的内存做备用</li><li>因为拷贝对象很消耗性能，如果回收得对象比较少，相当于做了很多无效操作</li><li>只适用于垃圾比较多的情况</li></ul></li><li><code>标记整理算法</code> （结合了标记清除和复制算法优点的优化算法 ）  <ul><li>即标记出来垃圾对象，回收之后将后面的存活对象复制，从而避免碎片化。相对而言效率会高很多。</li></ul></li></ul><h5 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h5><ul><li><code>Garbage Collector</code>实际上是垃圾回收器需要回收的对象</li><li>Java中，可以做GC Roots的对象包括<ul><li>虚拟机栈（本地变量表）中引用的对象</li><li>方法区 类静态属性引用的对象</li><li>方法区 常量引用的对象</li></ul></li></ul><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li>jvm与dalvik的区别<ul><li>jvm是基于栈，dalvik虚拟机是基于寄存器</li></ul></li><li>JVM常见问题处理方式<ul><li>保存堆栈快照日志</li><li>分析内存泄漏</li><li>调整内存设置</li><li>控制垃圾回收频率</li><li>选择合适的垃圾回收器n</li></ul></li></ul><h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><ul><li><img src="JVM%E5%AD%A6%E4%B9%A0.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易笔记之组件化简单学习</title>
      <link href="/posts/23430/"/>
      <url>/posts/23430/</url>
      
        <content type="html"><![CDATA[<h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>​    简单而言，就是一种，对各个组件可以区分，也可以相互独立也可以相互组合的一种开发方式。一定形式上做到低耦合。第二份工作的时候，ios同事跟我说想要一种开发方式：功能模块写好了，后台传递数据指定加载模块。当我看到这个开发形势的时候真的觉得：只要有人想得到，就会有人做得到。啊哈哈 🐶</p><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="%E7%BB%84%E4%BB%B6.png" alt=""></p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><h5 id="搭建BaseLib"><a href="#搭建BaseLib" class="headerlink" title="搭建BaseLib"></a>搭建BaseLib</h5><ul><li>新建一个基础library或者说公共component</li></ul><h5 id="新建功能Module"><a href="#新建功能Module" class="headerlink" title="新建功能Module"></a>新建功能Module</h5><ul><li>module对应的<code>build.gradle</code>配置<code>BaseLibrary</code>的<code>implementation</code>依赖</li></ul><h5 id="总体如下"><a href="#总体如下" class="headerlink" title="总体如下"></a>总体如下</h5><p><img src="%E7%BB%93%E6%9E%84.jpg" alt=""></p><h5 id="配置项目的gradle-properties"><a href="#配置项目的gradle-properties" class="headerlink" title="配置项目的gradle.properties"></a>配置项目的gradle.properties</h5><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># org.gradle.parallel=true</span><br><span class="line"></span><br><span class="line">#全局配置gradle环境,统一配置</span><br><span class="line">min_Sdk_Version=15</span><br><span class="line">target_Sdk_Version=28</span><br><span class="line">compile_Sdk_Version=28</span><br><span class="line"></span><br><span class="line">#配置某个组件是否可独立运行</span><br><span class="line">loginRunAlon = false</span><br><span class="line">mineRunAlon = false</span><br></pre></td></tr></table></figure></li></ul><h5 id="功能module的build-gradle"><a href="#功能module的build-gradle" class="headerlink" title="功能module的build.gradle"></a>功能module的build.gradle</h5><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">if (loginRunAlon.toBoolean()) &#123;</span><br><span class="line">    apply plugin: &apos;com.android.application&apos;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    apply plugin: &apos;com.android.library&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion compile_Sdk_Version.toInteger()</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        if (loginRunAlon.toBoolean()) &#123;</span><br><span class="line">            applicationId &quot;com.yfsd.wl.logincomponent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        minSdkVersion min_Sdk_Version.toInteger()</span><br><span class="line">        targetSdkVersion target_Sdk_Version.toInteger()</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android-optimize.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            //独立运行与集成调试时候使用不同的AndroidManifest.xml文件</span><br><span class="line">            if (loginRunAlon.toBoolean()) &#123;</span><br><span class="line">                manifest.srcFile &apos;src/main/module/AndroidManifest.xml&apos;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                manifest.srcFile &apos;src/main/AndroidManifest.xml&apos;</span><br><span class="line">                //集成开发模式下排除debug文件夹中的所有Java文件</span><br><span class="line">//                java &#123;</span><br><span class="line">//                    exclude &apos;debug/**&apos;</span><br><span class="line">//                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</span><br><span class="line">    implementation &apos;com.android.support:appcompat-v7:28.0.0&apos;</span><br><span class="line">    implementation &apos;com.android.support.constraint:constraint-layout:1.1.3&apos;</span><br><span class="line">//    compile project(path: &apos;:componentlib&apos;)</span><br><span class="line">//    if (loginRunAlon.toBoolean()) &#123;</span><br><span class="line">        implementation project(&apos;:componentlib&apos;)</span><br><span class="line">//    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>通讯方面看了下，基本都是推荐使用 <a href="https://github.com/alibaba/ARouter">ARouter</a></li><li>组件开发，有利有弊。可能只有到使用的时候才知道坑在哪</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能实现 </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EMQX部署在Window系统</title>
      <link href="/posts/108/"/>
      <url>/posts/108/</url>
      
        <content type="html"><![CDATA[<h4 id="EMQX"><a href="#EMQX" class="headerlink" title="EMQX"></a>EMQX</h4><ul><li><p>百万级一站式物联网消息服务平台</p></li><li><p><a href="http://www.emqtt.com/products">产品官网</a></p></li><li><p><a href="http://docs.emqtt.cn/zh_CN/latest/index.html">使用说明文档</a></p></li></ul><hr><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="EMQX-1"><a href="#EMQX-1" class="headerlink" title="EMQX"></a>EMQX</h5><ul><li>打开 PowerShell窗口，建议是使用管理员模式</li><li><a href="http://docs.emqtt.cn/zh_CN/latest/install.html#windows">window配置参考</a></li><li>打开网页控制台<ul><li>localhost:18083</li><li>用户名: admin</li><li>密码：public</li></ul></li></ul><p><img src="emqx.jpg" alt=""></p><hr><h5 id="MQTT-BOX"><a href="#MQTT-BOX" class="headerlink" title="MQTT-BOX"></a>MQTT-BOX</h5><ul><li><p><a href="http://workswithweb.com/html/mqttbox/downloads.html">下载链接</a></p></li><li><p>创建客户端，如果是本地服务器<strong>记得关闭防火墙</strong></p><p><img src="mqtt%E5%88%9B%E5%BB%BA.jpg" alt=""></p><p><img src="mqtt%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.jpg" alt=""></p></li></ul><hr><h4 id="TOPIC监听"><a href="#TOPIC监听" class="headerlink" title="TOPIC监听"></a>TOPIC监听</h4><h5 id="服务器主题"><a href="#服务器主题" class="headerlink" title="服务器主题"></a>服务器主题</h5><ul><li><p>监听服务器的主题，而非自己创建的，需要监听服务器主题失败，那么需要在对应的文件安装目录的*<em>etc目etc/acl.conf *</em>下修改默认访问规则</p></li><li><p><a href="http://docs.emqtt.cn/zh_CN/latest/config.html#acl">匿名认证与 ACL 文件</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 允许<span class="string">'dashboard'</span>用户订阅 <span class="string">'$SYS/#'</span></span><br><span class="line">&#123;allow, &#123;user, <span class="string">"dashboard"</span>&#125;, subscribe, [<span class="string">"<span class="variable">$SYS</span>/#"</span>]&#125;.</span><br><span class="line"></span><br><span class="line">%% 允许本机用户发布订阅全部主题</span><br><span class="line">&#123;allow, &#123;ipaddr, <span class="string">"127.0.0.1"</span>&#125;, pubsub, [<span class="string">"<span class="variable">$SYS</span>/#"</span>, <span class="string">"#"</span>]&#125;.</span><br><span class="line"></span><br><span class="line">%% 拒绝用户订阅<span class="string">'$SYS#'</span>与<span class="string">'#'</span>主题  </span><br><span class="line">%%  把deny 改为 allow即可</span><br><span class="line">&#123;deny, all, subscribe, [<span class="string">"<span class="variable">$SYS</span>/#"</span>, &#123;eq, <span class="string">"#"</span>&#125;]&#125;.</span><br><span class="line"></span><br><span class="line">%% 上述规则无匹配，允许</span><br><span class="line">&#123;allow, all&#125;.</span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/qhdcsj/article/details/44630201">订阅服务器状态各主题</a></p></li><li><p><a href="http://docs.emqtt.cn/zh_CN/latest/config.html#modules">关于上下线监听</a></p><ul><li><p>EMQ X Broker 上下线状态主题：</p><p>上线主题：$SYS/brokers/节点/clients/客户端id/connected</p><p>下线主题：$SYS/brokers/节点/clients/客户端id/disconnected</p><p>1）<node>、<clientid> 可分别指定具体节点名、设备ClientID</p><p><img src="%E8%8A%82%E7%82%B9.jpg" alt=""></p><p>2）支持’+’、‘#’通配符</p><p> <code>+</code>是后面单个二级话题</p><p><code>#</code>是通配后面所有次级话题</p></li></ul></li><li><p>修改了配置一定要<strong>重启EMQX服务器</strong></p></li></ul><hr><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p><a href="https://wuhansan.github.io/2018/08/15/MQTT%E5%9C%A8Android%E7%9A%84%E4%BD%BF%E7%94%A8/">MQTT在Android的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本迭代核心技术之BSDiff</title>
      <link href="/posts/f69a5f5e/"/>
      <url>/posts/f69a5f5e/</url>
      
        <content type="html"><![CDATA[<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="window"><a href="#window" class="headerlink" title="window"></a>window</h5><ul><li><p><a href="https://github.com/cnSchwarzer/bsdiff-win/releases">bsdiff-win下载</a></p><ul><li><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bsdiff.exe old.apk new.apk patchFileName</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://fossies.org/linux/misc/bzip2-1.0.6.tar.gz/">bzip2</a></p><ul><li>bspatch.c 做合成</li><li>bsdiff.c  作区分</li></ul></li></ul><hr><h4 id="新建JNI项目实现"><a href="#新建JNI项目实现" class="headerlink" title="新建JNI项目实现"></a>新建JNI项目实现</h4><h5 id="导入c文件"><a href="#导入c文件" class="headerlink" title="导入c文件"></a>导入c文件</h5><ul><li><p>拷贝bspatch.c文件到cpp目录下</p></li><li><p>将bzip2-1.0.6中<strong>Makefile</strong>中所列出来的.c文件拷贝到项目对应的新建目录</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OBJS= blocksort.o  \</span><br><span class="line">      huffman.o    \</span><br><span class="line">      crctable.o   \</span><br><span class="line">      randtable.o  \</span><br><span class="line">      compress.o   \</span><br><span class="line">      decompress.o \</span><br><span class="line">      bzlib.o</span><br></pre></td></tr></table></figure><ul><li><img src="c%E6%96%87%E4%BB%B6.jpg" alt=""></li></ul></li></ul><h5 id="Java文件"><a href="#Java文件" class="headerlink" title="Java文件"></a>Java文件</h5>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建jni方法，alt+enter 在native-lib.cpp生成  c语言方法体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">bsPatch</span><span class="params">(String oldApk, String patch ,String output)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="修改c文件"><a href="#修改c文件" class="headerlink" title="修改c文件"></a>修改c文件</h5><ul><li><p>修改bspatch.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bzip/bzlib.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include "bzip/bzlib.h" //as版本》3.1 应该是这样</span></span><br><span class="line">....</span><br><span class="line"><span class="comment">//将main修改为p_main 为了避免其他的有类似方法，并在native-lib.cpp中声明出来</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">p_main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>native-lib.cpp 修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//重新声明bspatch.c的main</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">extern</span>  <span class="keyword">int</span> <span class="title">p_main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_yfsd_wl_mybsdiff_MainActivity_bsPatch(JNIEnv *env, jobject instance, jstring oldApk_,</span><br><span class="line">                                               jstring patch_, jstring output_) &#123;</span><br><span class="line">    <span class="comment">//将java字符串转为c/c++ 的字符串  或者说 转换为utf-8的char指针</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *oldApk = env-&gt;GetStringUTFChars(oldApk_, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *patch = env-&gt;GetStringUTFChars(patch_, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output = env-&gt;GetStringUTFChars(output_, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//bspatch oldfile newfile patchfile</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *argv[] = &#123;<span class="string">""</span>,oldApk,output,patch&#125;;</span><br><span class="line">    p_main(<span class="number">4</span>, (<span class="keyword">char</span> **)argv);<span class="comment">//3.1需要强转   p_main(4,argv)</span></span><br><span class="line">    <span class="comment">// 释放只想unicode格式的char指针</span></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(oldApk_, oldApk);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(patch_, patch);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="CMakeList-txt修改"><a href="#CMakeList-txt修改" class="headerlink" title="CMakeList.txt修改"></a>CMakeList.txt修改</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"><span class="comment"># 查找指定目录的.c文件 并将其设置为变量 bzip_source  新版本CMAKEList.txt 在cpp目录下</span></span><br><span class="line">file(GLOB bzip_source $&#123;CMAKE_SOURCE_DIR&#125;/bzip/*.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置本地动态库 编译生成动态库</span></span><br><span class="line">add_library( <span class="comment"># Sets the name of the library.</span></span><br><span class="line">        native-lib</span><br><span class="line">        <span class="comment"># Sets the library as a shared library.</span></span><br><span class="line">        SHARED</span><br><span class="line">        <span class="comment"># Provides a relative path to your source file(s).</span></span><br><span class="line">        native-lib.cpp</span><br><span class="line">        <span class="comment"># 添加文件</span></span><br><span class="line">        bspatch.c</span><br><span class="line">        $&#123;bzip_source&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找·系统库</span></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">        log-lib</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">        <span class="comment"># you want CMake to locate.</span></span><br><span class="line">        log)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要链接或者编译的库</span></span><br><span class="line">target_link_libraries( <span class="comment"># Specifies the target library.</span></span><br><span class="line">        native-lib</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Links the target library to the log library</span></span><br><span class="line">        <span class="comment"># included in the NDK.</span></span><br><span class="line">        $&#123;log-lib&#125;)</span><br></pre></td></tr></table></figure><h5 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;</span><br><span class="line">          cppFlags &quot;&quot;</span><br><span class="line">          //添加cpu架构</span><br><span class="line">          abiFilters &quot;armeabi-v7a&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="（🤣下面是失败案例，不要看了）"><a href="#（🤣下面是失败案例，不要看了）" class="headerlink" title="（🤣下面是失败案例，不要看了）"></a>（🤣下面是失败案例，不要看了）</h4><h4 id="手动生成JNI实现"><a href="#手动生成JNI实现" class="headerlink" title="手动生成JNI实现"></a>手动生成JNI实现</h4><h5 id="src手动创建jni文件夹"><a href="#src手动创建jni文件夹" class="headerlink" title="src手动创建jni文件夹"></a>src手动创建jni文件夹</h5><h5 id="生成对应头文件"><a href="#生成对应头文件" class="headerlink" title="生成对应头文件"></a>生成对应头文件</h5><ul><li>cd到对应目录   执行：javac -h . xxxxx.java</li></ul><p><img src="%E7%94%9F%E6%88%90%E5%A4%B4%E6%96%87%E4%BB%B6.jpg" alt=""></p><h5 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h5><ul><li><p>将生成的h文件剪切到jni目录下，并复制一份重命名为.cpp文件，并实现</p></li><li><p>拷贝对应需要的第三方文件，创建Android.mk、Application.mk</p><p><img src="%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg" alt=""></p></li></ul><h5 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h5><p><img src="Android.mk.jpg" alt=""></p><h5 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h5><p><img src="Application.mk.jpg" alt=""></p><h5 id="build-gradle-1"><a href="#build-gradle-1" class="headerlink" title="build.gradle"></a>build.gradle</h5><p><img src="/build-gradle.jpg" alt=""></p><hr><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><ul><li>版本一<br> <img src="version.jpg" alt=""></li><li>布局文件新加图片，build.gradle修改版本编号</li><li>拷贝old.apk以及new.apk在bsdiff目录下，执行 <code>bsdiff.exe old.apk new.apk patchFile</code>指令，生成patchFile。</li><li>代码中是将old.apk以及patchFile拷贝到sdcard目录下。路径可自定义</li><li>触发更新方法</li><li>版本二<br><img src="version2.jpg" alt=""></li></ul><hr><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ul><li>权限</li><li>android 7.0需要配置<strong>FileProvider</strong></li><li>服务端生成的差分包大小接近或者超过新包大小，没有必要进行差分更新。因为服务器一般会保存几个稳定、经典的版本和差分包。用户做请求的时候，后台已经判断出事需要全局更新还是增量更新</li><li>下载到本地是否需要签名校验，参考实际情况</li><li>有新版本，服务端先生成差分包。而不是等请求再去生成</li></ul><hr><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>Android.mk 需要引用全部的c/c++文件</li><li>注意区分 .c 和.cpp的写法区别</li></ul><p><a href="http://www.pianshen.com/article/162779081/">AndroidStudio之NDK常见编译错误</a></p><hr><h4 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h4><ul><li><a href="https://github.com/cnSchwarzer/bsdiff-win/releases">bsdiff-win下载</a></li><li><a href="https://github.com/wuhansan/MyBSDiff">新建JNI项目实现MyBSDiff案例</a></li><li><a href="https://github.com/wuhansan/JniBSDiff">手动创建jni实现BSDiff</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能实现 </tag>
            
            <tag> Jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OkHttp框架学习笔记</title>
      <link href="/posts/47283/"/>
      <url>/posts/47283/</url>
      
        <content type="html"><![CDATA[<h4 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h4><ul><li>队列</li><li>线程池</li><li>重试机制</li></ul><h4 id="流程示意图"><a href="#流程示意图" class="headerlink" title="流程示意图"></a>流程示意图</h4><p><img src="okhttp%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.jpg" alt=""></p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>创建线程池管理类</li><li>封装请求 (url、参数…)</li><li>封装响应（respond）</li><li>封装请求任务（HttpTask -》(整合请求，返回响应)）</li><li>封装实用工具，便捷操作</li></ul><h4 id="线程池管理"><a href="#线程池管理" class="headerlink" title="线程池管理"></a>线程池管理</h4><ul><li>队列</li><li>线程池</li><li>“核心”线程</li><li>延迟队列</li><li>“延迟”线程</li></ul><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li><p>请求都是在异步任务,后台运行（子线程中执行），但是返回的结果是在主线程中获取，所以：</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getMain就是直接传到主线程的 </span></span><br><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());  </span><br><span class="line">...</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">        String response = getContent(inputStream);</span><br><span class="line">        <span class="keyword">final</span> T clazz = JSON.parseObject(response, responseClass);</span><br><span class="line">        handler.post(<span class="keyword">new</span> Runnable() &#123; <span class="comment">//子线程传到主线程</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                listener.onSuccess(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    </p><h4 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h4></li></ul><p><a href="https://github.com/wuhansan/MeOkhttp">网易云课堂okhttp实现思路-代码无法运行，只是课堂学习案例</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
            <tag> 开源框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬件与软件是如何成就android系统</title>
      <link href="/posts/16113/"/>
      <url>/posts/16113/</url>
      
        <content type="html"><![CDATA[<h4 id="架构简介"><a href="#架构简介" class="headerlink" title="架构简介"></a>架构简介</h4><p><img src="Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png" alt=""></p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>从上面可知，google的经典四层架构分别为 <strong>Linux内核</strong>、<strong>系统库和Android运行时环境</strong>、<strong>framework层</strong>、<strong>应用层</strong></li></ul><h4 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h4><ul><li><p>可知Linux内核中基本都为硬件驱动，硬件驱动对应设备的硬件设备。这就是为什么<a href="https://wuhansan.github.io/2018/06/14/Ubuntu%E7%BC%96%E8%AF%91Android%E6%BA%90%E7%A0%81%E5%88%B7%E6%9C%BA/">Ubuntu编译Android源码并刷机</a>，需要先下载驱动的原因。因为就算有系统本身就是一个硬件为载体运行软件的容器，没有刷入驱动的情况下，主板是可以正常运行刷入的不涉及硬件(usb…)的应用。</p></li><li><p>所谓驱动就是基础的电子元器件而成，类似于单片机设备（个人理解而已），所以驱动也基本都是c编写而成。</p></li></ul><h5 id="驱动的使用"><a href="#驱动的使用" class="headerlink" title="驱动的使用"></a>驱动的使用</h5><p>由<a href="https://wuhansan.github.io/2018/09/05/MediaServer%E7%90%86%E8%A7%A3Binder/">MediaServer理解Binder</a>可知</p><ul><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/binder"</span>, O_RDWR); <span class="comment">// arg1:驱动路径  arg2:方式(读/写/读写)</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads); <span class="comment">//最大线程</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配虚拟空间</span></span><br><span class="line">mmap(<span class="number">0</span>, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读写操作</span><br></pre></td></tr></table></figure></li></ul><h4 id="Android启动架构"><a href="#Android启动架构" class="headerlink" title="Android启动架构"></a>Android启动架构</h4><ul><li><img src="Android%E5%90%AF%E5%8A%A8%E6%9E%B6%E6%9E%84.jpg" alt=""></li></ul><h5 id="Loader-层"><a href="#Loader-层" class="headerlink" title="Loader 层"></a>Loader 层</h5><ul><li><strong>Boot Rom：</strong>当手机处于关机状态时，长按开机键开机，会引导芯片开始从固化在<code>Rom</code>里预设的代码开始执行，然后加载引导程序到<code>Ram</code>.</li><li><strong>Boot Loader：</strong>这是启动<code>Android</code>系统之前的引导程序，主要是检查<code>Ram</code>、初始化参数等功能。</li></ul><h5 id="Kernel-层"><a href="#Kernel-层" class="headerlink" title="Kernel 层"></a>Kernel 层</h5><p><code>kernel</code>层指的就是<code>Android</code>内核层，到这里才刚刚进入<code>Android</code>系统</p><ol><li>启动<code>Kernel</code>层的<code>swapper</code>进程（pid=1），系统初始化过程Kernel创建的第一个进程，用于初始化进程管理、内存管理，加载<code>Display</code>、<code>Camera</code>、<code>Binder</code>等驱动相关工作。</li><li>启动<code>kthreadd</code>（pid=2），这是<code>Linux</code>系统的内核进程，会创建内核工作线程<code>kworkder</code>、软中断线程<code>ksoftirqd</code>和<code>thermal</code>等内核守护进程。<code>kthreadd</code>是所有内核进程的鼻祖。</li></ol><h5 id="Native-层"><a href="#Native-层" class="headerlink" title="Native 层"></a>Native 层</h5><p>这里的<code>Native</code>层主要包括<code>init</code>孵化来的用户空间的守护进程、HAL层及开机动画等。启动<code>init</code>进程（pid=1），是<code>Linux</code>系统的用户进程，<strong>init进程是所有用户进程的鼻祖。</strong></p><ul><li><code>init</code>进程会孵化出<code>ueventd</code>、<code>logd</code>、<code>healthd</code>、<code>installd</code>、<code>adbd</code>、<code>lmkd</code>等用户守护进程；</li><li><code>init</code>进程还会启动<code>ServiceManager</code>（Binder服务管家）、<code>bootanim</code>（开机动画）等重要服务。</li><li><code>init</code>进程孵化出<code>Zygote</code>进程，<code>Zygote</code>进程是Android系统第一个<code>Java</code>进程（虚拟机进程），<strong>zygote进程是所有Java进程的父进程。</strong></li></ul><h5 id="Framework-层"><a href="#Framework-层" class="headerlink" title="Framework 层"></a>Framework 层</h5><p><code>framework</code>主要包括<code>Zygote进程</code>、<code>SystemServer进程和</code>MediaServer进程`。</p><h5 id="Zygote-进程"><a href="#Zygote-进程" class="headerlink" title="Zygote 进程"></a>Zygote 进程</h5><p><code>Zygote</code>进程是由<code>init</code>进程通过解析<code>init.rc</code>文件后<code>fork</code>生成的。<code>Zygote</code>的任务主要包括：</p><ol><li>加载<code>ZygoteInit</code>类，注册<code>Zygote Socket</code>服务端套接字。</li><li>加载虚拟机</li><li><code>preloadClassses</code></li><li><code>preloadResources</code></li></ol><h5 id="System-Server-进程"><a href="#System-Server-进程" class="headerlink" title="System Server 进程"></a>System Server 进程</h5><p><code>System Server</code>进程是由<code>Zygote</code>进程<code>fork</code>而来，<strong>System Server是Zygote孵化的第一个进程</strong>。<code>System Server</code>负责启动和管理整个<code>Java Framework</code>，包含<code>ActivityManager</code>、<code>PowerManager</code>等服务。</p><h5 id="Media-Server-进程"><a href="#Media-Server-进程" class="headerlink" title="Media Server 进程"></a>Media Server 进程</h5><p><code>Media Server</code> 进程由<code>init</code>进程<code>fork</code>而来，负责管理整个<code>C++ Framework</code>，包含<code>AudioFlinger</code>、<code>Camera Service</code>等服务。</p><h5 id="App-层"><a href="#App-层" class="headerlink" title="App 层"></a>App 层</h5><p><code>Zygote</code>进程孵化出的第一个<code>App</code>进程是<code>Launcher</code>，也就是用户看到的<code>桌面App</code>。同时<code>Zygote</code>进程还会创建<code>Browser</code>、<code>Phone</code>、<code>Email</code>等<code>App</code>进程。也就是说<strong>所有的App进程都是由Zygote进程fork生成的。</strong></p><h5 id="Syscall-和-JNI"><a href="#Syscall-和-JNI" class="headerlink" title="Syscall 和 JNI"></a>Syscall 和 JNI</h5><p><code>Native</code>层和<code>Kernel</code>层有一个系统调用层，也就是<code>Syscall</code>。<code>Java</code>层和<code>native</code>层之间的纽带是<code>JNI</code>。</p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>部分摘录自 <a href="http://gityuan.com/android/">gityuan</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart简单学习</title>
      <link href="/posts/60510/"/>
      <url>/posts/60510/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>此文章为学习笔记，原网址链接 <a href="https://codelabs.flutter-io.cn/codelabs/from-java-to-dart-cn/index.html#1">为 Java 开发人员准备的 Dart 教程</a></li><li><a href="https://www.kancloud.cn/marswill/dark2_document/">Api翻译文档</a></li></ul><h4 id="事项"><a href="#事项" class="headerlink" title="事项"></a>事项</h4><h5 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h5><ul><li><p>dart中没有public之类的的关键词，默认都是public</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _speed = <span class="number">0</span>;  <span class="comment">// 以下划线开头的变量，Dart 的编译器都会将其强制标记为私有的</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><ul><li><p>未初始化的变量（即使是数字类型的变量）的值都为 null</p></li><li><p>引用属性值的时候，只需添加 $</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="built_in">String</span> toString() =&gt; <span class="string">'Bicycle: <span class="subst">$speed</span> mph'</span>;  <span class="comment">//speed为属性</span></span><br></pre></td></tr></table></figure></li><li><p>默认情况下，Dart 会为所有公开的变量提供存取方法，除非你需要提供仅仅可读、可写，或者在某些情况下需要在 getter 方法中进行计算或是在 setter 方法中进行某些值得更新，否则都不需要再重新定义存取方法。</p></li><li><p>如果实体类的属性不是私有性，那么不需要setter/getter方法，直接classX.property即可设置/获取。否则，需要自己生成。如下（构造方法以setter/getter等，idea提供了生成功能）:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> _left , _top ;</span><br><span class="line">  User(<span class="keyword">this</span>._left,<span class="keyword">this</span>._top); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> top =&gt; _top;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> top(value) &#123;</span><br><span class="line">    _top = value;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> left =&gt; _left;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> left(<span class="built_in">num</span> value) &#123;</span><br><span class="line">    _left = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="内建数据类型"><a href="#内建数据类型" class="headerlink" title="内建数据类型"></a>内建数据类型</h5><ul><li>Numbers<ul><li>int</li><li>double</li></ul></li><li>字符串</li><li>Booleans</li><li>Lists</li><li>Maps</li><li>Runes （字符）</li><li>Symbols（符号）</li></ul><h5 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h5><ul><li><p><code>var</code>   常规使用</p></li><li><p><code>const</code>  <code>final</code> 定义的都是常量，声明时候就要初始化。区分在于：前者是编译时常量，只能用编译时候常量初始化，而后者可以用变量来初始化</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">//Ok</span></span><br><span class="line"><span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">//Error，new DateTime.now()不是const常量</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><ul><li><p>构造方法没有方法体</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classX(<span class="keyword">this</span>.property, <span class="keyword">this</span>.property);</span><br></pre></td></tr></table></figure></li><li><p>多个构造方法集于一体</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rectangle(&#123;<span class="keyword">this</span>.origin = <span class="keyword">const</span> Point(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">this</span>.width = <span class="number">0</span>, <span class="keyword">this</span>.height = <span class="number">0</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>this.origin</code>, <code>this.width</code> 和 <code>this.height</code> 使用了 Dart 提供的简便方法来直接对类中的实例变量进行赋值。</li><li><code>this.origin</code>, <code>this.width</code> 和 <code>this.height</code> 嵌套在闭合的花括号中 (<code>{}</code>) ，用来表示它们是可选的命名参数。</li><li><code>this.origin = const Point(0, 0)</code> 这样的代码表明给实例变量 <code>origin</code> 提供了默认的值 <code>Point(0,0)</code>，默认值必须是在编译期就可以确定的常量。上述代码中的构造方法为三个实例变量都提供了默认参数。</li></ul></li></ul><h5 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h5><ul><li>实例化对象，可不加 new 关键字</li></ul><h5 id="所谓接口"><a href="#所谓接口" class="headerlink" title="所谓接口"></a>所谓接口</h5><ul><li>Dart 语言并没有提供 <code>interface</code> 关键字，但是<strong>每一个类都隐式地定义了一个接口</strong>。</li></ul><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li>将函数当做参数进行传递</li><li>将函数直接赋值给变量</li><li>对函数进行解构，只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数（也被称为柯里化）</li><li>创建一个可以被当作为常量的匿名函数（也被称为 <em>lambda</em> 表达式）</li></ul><h5 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h5>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建型-建造者模式</title>
      <link href="/posts/36573/"/>
      <url>/posts/36573/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>让建造者类负责对象的创建工作</li><li>将一个复杂对象的构建与它的表示相分离，使得同样的构建过程可以创建出不同的表示</li></ul><h5 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h5><ul><li>类中有很多属性，为了避免构造函数参数太多。通过构造函数配置必填参数配合<code>set()</code>方法来解决</li></ul><hr><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>工厂模式是用来创建不同但相同类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象</li><li>建造者模式是用一种类型的复杂对象，通过设置不同的可选参数，定制化的创建不同对象</li></ul><hr><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p>​    <img src="uml.jpg" alt=""></p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><h5 id="抽象化主体"><a href="#抽象化主体" class="headerlink" title="抽象化主体"></a>抽象化主体</h5><ul><li><p>创建属性</p></li><li><p>无参构造</p></li><li><p>setter/getter</p></li><li><p>创建抽象主体的特性方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> String mBoard;</span><br><span class="line"><span class="keyword">protected</span> String mDisplay;</span><br><span class="line"><span class="keyword">protected</span> String mOS;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置主板</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmBoard</span><span class="params">(String mBoard)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mBoard = mBoard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置显示器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmDisplay</span><span class="params">(String mDisplay)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mDisplay = mDisplay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置操作系统</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setOS</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Computer [mBoard="</span> + mBoard + <span class="string">", mDisplay="</span> + mDisplay + <span class="string">", mOS="</span> + mOS + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="指定生成主体"><a href="#指定生成主体" class="headerlink" title="指定生成主体"></a>指定生成主体</h5><ul><li><p>指定主体继承抽象化主体</p></li><li><p>实现具体特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBook</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MacBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mOS = <span class="string">"Mac X 10"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="抽象化"><a href="#抽象化" class="headerlink" title="抽象化"></a>抽象化</h5><ul><li><p>抽象化创建关于抽象主体的属性生成方法</p></li><li><p>抽象化创建关于抽象主体创建生成方法，返回结果为抽象化主体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBoard</span><span class="params">(String board)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">(String disPlay)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildOS</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="指定生成Builder"><a href="#指定生成Builder" class="headerlink" title="指定生成Builder"></a>指定生成Builder</h5><ul><li><p>实例化MacBook，转为抽象化主体</p></li><li><p>实现抽象化Builder方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBookBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Computer computer = <span class="keyword">new</span> MacBook();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBoard</span><span class="params">(String board)</span> </span>&#123;</span><br><span class="line">computer.setmBoard(board);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">(String disPlay)</span> </span>&#123;</span><br><span class="line">computer.setmDisplay(disPlay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildOS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">computer.setOS();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> computer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="组装实现"><a href="#组装实现" class="headerlink" title="组装实现"></a>组装实现</h5><ul><li><p>将抽象化Builder作为属性，并生成带参构造方法生成Builder实例</p></li><li><p>创建组装方法，参数为抽象化主体的属性，通过Builder实例调用Builder方法承接参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">Builder builder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.builder = builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">construct</span><span class="params">(String board,String disPlay)</span> </span>&#123;</span><br><span class="line">builder.buildBoard(board);</span><br><span class="line">builder.buildDisplay(disPlay);</span><br><span class="line">builder.buildOS();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li><p>生成指定主体实例</p></li><li><p>生成带参构造的组装实体，因为指定生成实体继承抽象化主体。所以，指定主体实例即为组装实体的参数</p></li><li><p>组装实体实现组装方法，得到指定生成主体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Builder builder = <span class="keyword">new</span> MacBookBuilder();</span><br><span class="line">Director pcDirector = <span class="keyword">new</span> Director(builder);</span><br><span class="line">pcDirector.construct(<span class="string">"因特尔"</span>, <span class="string">"VOC"</span>);</span><br><span class="line">System.out.println(builder.create().toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>良好的封装性。内部没有实现setter/getter方法，客户端不必知道产品内部组成的细节</li><li>建造者独立，容易拓展</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h5><ul><li>产生多余的Builder对象以及Director对象，消耗内存            </li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速下载Android部分源码</title>
      <link href="/posts/39875/"/>
      <url>/posts/39875/</url>
      
        <content type="html"><![CDATA[<h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><ul><li><strong><a href="https://android.googlesource.com/">https://android.googlesource.com/</a></strong></li><li>需要翻墙吧，大约。反正我是自备梯子，<a href="https://wuhansan.github.io/2018/09/07/%E6%90%AC%E7%93%A6%E5%B7%A5%E6%90%AD%E5%BB%BA%E5%A4%96%E7%BD%91%E6%9C%8D%E5%8A%A1/">提供了搭梯子的方法</a></li></ul><h4 id="下载步骤"><a href="#下载步骤" class="headerlink" title="下载步骤"></a>下载步骤</h4><ul><li><p>进入网页后，往下滚动找到对应需求的链接<br><img src="framework%E4%BD%8D%E7%BD%AE.jpg" alt="查找需要的文件夹"></p></li><li><p>查询对应版本<br><img src="%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC.jpg" alt=""></p><ul><li>标记的 <strong>git clone <a href="https://android.googlesource.com/platform/frameworks/base">https://android.googlesource.com/platform/frameworks/base</a></strong>  在 git bash 中无效的</li><li><strong>Tags</strong>下面有一个 <strong>more</strong>，没有找到需要的版本就点击它</li></ul></li><li><p>点击下载<br><img src="%E4%B8%8B%E8%BD%BD.jpg" alt=""></p></li><li><p>下载进行</p><p><img src="%E4%B8%8B%E8%BD%BD%E8%BF%9B%E8%A1%8C.jpg" alt=""></p></li></ul><h4 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h4><ul><li>framework</li></ul><p>链接: <a href="https://pan.baidu.com/s/1287VwoT_jY70jzOnv9j0sA">https://pan.baidu.com/s/1287VwoT_jY70jzOnv9j0sA</a> 提取码: nxu2 </p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建型-单例模式</title>
      <link href="/posts/46132/"/>
      <url>/posts/46132/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>构造函数不对外开放，一般为private</li><li>通过一个静态方法或者枚举类型返回单例类对象</li><li>确保单例对象有且只有一个，尤其是多线程情况下</li><li>反序列化时候不会重新构建对象</li><li>注意使用 <code>volatile</code>这个关键字,否则在多线程环境下(懒汉模式以及DCL模式)有可能会出现问题</li></ul><hr><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><ul><li>Application、Activity以及Service中都存在Context对象，也就是总个数为Activity个数+Service个数+1</li><li>Activity的入口是ActivityThread的main函数，在该函数中创建一个新的ActiivtyThread对象并且启动消息循环（UI线程）、创建新的Activity、新的Context对象。而后，将Context对象传递给Activity</li></ul><pre class="mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头  sequenceDiagram    participant ActivityThread    ActivityThread->>ActivityThread: ①main    ActivityThread->>ActivityThread: ②attch    ActivityThread->>ActivityThread: ③mgr.attchApplication    Note left of ActivityThread: 由此关联到mAppThread</pre><hr><h4 id="写法区分"><a href="#写法区分" class="headerlink" title="写法区分"></a>写法区分</h4><h5 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h5><p>类加载期间，就已经将<code>instance</code>静态实例初始好了，所以<code>instance</code>实例的创建是线程安全的。但是，这种实现方式不支持延时加载实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Double-Check-Lock"><a href="#Double-Check-Lock" class="headerlink" title="Double Check  Lock"></a>Double Check  Lock</h5><p>既支持延时加载、又支持高并发的单例实现方式。只要<code>instance</code>被创建之后，再调用 <code>getInstance()</code> 函数都不会进入到加锁逻辑中。所以，这种实现方式解决了懒汉式并发度低的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>; <span class="comment">//确保每次从主内存读取</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">                     instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h5><p>利用Java的静态内部类实现的单例，既支持延迟加载也支持高并发，实现也比双重检测简单</p><ul><li>推荐使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.sIntance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton sIntance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h5><p>最简单的实现，通过Java枚举类型本身的特性，保证了实例创建的线程安全和实例的唯一性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="懒汉"><a href="#懒汉" class="headerlink" title="懒汉"></a>懒汉</h5><ul><li>优势： 只有在使用的时候才会实例化，一定程度上节约了资源</li><li>缺点： 第一次加载的时候需要及时实例化，反应稍慢。每次调用getInstance的时候会进行同步，造成不必要的开销。一般不建议使用</li></ul><h5 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h5><ul><li>优点： 解决了资源消耗、多余的同步、线程安全等问题</li><li>缺点：会在某些情况下失效 😂<strong>双重检查失效</strong>，因此不赞成使用</li></ul><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><ul><li>优点:  <ul><li>第一次加载class时候不会初始化sInstance，只有第一次调用getInstance才会导致初始化</li><li>确保线程安全，确保单例对象的唯一性，也延迟了单例的实例化</li></ul></li></ul><h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><ul><li>将构造函数私有化，通过静态方法获取唯一实例，获取过程中确保线程安全、防止反序列化导致重新生成实例对象等问题</li></ul><h4 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h4><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><ul><li><p>反序列化会出现重新创建对象的情况。</p></li><li><p>通过序列化可以将单例对象写入到磁盘，从而有效地获取一个实例，及时构造方法是私有的，但是并不能影响反序列化通过特殊途径调用该类的构造方法。</p></li><li><p>所谓特殊途径</p><ul><li>readResolve()</li><li>该方法中 ，将sInstance对象返回，而不是默认重新生成一个新的对象。当然，枚举并不存在</li></ul></li></ul><h5 id="杜绝单例被反序列化"><a href="#杜绝单例被反序列化" class="headerlink" title="杜绝单例被反序列化"></a>杜绝单例被反序列化</h5><ul><li><p>加入如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul><li>将单例的实例对象写进磁盘，然后再读回来，从而有效的获得一个实例</li></ul><h5 id="序列化-（Serialization）"><a href="#序列化-（Serialization）" class="headerlink" title="序列化 （Serialization）"></a>序列化 （Serialization）</h5><ul><li>概念：<ul><li>把对象转换为字节序列的过程</li></ul></li><li>作用：<ul><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中</li><li>在网络上传送对象的字节序列</li></ul></li></ul><h5 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h5><ul><li>概念：<ul><li>把字节序列恢复为对象的过程</li></ul></li></ul><hr><h4 id="模式缺点"><a href="#模式缺点" class="headerlink" title="模式缺点"></a>模式缺点</h4><ul><li>单例面对OOP特性的支持不好，违背了基于接口而非实现的原则，对后期的拓展有较大限制。相当于放弃了继承和多态特性</li><li>隐藏了类之间的依赖关系</li><li>对代码可测试性不友好</li><li>不支持带参数的构造函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-命令模式</title>
      <link href="/posts/22977/"/>
      <url>/posts/22977/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>将请求封装为一个对象，这样可以使用不同的请求参数化其他对象（将不同请求依赖注入到其他对象），并且能够支持请求的排队执行、记录日志、撤销等功能</li></ul><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><img src="Light.png" alt=""></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开灯"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关灯"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">Light light;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.light = light;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">light.on();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRemoteControl</span> </span>&#123;</span><br><span class="line">Command slot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleRemoteControl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">slot = command;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buttonWasPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">slot.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        SimpleRemoteControl simpleRemoteControl = <span class="keyword">new</span> SimpleRemoteControl();</span><br><span class="line">Light light = <span class="keyword">new</span> Light();</span><br><span class="line"></span><br><span class="line">LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line"></span><br><span class="line"><span class="comment">//serCommand 的参数类型是 Command， 但是LightOnCommand 实现了 Command </span></span><br><span class="line"><span class="comment">//接口允许通过创建一个能被向上转型为多种基类的类型，来实现多种某种类似多重继变种的特性</span></span><br><span class="line">simpleRemoteControl.serCommand(lightOnCommand);</span><br><span class="line"></span><br><span class="line">simpleRemoteControl.buttonWasPressed();</span><br></pre></td></tr></table></figure></li></ul><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="result.jpg" alt=""></p><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>队列请求</li><li>日志请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>创建型-工厂模式</title>
      <link href="/posts/6013/"/>
      <url>/posts/6013/</url>
      
        <content type="html"><![CDATA[<h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><ul><li>简单工厂属于工厂方法模式的一种特例</li></ul><ul><li>创建逻辑比较简单的时候，将多个对象的创建逻辑放在同一个工厂类中</li><li>简单工厂还叫做静态工厂方法模式，是因为其中创建对象的方法是静态的</li><li>定义一个创建对象的接口，但是由子类决定实例哪一个，工厂模式让类把实例化推迟到子类</li></ul><h5 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h5><ul><li>每次都返回新创建的对象</li><li>每次都返回同一个事先创建好的对象，也就是所谓的单例对象</li></ul><h5 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h5><ul><li>创建逻辑比较复杂的时候，为了避免过于庞大的简单工厂类。而是选择将创建逻辑拆分的更细，所以采取抽象化</li><li>提供一个接口，用于创建和相关依赖对象的家族，而不需要明确的指定具体类，让一个工厂负责创建多个不同类型的对象</li></ul><h4 id="参考标准"><a href="#参考标准" class="headerlink" title="参考标准"></a>参考标准</h4><ul><li><p>封装变化：创建逻辑有可能变化，封装成工厂类之后，创建逻辑对调用者更透明</p></li><li><p>代码复用：创建代码抽离到独立的工厂类之后可以复用</p></li><li><p>隔离复杂性：封装复杂的创建逻辑，调用者无需了解如果创建对象</p></li><li><p>控制复杂度：将创建代码抽离出来，让原来的函数或者类更加职责单一，代码更简介</p></li></ul><hr><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><ul><li>DI 容器底层最基本的设计思路就是基于工厂模式的。DI容器相当于一个大的工厂类，负责在程序启动的时候，根据配置（要创建哪些对象，每个类对象的创建需要依赖哪些其他类对象）事先创建好对象。当应用程序需要使用某个类容器的时候，直接从容器中获取即可</li><li>DI容器负责的是整个应用中所有类对象的创建</li></ul><h5 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h5><ul><li><p>解析配置</p></li><li><p>对象创建</p><ul><li><strong>反射</strong></li><li>在程序运行的过程中，动态的加载类、创建对象，不用事先在代码中写死</li></ul></li><li><p>对象生命周期管理</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零碎知识点补充</title>
      <link href="/posts/22837/"/>
      <url>/posts/22837/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>开启音乐享受一波有点长的大杂烩</strong></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=5267292&auto=1&height=66"></iframe><hr><h4 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h4><hr><h5 id="Http和Https"><a href="#Http和Https" class="headerlink" title="Http和Https"></a>Http和Https</h5><ul><li><p>http</p><ul><li>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全</li><li>HTTPS就是HTTP加上加密处理（一般是SSL安全通信线路）+认证+完整性保护</li></ul></li><li><p>https</p><p>①    客户端发起一个https的请求，把自身支持的一系列Cipher Suite（密钥算法套件，简称Cipher）发送给服务端</p><p>②    服务端，接收到客户端所有的Cipher后与自身支持的对比，如果不支持则连接断开，反之则会从中选出一种加密算法和HASH算法以证书的形式返回给客户端 证书中还包含了 公钥 颁证机构 网址 失效日期等等</p><p>③    客户端收到服务端响应后会做以下几件事</p><ul><li><p>验证证书的合法性<br>颁发证书的机构是否合法与是否过期，证书中包含的网站地址是否与正在访问的地址一致,等证书验证通过后，在浏览器的地址栏会加上一把小锁生成随机密码。如果证书验证通过，或者用户接受了不授信的证书，此时浏览器会生成一串随机数，然后用证书中的公钥加密</p></li><li><p>HASH握手信息<br>用最开始约定好的HASH方式，把握手消息取HASH值，  然后用 随机数加密 “握手消息+握手消息HASH值(签名)”  并一起发送给服务端之所以要取握手消息的HASH值，主要是把握手消息做一个签名，用于验证握手消息在传输过程中没有被篡改过</p></li></ul><p>④ 服务端拿到客户端传来的密文，用自己的私钥来解密握手消息取出随机数密码，再用随机数密码 解密 握手消息与HASH值，并与传过来的HASH值做对比确认是否一致。然后用随机密码加密一段握手消息(握手消息+握手消息的HASH值 )给客户端</p><p>⑤    客户端用随机数解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密 . <code>因为这串密钥只有客户端和服务端知道，所以即使中间请求被拦截也是没法解密数据的，以此保证了通信的安全</code></p><ul><li><p>加密方式</p><ul><li>非对称加密算法：RSA，DSA/DSS     在客户端与服务端相互验证的过程中用的是对称加密 </li><li>对称加密算法：AES，RC4，3DES     客户端与服务端相互验证通过后，以随机数作为密钥时，就是对称加密</li><li>HASH算法：MD5，SHA1，SHA256  在确认握手消息没有被篡改时 </li></ul></li><li><p>优势</p><ul><li>数据完整性：内容传输经过完整性校验</li><li>数据隐私性：内容经过对称加密，每个连接生成一个唯一的加密密钥</li><li>身份认证：第三方无法伪造服务端（客户端）身份</li></ul></li></ul></li><li><p>摘录</p><ul><li><a href="https://www.cnblogs.com/svan/p/5090201.html"><a href="https://www.cnblogs.com/svan/p/5090201.html">HTTPS工作原理</a></a></li><li><a href="https://www.cnblogs.com/zery/p/5164795.html"><a href="https://www.cnblogs.com/zery/p/5164795.html">HTTPS 原理解析</a></a></li></ul></li></ul><hr><h5 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h5><ul><li><p>UDP是一个无状态的传输协议。会出现丢包、消息顺序偶尔错乱，所以传输较快。适用于对于即时传输使用,适用于视频之类等不需要确保数据完整性的情况。相对应的,那么占有的资源消耗就会更少</p></li><li><p>TCP的确认机制、三次握手协议,确保了数据的传输顺序以及数据的完整性，所以流程相对繁琐，导致占用资源高。但是反而是因为这些措施，TCP容易被人利用，实现DOS、DDOS、CC等攻击</p></li><li><p>区别</p><ul><li>TCP面向连接（先确认再连接）;UDP是无连接的，即发送数据之前不需要建立连接</li><li>TCP更可靠</li><li>TCP面向字节流实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP首部开销20字节;UDP的首部开销小，只有8个字节</li><li>TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</li></ul></li><li><p>摘录</p><ul><li><a href="https://www.cnblogs.com/xiaomayizoe/p/5258754.html"><a href="https://www.cnblogs.com/xiaomayizoe/p/5258754.html">TCP和UDP的优缺点及区别</a></a></li></ul></li></ul><hr><h5 id="Http报文结构"><a href="#Http报文结构" class="headerlink" title="Http报文结构"></a>Http报文结构</h5><ul><li><p>请求报文</p><ul><li>请求行：包含请求方法、URI、HTTP版本信息</li><li>请求首部字段</li><li>请求内容实体</li></ul></li><li><p>响应报文</p><ul><li>状态行：包含HTTP版本、状态码、状态码的原因短语</li><li>响应首部字段</li><li>响应内容实体</li></ul></li><li><p>常用的HTTP方法</p></li><li><p>HTTP响应状态码</p></li><li><p>详情</p><ul><li><a href="https://www.cnblogs.com/sunny-sl/p/6529830.html"><a href="https://www.cnblogs.com/sunny-sl/p/6529830.html">HTTP协议【详解】——经典面试题</a></a></li><li><a href="https://www.cnblogs.com/zhuifeng/p/4072248.html"><a href="https://www.cnblogs.com/zhuifeng/p/4072248.html">HTTP报文详解</a></a></li></ul></li></ul><hr><h5 id="Socket协议实现"><a href="#Socket协议实现" class="headerlink" title="Socket协议实现"></a>Socket协议实现</h5><ul><li>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket</li><li>建立网络通信连接至少要一对端口号（<strong>socket</strong>）。<strong>socket</strong>本质是编程接口（API），对<strong>TCP/IP</strong>的封装，<strong>TCP/IP</strong>也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口；HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力</li><li><a href="https://wuhansan.github.io/2018/08/16/Wifi%E9%80%9A%E8%AE%AF/">TCP/UDP在WIFI状态下基于Socket通讯</a></li></ul><hr><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><ul><li>Cookie(<strong>响应内容</strong>)是客户端保存用户信息的一种机制，用来记录用户的一些信息</li><li>也是实现Session的一种方式</li><li>Cookie存储的数据量有限，且都是保存在客户端浏览器中。不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用Cookie实际上只能存储一小段的文本信息</li></ul><hr><h5 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h5><ul><li>客户端访问服务端的时候，服务器端把客户端信息以某种形式记录在服务器上，这个就是Session</li><li>二次访问，只要从该Session中查去对应的信息即可</li><li>流程<br><img src="cookie.png" alt=""></li></ul><hr><h5 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h5><ul><li>有了session之后，客户端有了cookie保存，服务端有了session信息。根据对应的SessionID为key，每次请求就带着它。频繁的对比和存储影响性能，所以就有了Token</li><li>服务器不需要存储用户的登录信息</li><li>流程<br><img src="Token.png" alt=""></li></ul><hr><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><hr><h5 id="interface-abstract"><a href="#interface-abstract" class="headerlink" title="interface  abstract"></a>interface  abstract</h5><ul><li>接口比抽象的概念更先进一步,产生一个完全抽象的类，没有提供任何具体实现。只提供了方法体，只提供了形式，没有任何具体实现。</li><li>用来创建类和类之间的协议</li><li>不仅极度抽象，而且与允许通过创建一个能被向上转型为多种基类的类型，来实现多种某种类似多重继变种的特性。即 <strong>instanceof</strong></li></ul><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><ul><li><p>sleep()和wait()的区别</p><ul><li>sleep()方法是Thread类，而wait()方法是Object类</li><li>sleep是暂停执行指定时间，虽然将CPU让出。但是处于监控状态下线程不会释放对象锁，到指定时间后恢复原状态。然而wait方法则是放弃对象锁，进入等待池中，一直到此对象调用notify()方法唤醒后，本线程才进入对象锁定池准备</li></ul></li></ul><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><ul><li>Java有哪些线程池？他们的区别是什么？线程池工作流程是怎样的？线程池实现原理是怎样的？Cache线程池有哪些弊端？</li></ul><h5 id="多线程通信"><a href="#多线程通信" class="headerlink" title="多线程通信"></a>多线程通信</h5><ul><li><p>Handler</p></li><li><p>runOnUiThread</p></li><li><p>View.post(Runnable)</p></li><li><p>AsyncTask</p></li></ul><ul><li>synchronize关键字怎么用的？还知道哪些同步的方式？</li></ul><ul><li>Thread直接调用run方法会怎么样？start方法作用是什么？</li></ul><ul><li>volatile关键字的作用是什么？</li></ul><ul><li>怎么安全停止一个线程任务？原理是什么？线程池里有类似机制吗？</li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>HashMap和HashTable的区别？和 ConcurrentHashMap 区别？和LinkedHashMap区别？内部实现原理？</li><li>LRUCache的原理？</li><li>ArrayList和LinkedList区别？为什么ArrayList不是线程安全的？</li><li>数据库的索引用的什么数据结构？</li></ul><h5 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h5><ul><li>垃圾回收机制？有哪些对象可以作为GC roots？</li><li>跟Art、Dalvik对比</li><li>Java内存模型？</li><li>类加载机制？双亲委托模型？</li></ul><h4 id="Android题"><a href="#Android题" class="headerlink" title="Android题"></a>Android题</h4><ul><li>做过哪些性能优化？是怎么评测和具体优化的？</li><li>Activity的冷启动流程？AMS的作用？</li><li>怎么分析内存泄漏？</li><li>View的事件分发机制？滑动冲突怎么解决？</li><li>自定义View的原理和流程？</li><li>Handler原理？（一般会花式扩展）</li><li>有哪些多进程通信方式？Binder机制？</li><li>Android的生命周期和启动模式相关？</li><li>你项目中用到哪些开源库？说说其实现原理？（OKhttp、RxJava、Retroit重点，如果有用到的话）</li><li>Android的打包流程？apk里有哪些东西？签名算法的原理？</li><li>了解哪些插件化技术？</li><li>LinearLayout的布局流程？</li><li>对Mvp的理解？</li><li>Android怎么做保活？</li></ul><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul><li>排序相关的（快排，分析不同排序区别，时间复杂度等）</li><li>字符串、数组相关的（滑动窗口、双指针）</li><li>链表（反转链表）</li><li>递归、斐波那契数列（爬楼梯）</li><li>动态规划</li></ul><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li>用过哪些设计模式？DCL单例模式为什么要两次判空？Android里源码或者你用过的开源库都用到了什么设计模式？<br>— final关键字的作用？</li><li>静态内部类和内部类的区别？</li><li>值传递类问题</li><li>Kotlin为什么能和Java混编</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构型-装饰者模式</title>
      <link href="/posts/3892/"/>
      <url>/posts/3892/</url>
      
        <content type="html"><![CDATA[<h4 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h4><ul><li><p>类应该对拓展开放，对修改关闭</p></li><li><p>解决继承关系过于复杂的问题，通过组合来替代继承</p></li><li><p>主要作用是在不改变原始接口的情况下，给原始类附加相关的增强功能</p></li></ul><hr><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p>可以对原始类嵌套使用多个装饰器，所以在设计时候，装饰器类需要跟原始类继承相同的抽象类或者接口</p></li><li><p>支持多个装饰器的嵌套使用</p></li></ul><h4 id="抽象组件确认初始化需求"><a href="#抽象组件确认初始化需求" class="headerlink" title="抽象组件确认初始化需求"></a>抽象组件确认初始化需求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饮料类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">String description = <span class="string">"Unknown Beverage"</span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写抽象装饰者"><a href="#编写抽象装饰者" class="headerlink" title="编写抽象装饰者"></a>编写抽象装饰者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调料类  在装饰者模式中，为·“装饰器” decorator类，提供基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体组件继承初始化需求"><a href="#具体组件继承初始化需求" class="headerlink" title="具体组件继承初始化需求"></a>具体组件继承初始化需求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span>  <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line"> <span class="comment">// description 继承自 Beverage</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"Espresso"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"House Blend Coffee"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体装饰者类"><a href="#具体装饰者类" class="headerlink" title="具体装饰者类"></a>具体装饰者类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器类可以把属性和有用的接口和输入流连接在一起</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">Beverage beverage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.beverage=beverage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> beverage.getDescription()+<span class="string">" , Mocha"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.10</span> + beverage.cost() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">System.out.println(beverage.getDescription() + <span class="string">" $ "</span> + beverage.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每执行一行，对应的cost和getDescription就会被调用</span></span><br><span class="line">        <span class="comment">//在这个过程中，hBeverage不断被赋值和被累计价格</span></span><br><span class="line">        <span class="comment">//一层层调用，套裹</span></span><br><span class="line">Beverage hBeverage = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">hBeverage = <span class="keyword">new</span> Mocha(hBeverage);</span><br><span class="line">hBeverage=<span class="keyword">new</span> Soy(hBeverage);</span><br><span class="line">System.out.println(hBeverage.getDescription()+<span class="string">" $ "</span>+hBeverage.cost());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt=""></p><h4 id="整体UML"><a href="#整体UML" class="headerlink" title="整体UML"></a>整体UML</h4><p><img src="%E6%95%B4%E4%BD%93UML.jpg" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>装饰者通常使用其他类似工厂模式生成器的模式创建，从而避免更多的对象导致编码犯错的几率大大增加</li><li>装饰者应该做的事，就是增加行为到包装对象上面，而非需要了解其他</li><li>装饰模式可查看 <strong>java.io类</strong>，Java流让人迷惑的主要原因就是：创建单一的结果流，却需要创建多个对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型-观察者模式</title>
      <link href="/posts/7738/"/>
      <url>/posts/7738/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有的依赖都会收到消息</li><li>观察者模式的应用场景中,参与者之间的交互比较有,一般是单向的,一个参与者只有一个身份</li></ul><hr><h4 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h4><ul><li>Observable</li><li>被依赖的对象</li></ul><h4 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h4><ul><li>Observer</li><li>依赖的对象</li></ul><hr><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ul><li>同步阻塞（主要是代码解耦）</li><li>异步非阻塞 （实现解耦，以及提高执行效率）</li><li>进程间 （解耦更彻底，一般基于消息队列来实现）</li></ul><h5 id="抽离变动-接口"><a href="#抽离变动-接口" class="headerlink" title="抽离变动(接口)"></a>抽离变动(接口)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的气象组件度实现此观察接口， 这样，主题在需要通知观察者的时候，有了一个共同的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主题接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//展示的共同接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据类实现订阅"><a href="#数据类实现订阅" class="headerlink" title="数据类实现订阅"></a>数据类实现订阅</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList observerList;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> temp;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">observerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">observerList.add(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = observerList.indexOf(observer);</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">observerList.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observerList.size(); i++) &#123;</span><br><span class="line">Observer observer = (Observer) observerList.get(i);</span><br><span class="line">observer.update(temp, humidity, pressure);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measurementsChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">notifyObserver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.temp = temp;</span><br><span class="line"><span class="keyword">this</span>.pressure = pressure;</span><br><span class="line"><span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">measurementsChange();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实时获取数据"><a href="#实时获取数据" class="headerlink" title="实时获取数据"></a>实时获取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Subject weatherData;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Current conditions : "</span> + temperature + <span class="string">"F degress and  "</span> + humidity + <span class="string">"f% humidity "</span>+ pressure + <span class="string">" % pressure"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.temperature = temp;</span><br><span class="line"><span class="keyword">this</span>.humidity = humidity;</span><br><span class="line"><span class="keyword">this</span>.pressure = pressure;</span><br><span class="line"></span><br><span class="line">display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">CurrentConditionDisplay currentConditionDisplay = <span class="keyword">new</span> CurrentConditionDisplay(weatherData);</span><br><span class="line">weatherData.setMeasurements(<span class="number">80</span>, <span class="number">65</span>, <span class="number">30.4f</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt=""></p><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="%E6%95%B4%E4%BD%93%E7%B1%BB%E5%9B%BE.jpg" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>观察者和可观察者之间以松耦合(<strong>loosecoupling</strong>)，可观察者不知道观察者的细节，只知道实现了观察者接口</li><li>观察者模式中，可以从被观察者push或者pull数据，但是✔的是push  </li><li>Java内置了观察者模式，但是观察者被通知的次序不是一样的。一旦行为有所改变，通知次序就会改变</li><li>内置的观察者模式中，Observable是一个类，只能被继承，不符合多接口组合理念</li><li>MVC采取的就是观察者模式</li></ul><h4 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h4><ul><li>为交互对象之间的松耦合而努力 </li></ul><h4 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://github.com/wuhansan/design-mode">传送门</a></h4>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用时候碰到的问题</title>
      <link href="/posts/45897/"/>
      <url>/posts/45897/</url>
      
        <content type="html"><![CDATA[<h4 id="Hexo迁移数据"><a href="#Hexo迁移数据" class="headerlink" title="Hexo迁移数据"></a>Hexo迁移数据</h4><ul><li>拷贝主目录重要文件夹<ul><li><code>scaffolds</code> 、<code>source</code> <code>themes</code> <code>_config.yml</code> <code>package.json</code></li></ul></li><li>拷贝到对应的新文件夹内</li><li>npm Install</li></ul><h4 id="使用本地图片"><a href="#使用本地图片" class="headerlink" title="使用本地图片"></a>使用本地图片</h4><h5 id="误区："><a href="#误区：" class="headerlink" title="误区："></a>误区：</h5><ul><li>最开始以为是需要使用网页链接。因为晚上的推荐基本说是使用七牛云呀或者git做图片存储。所以一度都是先在简书上粘贴图片，生成链接，再复制在md编辑器。</li></ul><h5 id="新方式"><a href="#新方式" class="headerlink" title="新方式"></a>新方式</h5><ul><li><p>npm install hexo-asset-image –save</p></li><li><p>npm因为和谐的问题，所以建议使用cnpm或者更换淘宝镜像</p></li><li><p>hexo根目下的_config.yml设置</p><p><code>post_asset_folder: true</code></p></li><li><p>当 <code>hexo new &quot;xx&quot;</code>时候生成新的文章时候，会在对应位置生成对应文件夹</p></li><li><p>但是在实际使用时候发现，导入进去还是有问题。本地是显示了，但是提交上去之后。啥都没有，但是别人也是这样的，让我很绝望！偶然发现网上别人的一个方法：</p></li><li><p>在Typora中, 选择Edit &gt; Image Tools &gt; Use Image Root Path， 然后选择你要的相关文件夹，选择之后，在md文件头上 会多一个 typora-root-url: xxxx, 好了，现在可以正常显示了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo使用时候碰到的问题</span><br><span class="line">date: 2019-01-08 21:43:06</span><br><span class="line">categories: 技术杂谈</span><br><span class="line">tags: Hexo</span><br><span class="line">toc: true</span><br><span class="line">typora-root-url: Hexo使用时候碰到的问题</span><br></pre></td></tr></table></figure></li><li><p>最后,格式如下，提交就可以显示了  <strong>不要带 / 符号</strong><br><code>![](怎么回事小老弟.gif)</code></p></li></ul><h4 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h4><ul><li><p>npm install hexo-tag-cloud@^2.0.* –save </p></li><li><p>对应的主题文件夹下 <code>weiget</code>找到 <code>tag</code>的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.tagcloud</span><br><span class="line">    != tagcloud(&#123;min_font: 13, max_font: 23, amount: 100, orderby: &apos;count&apos;, color: true, start_color: &apos;#606e79&apos;, end_color: &apos;#00d6ff&apos;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="warning-LF-will-be-replaced-by-CRLF-in-……"><a href="#warning-LF-will-be-replaced-by-CRLF-in-……" class="headerlink" title="warning: LF will be replaced by CRLF in ……"></a>warning: LF will be replaced by CRLF in ……</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in ......  </span><br><span class="line">The file will have its original line endings in your working directory.</span><br></pre></td></tr></table></figure><ul><li>git config –global core.autocrlf false<ul><li>原因是路径中存在 / 的符号转义问题，false就是不转换符号默认是true，相当于把路径的 / 符号进行转义，这样添加的时候就有问题</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Android5.0系统笔记 ActivityManagerService</title>
      <link href="/posts/15592/"/>
      <url>/posts/15592/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>ActivityManagerService是Android Framework的核心，管理着Android的４大组件:Acticity、Service、ContentProvider和BroadcastReceiver。ActivityManagerService理念的实现是为了模糊进程的作用，取而代之组件的概念。除了四大组件之外，同时也管理和调度所有用户进程。</li></ul><p><img src="0.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 待完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android应用进程管理学习笔记</title>
      <link href="/posts/3654/"/>
      <url>/posts/3654/</url>
      
        <content type="html"><![CDATA[<h4 id="ActivityThread"><a href="#ActivityThread" class="headerlink" title="ActivityThread"></a>ActivityThread</h4><p><img src="%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94%E5%9B%BE.png" alt="应用框架对象关联图"></p><ul><li>这里没有数据结构来保存BroadcastReceiver，是因为它的生命周期很短暂，属于调用一次运行一次的类型，因此不需要保存其对象</li><li>ApplicationThread类型的变量mAppThread是一个Binder实体对象，ActivityManagerService通过它来调用应用的接口</li><li>mPackages和mResourcesPackages的存在疑问<ul><li>通过属性<code>process</code>设置相同应用名称后，两个相同shareUserId和签名的应用可以合并在一个进程中运行，意味着一个应用会保存多个APK信息</li><li>标签<application>属性中”<strong>hasCode</strong>“，不含代码只含资源的apk文件保存在mResourcesPackages中，否则在mPackages中</li></ul></li></ul><h4 id="ApplicationThread"><a href="#ApplicationThread" class="headerlink" title="ApplicationThread"></a>ApplicationThread</h4><p><img src="ApplicationThread%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="ApplicationThread类的继承关系"></p><ul><li>IApplicationThread.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IApplicationThread</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">schedulePauseActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finished, <span class="keyword">boolean</span> userLeaving,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> dontReport)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleStopActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> showWindow,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> configChanges)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleWindowVisibility</span><span class="params">(IBinder token, <span class="keyword">boolean</span> showWindow)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleSleeping</span><span class="params">(IBinder token, <span class="keyword">boolean</span> sleeping)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ApplicationThreadNative.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThreadNative</span> <span class="keyword">extends</span> <span class="title">Binder</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">IApplicationThread</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:</span><br><span class="line">        &#123;</span><br><span class="line">            data.enforceInterface(IApplicationThread.descriptor);</span><br><span class="line">            IBinder b = data.readStrongBinder();</span><br><span class="line">            <span class="keyword">boolean</span> finished = data.readInt() != <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">boolean</span> userLeaving = data.readInt() != <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> configChanges = data.readInt();</span><br><span class="line">            <span class="keyword">boolean</span> dontReport = data.readInt() != <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            schedulePauseActivity(b, finished, userLeaving, configChanges, dontReport);</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SCHEDULE_STOP_ACTIVITY_TRANSACTION:</span><br><span class="line">        &#123;</span><br><span class="line">            data.enforceInterface(IApplicationThread.descriptor);</span><br><span class="line">            IBinder b = data.readStrongBinder();</span><br><span class="line">            <span class="keyword">boolean</span> show = data.readInt() != <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> configChanges = data.readInt();</span><br><span class="line">            </span><br><span class="line">            scheduleStopActivity(b, show, configChanges);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ...      </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityThread.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 嵌入类</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">ApplicationThreadNative</span> </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">schedulePauseActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finished,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> userLeaving, <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> dontReport)</span> </span>&#123;</span><br><span class="line">            sendMessage(</span><br><span class="line">                    finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,</span><br><span class="line">                    token,</span><br><span class="line">                    (userLeaving ? <span class="number">1</span> : <span class="number">0</span>) | (dontReport ? <span class="number">2</span> : <span class="number">0</span>),</span><br><span class="line">                    configChanges);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleStopActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> showWindow,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> configChanges)</span> </span>&#123;</span><br><span class="line">           sendMessage(</span><br><span class="line">                showWindow ? H.STOP_ACTIVITY_SHOW : H.STOP_ACTIVITY_HIDE,</span><br><span class="line">                token, <span class="number">0</span>, configChanges);</span><br><span class="line">        &#125;</span><br><span class="line">     ...</span><br><span class="line">    &#125;        </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li>ApplicationNative继承了Binder实现了IApplicationThread，在ApplicationNative中可见<code>onTransact</code>这个典型的<code>AIDL</code>。也就是说实际上接口的方法在还是通过Binder的消息机制来实现了。但是最终却被<code>ApplicationThread.java</code>的方法实现</li><li>ApplicationThread是ActivityThread的<code>嵌入类</code>，而非Thread的派生类</li></ul><hr><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul><li>某种意义上，Context是整个应用框架的操作接口</li></ul><h5 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h5><ul><li>Android本质是四大组件和资源文件的容器，但是使用方式不同又比较复杂,Context就将一些细节封装起来，提供使用</li></ul><p><img src="Context%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="Context继承图"></p><hr><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><ul><li>应用本身的抽象，一个应用进程只有一个Appliction对象，在应用启动时候由框架创建</li></ul><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li>本身并没有实现太多功能，主要作用是提供一些回调接口来通知应用进程状态的变化</li></ul><h5 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h5><ul><li>onCreate()：应用创建时候调用</li><li>onTerminate()：应用销毁时候调用</li><li>onConfigurationChange()：系统配置发生变化时候调用</li><li>onLowMemory()：系统内存不足时候调用</li><li>onTrimMemory(int level): 系统要求释放多余内存时候调用</li></ul><h5 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">android:allowClearUserData</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:allowTaskReparenting</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:backupAgent</span> = <span class="string">"string"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:debuggable</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:description</span> = <span class="string">"string resource"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:enabled</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:hasCode</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:icon</span> = <span class="string">"drawable resource"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:killAfterRestore</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:label</span> = <span class="string">"string resource"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:manageSpaceActivity</span> = <span class="string">"string"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:name</span> = <span class="string">"string"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:permission</span> = <span class="string">"string"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:persistent</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:process</span> = <span class="string">"string"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:restoreAnyVersion</span> = <span class="string">[</span>"<span class="attr">true</span>" | "<span class="attr">false</span>"]  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:taskAffinity</span> = <span class="string">"string"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">android:theme</span> = <span class="string">"resource or theme"</span> &gt;</span>  </span><br><span class="line">    . . .  </span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p><strong>android:allowClearUserData</strong><br>是否给以用户删除用户数据的权限.<br>如果为true应用管理者就拥有清除数据的权限；false没有。默认为true。</p><p><strong>android:allowTaskReparenting</strong><br>应用定义的activities是否可以被从启动的任务转移到和他有相同并且将被带到前台的任务。<br>true他们可以被转移，如果为false，他们必须和启动他们的任务保持在一起。<br>默认为false。</p><p><strong>android:backupAgent</strong><br>实现应用的备份代理的类名，BackupAgent的子类。<br>这个属性的名称因该是全限定类名(如，”com.example.project.MyBackupAgent”)。<br>但是，如果名称的首字母被设置为点号，也可以为类名(如，”.MyBackupAgent”)，<br>他将被追加到在&lt; manifest /&gt;元素中定义的包名后。<br>没有默认值。</p><p><strong>android:debuggable</strong><br>应用是否可以使用debug，甚至运行在用户模式下。<br>true可以，false不能。默认为false。</p><p><strong>android:description</strong><br>用户可读的，比应用标签更长、更多的应用描述。<br>此值必须是一个引用字符串。不像标签，他不能被设置为硬编码字符串。没有默认值。</p><p><strong>android:enabled</strong><br>Android系统是否可以实例化应用的组件。<br>如果为true可以，如果为false不可以。<br>如果为true，每个组件的enabled属性决定了此组件。<br>如果为false，他重写了组件指定值，所有的组件将不还用。<br>默认为true。</p><p><strong>android:hasCode</strong><br>应用是否包含代码。<br>true表示包含，false表示不包含。<br>当值为false时，在启动组件是系统不会试着加载应用的任何代码。<br>默认为true。</p><p><strong>android:icon</strong><br>整个应用的图标，还是每个组件的默认图标。<br>这个属性值 必须 被设置为drawable资源的引用。<br>没有默认值。</p><p><strong>android:killAfterRestore</strong><br>在整型系统重置操作中，当他的设置被重置后，应用是否应该被终止。<br>单个包的重置操作不会引起应用被关闭。<br>整个系统的恢复操作仅代表性的发生一次，当电话第一次被设置时。<br>第三方应用将不会经常使用此属性。<br>默认值为true，意思是，当整个系统被恢复时，应用运行完他的数据后，将会终止。</p><p><strong>android:label</strong><br>一个易读的应用标签，并且还是应用的每个组件的默认标签。<br>这个标签应该被设置为引用字符串资源，当然他也可以像其他字符串一样在用户接口中指定。<br>但是为了方便，在应用开发时，可以被设置未定义字符串。</p><p><strong>android:manageSpaceActivity</strong><br>一个Activity子类的全限定名称，这个Activity可以被系统启动让用户管理此应用占有的存储空间。<br>这个Activity也应该用&lt; activity /&gt;元素声明。</p><p><strong>android:name</strong><br>为这个应用实现的Application子类的全限定名称。<br>当应用启动时，这个类将在应用的其他组件之前被实例化。<br>这个子类是可选的；大多数应用不需要。<br>在缺省时，Android使用基本Application类的实例。</p><p><strong>android:permission</strong><br>客户为了和应用交互必须设置的许可的名称。<br>这个属性是一个便利的途径为应用的组件设置许可。<br>他可以被组件的permission属性重写。</p><p><strong>android:persistent</strong><br>应用是否在所有时间下都保持运行。<br>true是，false不是。<br>默认为false。<br>通常情况下应用不应该设置此标识。<br>持久模式仅仅被几个系统应用指定。</p><p><strong>android:process</strong><br>为应用下的组件定一个运行进程名称。<br>每个组件可以定义自己的进程名称通过设置自己的process属性。<br>在默认情况下，Android为应用创建一个进程，当应用的第一个组件需要运行时。<br>所有的组件在同一个进程下运行。这个进程的名称和在&lt; manifest /&gt;元素设置的backage属性名相同。<br>通过设置这个属性在可以在其他应用中共享，你可以协调应用的组件在同一个进程中运行，但是只有两应用也共享用户ID和签订相同的证书。<br>如果这个属性的名称一个冒号(“:”)开始，一个新的私有的进程将被创建。<br>如果一个进程的名称以小写字母开头，一个公共的进程将被创建。<br>一个公共的进程可以被其他应用共享，来减少资源的使用。</p><p><strong>android:restoreAnyVersion</strong><br>表明这个应用准备尝试恢复所有的备份数据集合，甚至如果备份数据是比当前安装的应用高的编号存储的。<br>设置为true将允许备份管理者去尝试恢复当版本不匹配，意思是数据冲突。<br>要小心使用。默认为false。</p><p><strong>android:taskAffinity</strong><br>提供给应用下所有组件的类同名称，除了设置了自己的taskAffinity属性的组件。<br>默认情况下所有的组件使用相同的affinity。<br>Affinity的名称和在&lt; manifest /&gt;元素中设置的包名相同。</p><p><strong>android:theme</strong><br>为应用下的组件定义一个引用自样式资源的主题。<br>个别的activities可以设置自己的主题，通过设置自己的theme属性。</p><p><strong>android:allowBackup</strong><br>它表示是否允许应用程序参与备份。<br>如果将该属性设置为false,则即使备份整个系统,也不会执行这个应用程序的备份操作。<br>而整个系统备份能导致所有应用程序数据通过ADB来保存。<br>该属性必须是一个布尔值，或为true，或为false。<br>默认值为true。</p><p><strong>android:largeHeap</strong><br>应用程序是否使用一个比较大的堆创建。<br>它是一个布尔值，在没有配置的情况下，它的默认值是false。</p><hr><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li>ApplicationThread中的接口方法都是以<code>schedule</code>开头</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler笔记</title>
      <link href="/posts/8a8acd7/"/>
      <url>/posts/8a8acd7/</url>
      
        <content type="html"><![CDATA[<h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><ul><li><img src="handler.jpg" alt=""></li></ul><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><ul><li><code>Looper</code> 消息循环处理机制<ul><li>一个线程只能有一个Looper对象，Looper内部有个消息队列MessageQueue，用来存放所有的消息队列</li><li>除UI线程之外，其余线程中，系统不会为其自动创建Looper对象</li><li>即　<code>一个线程对应唯一一个Looper对象，Looper对象对应唯一MessageQueue</code></li></ul></li><li>Handler<ul><li>Message的接收者和处理者</li><li>Handler对象在构造时候和某一个Looper对象关联起来<ul><li>构造方法中，实现了<code>Looper.myLooper()</code></li></ul></li><li>Handler和Looper是多对一，反之则不行</li></ul></li><li>Message<ul><li>Message是消息载体，封装了任务携带的信息和处理该任务的handler</li><li>是Parcelable类的派生类,即 <code>Message</code>可以通过<code>binder</code>跨进程发送</li><li>尽管Message有public的默认构造方法，但是应该通过<strong>Message.obtain()</strong>来从消息池中获得空消息对象，以节省资源</li><li>Message如果只是需要携带简单的int对象，请优先使用<strong>arg1</strong> 和<strong>arg2</strong>来传递消息，比<strong>Bundle</strong>更省内存</li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>Looper实例必须通过<code>prepare()</code>创建，该方法会创建一个Looper对象，并把它保存在静态变量sThreadLocal中。一个线程多次调用该方法会报异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                    klass.getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mQueue = mLooper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li>图中 <code>Thread</code>应该修正为<code>ThreadLocal</code>,因为这样才保证一个线程中只有一个Looper实例</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置Nginx-rtmp-module实现推拉流</title>
      <link href="/posts/42187/"/>
      <url>/posts/42187/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li><p>ffmpeg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:kirillshkrogalev/ffmpeg-next</span><br><span class="line">sudo  apt-get update</span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure></li><li><p>新建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir nginx-src</span><br><span class="line">cd nginx-src</span><br></pre></td></tr></table></figure></li><li><p>nginx （tar -zxvf  解压）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.7.5.tar.gz</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>rtmp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/arut/nginx-rtmp-module.git</span><br></pre></td></tr></table></figure></li><li><p>开发库libpcre3-dev</p><ul><li>HTTP rewrite模块需要PCRE 库，要么你加个不要这个模块的选项重新配置nginx，要么就安装PCRE</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure></li><li><p>OpenSSL</p><ul><li>系统报告libpcre3早就装好了，其实只需要装开发库libpcre3-dev</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssl libssl-dev</span><br></pre></td></tr></table></figure></li></ul><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul><li>进入<code>nginx-1.7.5</code>编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-module=../nginx-rtmp-module --with-http_flv_module --with-http_mp4_module</span><br></pre></td></tr></table></figure><p><img src="%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><ul><li><p>ubuntu18.04 会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objs \</span><br><span class="line">      -oobjs/src/event/ngx_event_openssl.o \</span><br><span class="line">      src/event/ngx_event_openssl.c</span><br></pre></td></tr></table></figure><ul><li>解决方法： 卸载当前openssl  安装1.0.x的openssl</li></ul></li><li><p>这个每次执行完　都会有　类似 <code>make[1].....</code>，是正常的 </p></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">sudo ./sbin/nginx</span><br></pre></td></tr></table></figure><ul><li><p>浏览器输入　<code>localhost</code> 或者　<code>127.0.0.1</code></p><p>显示 <strong>Welcome to nginx</strong> 就是成功了</p></li></ul></li><li><p>配置rtmp直播点播模块 (<strong>usr/local/nginx/conf/ nginx.conf</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"># 配置Nginx，支持rtmp协议推流</span><br><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935; # 监听的端口</span><br><span class="line">    chunk_size 4000;</span><br><span class="line">        # rtmp是配置的应用的路径名称</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">            live on;</span><br><span class="line">            max_connections 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        # RTMP 推流路径</span><br><span class="line">        application hls&#123;</span><br><span class="line">            live on;</span><br><span class="line">            hls on;</span><br><span class="line">            #  /usr/local/var/www/hls 是自己创建的</span><br><span class="line">            hls_path /usr/local/var/www/hls;</span><br><span class="line">            hls_fragment 5s;</span><br><span class="line">        &#125;     </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">       location /stat &#123;    </span><br><span class="line">            rtmp_stat all;    </span><br><span class="line">            rtmp_stat_stylesheet stat.xsl;    </span><br><span class="line">        &#125;    </span><br><span class="line">  </span><br><span class="line">        location /stat.xsl &#123;    </span><br><span class="line">            root /usr/local/src/nginx-rtmp-module/;    </span><br><span class="line">        &#125;    </span><br><span class="line">          </span><br><span class="line">        location /control &#123;    </span><br><span class="line">            rtmp_control all;    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 配置Nginx，支持http协议拉流</span><br><span class="line">    location /hls &#123;</span><br><span class="line">      types &#123;</span><br><span class="line">        application/vnd.apple.mpegurl    m3u8;</span><br><span class="line">        video/mp2t ts;</span><br><span class="line">     &#125;</span><br><span class="line">      root /usr/local/var/www;</span><br><span class="line">       add_header Cache-Control    no-cache;</span><br><span class="line">    expires -1; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~\.flv &#123;</span><br><span class="line">                flv;</span><br><span class="line">         &#125;</span><br><span class="line">         location ~\.mp4$ &#123;</span><br><span class="line">            mp4;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>在/usr/local/ngin下</code>重启 <code>nginx</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><h5 id="推流-请先看完小结"><a href="#推流-请先看完小结" class="headerlink" title="推流 (请先看完小结)"></a>推流 (请先看完小结)</h5><ul><li>推 flv 格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ffmpeg -re -i /home/wl/video/one.flv -c copy -f flv rtmp://localhost:1935/hls/film</span><br></pre></td></tr></table></figure><ul><li>推　mp4　格式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ffmpeg -re -i /home/wl/video/ac.mp4 -vcodec  libx264  -acoder aac -f flv rtmp://localhost:1935/hls/film</span><br></pre></td></tr></table></figure><ul><li>video编码器用libx264(-vcodec libx264)；audio编码器用aac(-acodec aac)；打包格式是flv(-f flv)。<br>-re代表按照帧率发送，不加则默认按照服务器最高速率发送。</li></ul><h5 id="播放-请先看完小结"><a href="#播放-请先看完小结" class="headerlink" title="播放 (请先看完小结)"></a>播放 (请先看完小结)</h5><ul><li><p>VLC播放</p><p>VLC　 –&gt;  播放网络串流　: 输入　　<code>rtmp://localhost:1935/hls/home</code></p></li><li><p>命令行直接播放</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffplay rtmp://localhost:1935/hls/film</span><br><span class="line"><span class="meta">#</span><span class="bash"> rtmp://localhost:1935/hls/film　就是对应的推流的位置</span></span><br></pre></td></tr></table></figure><ul><li>网站播放 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://localhost:1935/hls/film</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h5 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h5><ul><li><p>开启服务器！！！！！！一定要先开启服务器！！！！不然推个🥁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">sudo ./sbin/nginx</span><br></pre></td></tr></table></figure></li><li><p>推流</p></li><li><p>播放</p></li></ul><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="%E6%95%88%E6%9E%9C.png" alt=""></p><h4 id="其余指令"><a href="#其余指令" class="headerlink" title="其余指令"></a>其余指令</h4><ul><li><p>加图片水印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i a.mp4 -i ice.png -filter_complex overlayoverlay -strict -2 a_out2.mp4</span><br><span class="line">//数据源 a.mp4</span><br><span class="line">//水印  ice.png</span><br><span class="line">//输出文件 a_out2.mp4</span><br><span class="line">//overlayoverlay=0:H-h 水印位置</span><br><span class="line">//overlayoverlay 默认左上角</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误备注"><a href="#错误备注" class="headerlink" title="错误备注"></a>错误备注</h4><h5 id="nginx-pid”-failed"><a href="#nginx-pid”-failed" class="headerlink" title="nginx.pid” failed"></a>nginx.pid” failed</h5><ul><li><p>nginx 报异常”/usr/local/nginx/logs/nginx.pid” failed (2: No such file or directory)处理方法</p><ul><li><p>出现的情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>原理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用nginx -c的参数指定nginx.conf文件的位置</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><ul><li>有时候配置不报错，但是播放链接无法打开<ul><li>解决办法： 关闭防火墙 （但凡使用局域网内相关通讯,一定要关闭防火墙）</li></ul></li></ul><p>#### </p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译FFmpeg</title>
      <link href="/posts/37996/"/>
      <url>/posts/37996/</url>
      
        <content type="html"><![CDATA[<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>Ubuntu 16.04 64位系统</li><li>FFmpeg3.2.1  　<a href="http://ffmpeg.org/download.html#releases">FFmpeg下载地址</a></li><li>ndk-r13b   （建议不要版本太高，否则gcc unable excute…）</li></ul><hr><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h5><ul><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ffmpeg-3.2.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>设置权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 ffmpeg-3.2.1</span><br></pre></td></tr></table></figure></li></ul><h5 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h5><ul><li><p>进入文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ffmpeg-3.2.1</span><br></pre></td></tr></table></figure></li><li><p>修改configure</p><ul><li>3.2.1版本的话,是第3245行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 将 configure 文件中的：</span><br><span class="line">SLIBNAME_WITH_MAJOR=&apos;$(SLIBNAME).$(LIBMAJOR)&apos; </span><br><span class="line">LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB) &quot;$(LIBDIR)/$(LIBNAME)&quot;&apos; </span><br><span class="line">SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_VERSION)&apos; </span><br><span class="line">SLIB_INSTALL_LINKS=&apos;$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)&apos;</span><br><span class="line"> </span><br><span class="line">#替换为</span><br><span class="line">SLIBNAME_WITH_MAJOR=&apos;$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)&apos;</span><br><span class="line">LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB)&quot;$(LIBDIR)/$(LIBNAME)&quot;&apos;</span><br><span class="line">SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_MAJOR)&apos;</span><br><span class="line">SLIB_INSTALL_LINKS=&apos;$(SLIBNAME)&apos;</span><br></pre></td></tr></table></figure><ul><li>Android 工程中只支持导入 .so 结尾的动态库，形如：libavcodec-57.so 。但是FFmpeg 编译生成的动态库默认格式为 xx.so.版本号 ，形如：libavcodec.so.57 ， 所以需要修改 FFmpeg 根目录下的 configure 文件，使其生成以 .so 结尾格式的动态库.</li></ul></li><li><p>赋予可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 configure</span><br></pre></td></tr></table></figure></li></ul><h5 id="make脚本"><a href="#make脚本" class="headerlink" title="make脚本"></a>make脚本</h5><hr><ul><li><p>方式一　<a href="https://blog.csdn.net/ywl5320/article/details/75040724">FFmpeg(3.3.2)移植Android平台</a></p></li><li><p>目录下新建　build.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> @Author: wl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> @Date:   2018-10-10 14:45:55</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> @Last Modified by:   wl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> @Last Modified time: 2018-10-10 16:31:32</span></span><br><span class="line"><span class="meta">#</span><span class="bash">　目的：　　</span></span><br><span class="line"><span class="meta">#</span><span class="bash">规定编译方式：　使其通过交叉编译生成需要的动态库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">选择需要的功能: 针对需求定制FFmpeg功能，精简动态库</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">make clean</span><br><span class="line"><span class="meta">#</span><span class="bash">填写你自己对应具体的ndk解压目录</span></span><br><span class="line">export NDK=/home/wl/Android/android-ndk-r13b</span><br><span class="line">export SYSROOT=$NDK/platforms/android-19/arch-arm/</span><br><span class="line">export TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64</span><br><span class="line">export CPU=arm</span><br><span class="line"><span class="meta">#</span><span class="bash">编译后的文件会放置在 当前路径下的android/arm／下</span></span><br><span class="line">export PREFIX=$(pwd)/android/$CPU </span><br><span class="line">export ADDI_CFLAGS="-marm"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">./configure 即为ffmpeg 根目录下的可执行文件configure</span></span><br><span class="line"><span class="meta">#</span><span class="bash">你可以在ffmpeg根目录下使用./configure --hellp 查看 ./configure后可填入的参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">虽然我也不是很了解这是啥意思</span></span><br><span class="line"></span><br><span class="line">./configure --target-os=linux \　 #目标系统</span><br><span class="line">        --prefix=$PREFIX --arch=arm \　#目标平台架构</span><br><span class="line">        --disable-doc \    #禁用不需要的功能，下同</span><br><span class="line">        --enable-shared \</span><br><span class="line">        --disable-static \   #禁止生成静态库</span><br><span class="line">        --disable-yasm \</span><br><span class="line">        --disable-symver \</span><br><span class="line">        --enable-gpl \</span><br><span class="line">        --disable-ffmpeg \</span><br><span class="line">        --disable-ffplay \</span><br><span class="line">        --disable-ffprobe \</span><br><span class="line">        --disable-ffserver \</span><br><span class="line">        --disable-doc \</span><br><span class="line">        --disable-symver \</span><br><span class="line">        --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \</span><br><span class="line">        --enable-cross-compile \</span><br><span class="line">        --sysroot=$SYSROOT \    #交叉编译环境</span><br><span class="line">        --extra-cflags="-Os -fpic $ADDI_CFLAGS" \ #额外需要的头文件</span><br><span class="line">        --extra-ldflags="$ADDI_CFLAGS" \    #额外需要的库      </span><br><span class="line">        $ADDITIONAL_CONFIGURE_FLAG</span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p>方式二<br><a href="https://www.jianshu.com/p/0a7f3175c1b9">使用Android Studio开发FFmpeg的正确姿势</a> </p><ul><li>说是可以编译多个平台的，但是自己尝试后没有成功</li></ul></li></ul><hr><ul><li><p>赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 build.sh</span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build.sh</span><br></pre></td></tr></table></figure></li><li><p>只要不报错,等待个十来二十分钟就可以了</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1539173168799&di=3aa897a42fda24667f6bed6ff997f37e&imgtype=0&src=http%3A%2F%2Fh.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F8718367adab44aede133be8bb81c8701a18bfb64.jpg" alt=""></p></li></ul><hr><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="%E7%BB%93%E6%9E%9C.png" alt="编译结果"></p><hr><h4 id="Android使用FFmpeg"><a href="#Android使用FFmpeg" class="headerlink" title="Android使用FFmpeg"></a>Android使用FFmpeg</h4><h5 id="项目总览"><a href="#项目总览" class="headerlink" title="项目总览"></a>项目总览</h5><p><img src="%E9%A1%B9%E7%9B%AE%E6%80%BB%E8%A7%88.png" alt="项目结构"></p><h5 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h5><ul><li>直接正常创建项目而不是使用AS自带的JNI项目</li></ul><h5 id="配置C文件"><a href="#配置C文件" class="headerlink" title="配置C文件"></a>配置C文件</h5><ul><li><p>src文件下创建jni目录</p></li><li><p>将编译之后的 <code>include</code>和lib目录下所有<code>.so文件</code>拷贝至<code>jni</code>目录下</p></li><li><p>在<code>java</code>目录下实现对应<code>native</code>方法。</p><ul><li><p>新建操作类，为了实现分离，案例中的是<code>FFmpeg.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FFmpeg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">urlprotocolinfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成对应的<code>.h</code>文件</p><ul><li><p>在<code>java</code>目录下执行　<code>javah   com.yfsd.ffmpeg.FFmpeg</code></p></li><li><p>执行完成后需要等待几秒,然后刷新一下。就会发生生成了一个 <code>com_yfsd_ffmpeg_FFmpeg.h</code>文件</p></li></ul></li><li><p>编写对应<code>.c</code>文件，名称随意</p></li><li><p>将<code>.c</code>和 <code>.h</code>文件全部复制到<code>jni</code>目录下面</p></li></ul></li></ul><h5 id="配置mk文件"><a href="#配置mk文件" class="headerlink" title="配置mk文件"></a>配置mk文件</h5><ul><li><p>Android.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FFmpeg library</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := avcodec</span><br><span class="line">LOCAL_SRC_FILES := libavcodec-57.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := avdevice</span><br><span class="line">LOCAL_SRC_FILES := libavdevice-57.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := avfilter</span><br><span class="line">LOCAL_SRC_FILES := libavfilter-6.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := avformat</span><br><span class="line">LOCAL_SRC_FILES := libavformat-57.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := avutil</span><br><span class="line">LOCAL_SRC_FILES := libavutil-55.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := postproc</span><br><span class="line">LOCAL_SRC_FILES := libpostproc-54.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := swresample</span><br><span class="line">LOCAL_SRC_FILES := libswresample-2.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := swscale</span><br><span class="line">LOCAL_SRC_FILES := libswscale-4.so</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Program</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := myffmpeg  <span class="comment">#模块名字母</span></span><br><span class="line">LOCAL_SRC_FILES := com_yfsd_ffmpeg_FFmpeg.c　<span class="comment">#你编写的.c文件</span></span><br><span class="line">LOCAL_C_INCLUDES += <span class="variable">$(LOCAL_PATH)</span>/<span class="keyword">include</span></span><br><span class="line">LOCAL_LDLIBS := -llog -lz</span><br><span class="line">LOCAL_SHARED_LIBRARIES := avcodec avdevice avfilter avformat avutil postproc swresample swscale</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure></li><li><p>Application.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个设置设备的架构，因为我们在ubuntu编译.so文件时候，设置的是arm，所以这里的设置armeabi</span></span><br><span class="line"><span class="comment"># 注意，虚拟机是无法使用的，因为虚拟机是x86</span></span><br><span class="line">APP_ABI := armeabi</span><br><span class="line">APP_PLATFORM=android-14</span><br></pre></td></tr></table></figure></li></ul><h5 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h5><ul><li><p>进入到　<code>jni</code>目录下,执行　<code>ndk-build</code><br><img src="ndk-build.png" alt="ndk-build"></p></li><li><p>在<code>src</code>目录下，会生成一个 <code>libs</code>的文件，将里面的<code>armeabi</code>文件夹复制到<code>app</code>目录下的<code>libs</code>中</p></li></ul><h5 id="完善"><a href="#完善" class="headerlink" title="完善　"></a>完善　</h5><ul><li><p>设置<code>build.gradle</code>文件下的<code>android</code>中设置<code>sourceSet</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 25</span><br><span class="line">    buildToolsVersion &quot;28.0.3&quot;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">       ...</span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters &apos;armeabi&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [&apos;libs&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">     ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>操作类FFmpeg.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FFmpeg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"avutil-55"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"avcodec-57"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"avformat-57"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"avdevice-57"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"swresample-2"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"swscale-4"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"postproc-54"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"avfilter-6"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"myffmpeg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">urlprotocolinfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mText;</span><br><span class="line">    <span class="keyword">private</span> FFmpeg fFmpeg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mText = (TextView) findViewById(R.id.mText);</span><br><span class="line">        fFmpeg = <span class="keyword">new</span> FFmpeg();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mText.setText(  fFmpeg.urlprotocolinfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><hr><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li><a href="https://github.com/wuhansan/FFmpegForAndroid_lib">Ubuntu编译FFmpeg生成库传送门</a></li></ul><ul><li><a href="https://developer.android.com/ndk/guides/android_mk">官方　Android.mk教程</a></li><li><a href="https://developer.android.com/ndk/guides/application_mk">官方　Application.mk教程</a></li><li><a href="https://blog.csdn.net/leixiaohua1020/article/details/47008825/">最简单的基于FFmpeg的移动端例子：Android HelloWorld</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment使用见解</title>
      <link href="/posts/62128/"/>
      <url>/posts/62128/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>public class Fragment extends Object implements ComponentCallbacks2, View.OnCreateContextMenuListener</li><li>Fragment是应用程序的用户界面或行为的一部分，可以放在一个Activity</li><li>Fragment与片段的交互通过完成FragmentManager，可以通过Activity.getFragmentManager()和 获得 Fragment.getFragmentManager()</li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><ul><li>Fragment在Activity的onCreate添加时<ul><li>Fragment的onAttach()-&gt;onCreate()-&gt;onCreateView()-&gt;onActivityCreated()-&gt;onStart()都是在Activity的onStart()中调用的</li><li>Fragment的onResume()在Activity的onResume()之后调用</li></ul></li></ul><h5 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h5><ul><li><p>多种形式需求</p><ul><li>Activity 操作内嵌的 Fragment</li><li>Fragment 操作宿主 Activity</li><li>Fragment 操作同属 Activity中的其他 Fragment</li></ul></li><li><p>子级Fragment 操作同属父级 Fragment中的其他子级Fragment</p></li><li><p>接口回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fragment</span></span><br><span class="line"><span class="keyword">private</span> Callbacks mCallbacks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnInterfacemCallback</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnItem</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    <span class="keyword">if</span>(context <span class="keyword">instanceof</span> OnFragmentInterfaceListener)&#123;</span><br><span class="line">        mCallbacks = (OnInterfacemCallback) context;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(context.toString()+<span class="string">"xxxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在该类中</span></span><br><span class="line">mCallbacks.OnItem(xx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Activity</span></span><br><span class="line"> implements xxFragment.Callbacks</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/hongyangAndroid/FABridge">FABridge</a></p></li><li><p>广播　</p></li><li><p>handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span></span>&#123; </span><br><span class="line">      <span class="comment">//声明一个Handler </span></span><br><span class="line">      <span class="keyword">public</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;       </span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123; </span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                 ...相应的处理代码</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     ...相应的处理代码</span><br><span class="line">   &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123; </span><br><span class="line">          <span class="comment">//保存Activity传递的handler</span></span><br><span class="line">           <span class="keyword">private</span> Handler mHandler;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123; </span><br><span class="line">                <span class="keyword">super</span>.onAttach(activity);</span><br><span class="line">               <span class="comment">//这个地方已经产生了耦合，若还有其他的activity，这个地方就得修改 </span></span><br><span class="line">                <span class="keyword">if</span>(activity instance MainActivity)&#123; </span><br><span class="line">                      mHandler =  ((MainActivity)activity).mHandler; </span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           ...相应的处理代码</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fragment对具体的Activity存在耦合，不利于Fragment复用</span></span><br><span class="line"><span class="comment"> * 不利于维护，若想删除相应的Activity，Fragment也得改动</span></span><br><span class="line"><span class="comment"> * 没法获取Activity的返回数据</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>等等……</p></li></ul><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><ul><li><p>inflate()</p><p>在OnCreateView()返回布局的时候， inflate()方法的第三个函数需要设置为 false。这是因为在Fragment内部类，会把该布局添加到container中。如果是设置为true就会添加两次，然后会报IllegaStateException。</p></li><li><p>commit()</p><p>这个方法的操作是异步，内部通过mManager.enqueueAction()加入处理队列。对应的同步方法是CommitNow();</p><p>但是如果开发人员在OnSaveInstanceState()后调用该方法就会报异常，相对的来说如果有需要在　　OnSaveInstanceState()之后执行提交操作,那么就只能调用CommitAllowingLogs(),但是不推荐。因此，注意不要将Fragment事物放在异步线程的回调中。</p></li><li><p>setArgumnet(Bundle bundle)</p><p>在传参数的时候建议使用该方法而不是通过Fragment添加参数的构造函数,因为使用这种方式,在内存紧张导致Fragment被系统kill并恢复时候能够保留这些数据。</p><p>我们在Fragment的<code>onAttach()</code>中通过<code>getArgumnet()</code>获得传进来的参数。如果获取Activity对象，不建议使用getActivity()，而是在onAttach()中将Context强转为Activity。</p></li><li><p>子级Fragment 操作同属父级 Fragment中的其他子级Fragment  需要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> SingleReplenishFragment singleReplenishFragment = <span class="keyword">new</span> SingleReplenishFragment();</span><br><span class="line"><span class="comment">//如果需要传参的话                </span></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putParcelable(<span class="string">"DataBean"</span>, (Parcelable) list.get(position));</span><br><span class="line">singleReplenishFragment.setArguments(bundle);</span><br><span class="line">                getParentFragment().getChildFragmentManager().beginTransaction().replace(R.id.fragment_replenish_main, singleReplenishFragment).commit();</span><br></pre></td></tr></table></figure></li></ul><h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h5><ul><li><p>实现思路</p><ul><li>在用户不可见的界面，只初始化UI，但不会加载数据。滑到对应界面，才会异步加载并更新UI</li></ul></li><li><p>主要方法</p><ul><li><p>setOffscreenPageLimit(x)　设置默认缓存界面 　</p></li><li><p>setUserVisibleHint(boolean isVisible)　</p><p>该方法会在onCreate() 之前调用，重写就好了。因为此时UI界面尚未绑定，为了防止加载数据过快导致的崩溃，所以需要做判定。</p></li><li><p>getUserVisibleHint</p><p>判断UI是否inflate</p></li></ul></li><li><p>实例</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-1309561/go5avgwbzg.jpeg?imageView2/2/w/1620" alt="lazyLoad"></p></li></ul><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><ul><li>摘录自　<a href="https://cloud.tencent.com/developer/article/1035535">Android基础：Fragment，看这篇就够了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Launcher3启动之后流程</title>
      <link href="/posts/16337/"/>
      <url>/posts/16337/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>Launcher创建模式是singleTask</p></li><li><p>没有<code>android.intent.category.LAUNCHER</code> 动作就意味着没有启动图标</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--只要设置这些Intent Filter　就可以作为桌面使用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.HOME"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="/Launcher%E5%90%AF%E5%8A%A8%E4%B9%8B%E5%90%8E%E6%B5%81%E7%A8%8B.png" alt=""></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="Launcher-java"><a href="#Launcher-java" class="headerlink" title="Launcher.java"></a>Launcher.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   ......</span><br><span class="line">       LauncherApplication app = ((LauncherApplication)getApplication());</span><br><span class="line">       mSharedPrefs = getSharedPreferences(LauncherApplication.getSharedPreferencesKey(),</span><br><span class="line">               Context.MODE_PRIVATE);</span><br><span class="line">       <span class="comment">//　第一步　创建管理对象</span></span><br><span class="line">       mModel = app.setLauncher(<span class="keyword">this</span>);  <span class="comment">//获取实例</span></span><br><span class="line">       mIconCache = app.getIconCache();</span><br><span class="line">       mDragController = <span class="keyword">new</span> DragController(<span class="keyword">this</span>);</span><br><span class="line">       mInflater = getLayoutInflater();</span><br><span class="line"></span><br><span class="line">       mAppWidgetManager = AppWidgetManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">       mAppWidgetHost = <span class="keyword">new</span> LauncherAppWidgetHost(<span class="keyword">this</span>, APPWIDGET_HOST_ID);</span><br><span class="line">       mAppWidgetHost.startListening();</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 防止重新加载桌面</span></span><br><span class="line">       mPaused = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//第二步　获取状态标志　　初始化一些状态</span></span><br><span class="line">         mSharedPrefs = getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),</span><br><span class="line">               Context.MODE_PRIVATE);</span><br><span class="line">       mIsSafeModeEnabled = getPackageManager().isSafeMode();</span><br><span class="line">       mModel = app.setLauncher(<span class="keyword">this</span>);</span><br><span class="line">       mIconCache = app.getIconCache();</span><br><span class="line">       mIconCache.flushInvalidIcons(grid);</span><br><span class="line">       mDragController = <span class="keyword">new</span> DragController(<span class="keyword">this</span>);</span><br><span class="line">       mInflater = getLayoutInflater();</span><br><span class="line"></span><br><span class="line">       mStats = <span class="keyword">new</span> Stats(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">       mAppWidgetManager = AppWidgetManagerCompat.getInstance(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">       mAppWidgetHost = <span class="keyword">new</span> LauncherAppWidgetHost(<span class="keyword">this</span>, APPWIDGET_HOST_ID);</span><br><span class="line">       mAppWidgetHost.startListening();</span><br><span class="line"></span><br><span class="line">       mPaused = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       checkForLocaleChange();</span><br><span class="line">       setContentView(R.layout.launcher);</span><br><span class="line">       <span class="comment">//　第三步　装载所有包含启动意图的视图　　　　ｓｔａrtLoader</span></span><br><span class="line">       setupViews();</span><br><span class="line">       showFirstRunWorkspaceCling();</span><br><span class="line">       registerContentObservers();</span><br><span class="line">       lockAllApps();</span><br><span class="line">       mSavedState = savedInstanceState;</span><br><span class="line">       restoreState(mSavedState);</span><br><span class="line">       ......</span><br><span class="line">　　<span class="comment">//第四步　加载所有应用操作</span></span><br><span class="line">       <span class="keyword">if</span> (!mRestoring) &#123;</span><br><span class="line">           <span class="keyword">if</span> (sPausedFromUserAction) &#123;</span><br><span class="line">               mModel.startLoader(<span class="keyword">true</span>, -<span class="number">1</span>);<span class="comment">//用户离开桌面再返回桌面，异步重新加载桌面</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//　用户旋转Ａｎｄｒｏｉd设备造成配置变换，同步装载当前页</span></span><br><span class="line">               mModel.startLoader(<span class="keyword">true</span>, mWorkspace.getCurrentPage());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (!mModel.isAllAppsLoaded()) &#123;<span class="comment">//　应用未被装载时，会显示圆形进度</span></span><br><span class="line">           ViewGroup appsCustomizeContentParent = (ViewGroup) mAppsCustomizeContent.getParent();</span><br><span class="line">           mInflater.inflate(R.layout.apps_customize_progressbar, appsCustomizeContentParent);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//　第五步　其他的初始化工作</span></span><br><span class="line">       mDefaultKeySsb = <span class="keyword">new</span> SpannableStringBuilder();</span><br><span class="line">       Selection.setSelection(mDefaultKeySsb, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       IntentFilter filter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);</span><br><span class="line">       registerReceiver(mCloseSystemDialogsReceiver, filter);　<span class="comment">//　注册可以拦截关闭系统对话框的广播</span></span><br><span class="line">       updateGlobalIcons();<span class="comment">//　更新桌面图标</span></span><br><span class="line">       unlockScreenOrientation(<span class="keyword">true</span>);　<span class="comment">// 解锁屏幕旋转状态</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>创建管理对象</p><ul><li><p><code>LauncherAppState</code></p><ul><li><p>给LauncherModel注册了四个Action</p></li><li><p>还实现一个桌面图标数据库内容观察者</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Register intent receivers</span></span><br><span class="line">     IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">     filter.addAction(Intent.ACTION_LOCALE_CHANGED);</span><br><span class="line">     filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);</span><br><span class="line">     sContext.registerReceiver(mModel, filter);</span><br><span class="line">     filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">     filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);</span><br><span class="line">     sContext.registerReceiver(mModel, filter);</span><br><span class="line">     filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">     filter.addAction(SearchManager.INTENT_ACTION_SEARCHABLES_CHANGED);</span><br><span class="line">     sContext.registerReceiver(mModel, filter);</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// Register for changes to the favorites</span></span><br><span class="line">     ContentResolver resolver = sContext.getContentResolver();</span><br><span class="line">     resolver.registerContentObserver(LauncherSettings.Favorites.CONTENT_URI, <span class="keyword">true</span>,</span><br><span class="line">             mFavoritesObserver);</span><br></pre></td></tr></table></figure></li></ul><h5 id="LauncherMode"><a href="#LauncherMode" class="headerlink" title="LauncherMode　"></a>LauncherMode　</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Launcher 是一个广播接收器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLoader</span><span class="params">(<span class="keyword">boolean</span> isLaunching, <span class="keyword">int</span> synchronousBindPage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"startLoader isLaunching="</span> + isLaunching);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//　装载桌面ＵＩ之前必须清除所有用于运行的对象，否则可能重复装载</span></span><br><span class="line">            mDeferredBindRunnables.clear();</span><br><span class="line">           <span class="comment">// 如果设置了回调对象，且可以获回调对象，且完成下面的工具</span></span><br><span class="line">            <span class="keyword">if</span> (mCallbacks != <span class="keyword">null</span> &amp;&amp; mCallbacks.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果正在当前正在处于装载，则停止装载(LoaderTask对象中停止)</span></span><br><span class="line">                isLaunching = isLaunching || stopLoaderLocked();</span><br><span class="line">                <span class="comment">//创建用于同步和异步装载桌面UI的LoaderTask对象</span></span><br><span class="line">                mLoaderTask = <span class="keyword">new</span> LoaderTask(mApp, isLaunching);</span><br><span class="line">                <span class="keyword">if</span> (synchronousBindPage &gt; -<span class="number">1</span> &amp;&amp; mAllAppsLoaded &amp;&amp; mWorkspaceLoaded) &#123;</span><br><span class="line">                   <span class="comment">// 如果设置了要装载的页索引，则同步装载桌面</span></span><br><span class="line">                    mLoaderTask.runBindSynchronousPage(synchronousBindPage);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sWorkerThread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">                    <span class="comment">// 异步装载　　调用LoaderTask的ｒｕｎ方法</span></span><br><span class="line">                    sWorker.post(mLoaderTask);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 　LoaderTask　即　mLoaderTask的内部实现</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isLaunching</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mIsLaunching;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isLoadingWorkspace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mIsLoadingAndBindingWorkspace;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//装载和绑定所有的Workspace</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadAndBindWorkspace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mIsLoadingAndBindingWorkspace = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// Load the workspace</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"loadAndBindWorkspace mWorkspaceLoaded="</span> + mWorkspaceLoaded);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//　没有转载就继续装载</span></span><br><span class="line">            <span class="keyword">if</span> (!mWorkspaceLoaded) &#123;</span><br><span class="line">                <span class="comment">// 装载Workspace</span></span><br><span class="line">                loadWorkspace();</span><br><span class="line">                <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mWorkspaceLoaded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bindWorkspace(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">waitForIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 等待，直到我们停止或其他线程完成.</span></span><br><span class="line">            <span class="comment">// 通过这种方式，我们不会开始加载所有的应用程序，直到工作空间确定下来。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> workspaceWaitTime = DEBUG_LOADERS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                mHandler.postIdle(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">                                mLoadAndBindStepFinished = <span class="keyword">true</span>;</span><br><span class="line">                                <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                                    Log.d(TAG, <span class="string">"done with previous binding step"</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                LoaderTask.<span class="keyword">this</span>.notify();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!mStopped &amp;&amp; !mLoadAndBindStepFinished &amp;&amp; !mFlushingWorkerThread) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// Just in case mFlushingWorkerThread changes but we aren't woken up,</span></span><br><span class="line">                        <span class="comment">// wait no longer than 1sec at a time</span></span><br><span class="line">                        <span class="keyword">this</span>.wait(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        <span class="comment">// Ignore</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"waited "</span></span><br><span class="line">                            + (SystemClock.uptimeMillis()-workspaceWaitTime)</span><br><span class="line">                            + <span class="string">"ms for previous step to finish binding"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//　装载指定页面的ui</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">runBindSynchronousPage</span><span class="params">(<span class="keyword">int</span> synchronousBindPage)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (synchronousBindPage &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Ensure that we have a valid page index to load synchronously</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Should not call runBindSynchronousPage() without "</span> +</span><br><span class="line">                        <span class="string">"valid page index"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mAllAppsLoaded || !mWorkspaceLoaded) &#123;</span><br><span class="line">                <span class="comment">// Ensure that we don't try and bind a specified page when the pages have not been</span></span><br><span class="line">                <span class="comment">// loaded already (we should load everything asynchronously in that case)</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Expecting AllApps and Workspace to be loaded"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mIsLoaderTaskRunning) &#123;</span><br><span class="line">                    <span class="comment">// Ensure that we are never running the background loading at this point since</span></span><br><span class="line">                    <span class="comment">// we also touch the background collections</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Error! Background loading is already running"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">XXX:</span> Throw an exception if we are already loading (since we touch the worker thread</span></span><br><span class="line">            <span class="comment">//      data structures, we can't allow any other thread to touch that data, but because</span></span><br><span class="line">            <span class="comment">//      this call is synchronous, we can get away with not locking).</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// The LauncherModel is static in the LauncherApplication and mHandler may have queued</span></span><br><span class="line">            <span class="comment">// operations from the previous activity.  We need to ensure that all queued operations</span></span><br><span class="line">            <span class="comment">// are executed before any synchronous binding work is done.</span></span><br><span class="line">            mHandler.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Divide the set of loaded items into those that we are binding synchronously, and</span></span><br><span class="line">            <span class="comment">// everything else that is to be bound normally (asynchronously).</span></span><br><span class="line">            bindWorkspace(synchronousBindPage);　<span class="comment">//绑定Workspace</span></span><br><span class="line">            <span class="comment">// <span class="doctag">XXX:</span> For now, continue posting the binding of AllApps as there are other issues that</span></span><br><span class="line">            onlyBindAllApps();  <span class="comment">//     绑定所有的Ａｎｄｒｏｉｄ应用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                mIsLoaderTaskRunning = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            keep_running: &#123;</span><br><span class="line">                <span class="comment">// Elevate priority when Home launches for the first time to avoid</span></span><br><span class="line">                <span class="comment">// starving at boot time. Staring at a blank home is not cool.</span></span><br><span class="line">                <span class="comment">//提高优先级，避免开机时候，ｈｏｍｅ　ｌａｕｎｃｈｅｒ第一次加载一片空白　</span></span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"Setting thread priority to "</span> +</span><br><span class="line">                            (mIsLaunching ? <span class="string">"DEFAULT"</span> : <span class="string">"BACKGROUND"</span>));</span><br><span class="line">                    Process.setThreadPriority(mIsLaunching</span><br><span class="line">                            ? Process.THREAD_PRIORITY_DEFAULT : Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//第一步. Load workspace first, 因为要要在里面添加应用程序</span></span><br><span class="line">                <span class="comment">// managed profile in all apps is deferred until onResume. See http://b/17336902.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"step 1: loading workspace"</span>);</span><br><span class="line">                loadAndBindWorkspace();　<span class="comment">//绑定　  workspace</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                    <span class="keyword">break</span> keep_running;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//等待ｕｉ线程</span></span><br><span class="line">                <span class="comment">// settled down.</span></span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mIsLaunching) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"Setting thread priority to BACKGROUND"</span>);</span><br><span class="line">                        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                waitForIdle();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第二步. Load all apps.　加载ａｐｐ</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"step 2: loading all apps"</span>);</span><br><span class="line">                loadAndBindAllApps();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 完成加载项目后，恢复默认的线程优先级</span></span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如有必要，请更新保存的图标</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"Comparing loaded icons to database icons"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (sBgLock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object key : sBgDbIconCache.keySet()) &#123;</span><br><span class="line">                    updateSavedIcon(mContext, (ShortcutInfo) key, sBgDbIconCache.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">                sBgDbIconCache.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清空一些不需要的数据</span></span><br><span class="line">            <span class="comment">// callback runnables are done.</span></span><br><span class="line">            mContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                <span class="comment">// If we are still the last one to be scheduled, remove ourselves.</span></span><br><span class="line">                <span class="keyword">if</span> (mLoaderTask == <span class="keyword">this</span>) &#123;</span><br><span class="line">                    mLoaderTask = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                mIsLoaderTaskRunning = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">                mStopped = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//　回收全部对象</span></span><br><span class="line">        <span class="function">Callbacks <span class="title">tryGetCallbacks</span><span class="params">(Callbacks oldCallbacks)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mCallbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> Callbacks callbacks = mCallbacks.get();</span><br><span class="line">                <span class="keyword">if</span> (callbacks != oldCallbacks) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (callbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"no mCallbacks"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> callbacks;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查Ｉｔｅｍ放置</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkItemPlacement</span><span class="params">(ItemInfo occupied[][][], ItemInfo item)</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadWorkspace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ......<span class="comment">//查询favorites表中的所有数据</span></span><br><span class="line">                  <span class="keyword">final</span> Cursor c = contentResolver.query(</span><br><span class="line">                        LauncherSettings.Favorites.CONTENT_URI, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">//  存储桌面的相应信息</span></span><br><span class="line">                  <span class="keyword">final</span> ItemInfo occupied[][][] =</span><br><span class="line">                        <span class="keyword">new</span> ItemInfo[Launcher.SCREEN_COUNT + <span class="number">1</span>][mCellCountX + <span class="number">1</span>][mCellCountY + <span class="number">1</span>];</span><br><span class="line">                 <span class="keyword">try</span> &#123;<span class="comment">// 获取favorites表中需要使用到的字段索引</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> idIndex = c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> intentIndex = c.getColumnIndexOrThrow</span><br><span class="line">                            (LauncherSettings.Favorites.INTENT);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> titleIndex = c.getColumnIndexOrThrow</span><br><span class="line">                            (LauncherSettings.Favorites.TITLE);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> iconTypeIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.ICON_TYPE);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> iconIndex = c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> iconPackageIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.ICON_PACKAGE);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> iconResourceIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.ICON_RESOURCE);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> containerIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.CONTAINER);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> itemTypeIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.ITEM_TYPE);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> appWidgetIdIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.APPWIDGET_ID);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> screenIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.SCREEN);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> cellXIndex = c.getColumnIndexOrThrow</span><br><span class="line">                            (LauncherSettings.Favorites.CELLX);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> cellYIndex = c.getColumnIndexOrThrow</span><br><span class="line">                            (LauncherSettings.Favorites.CELLY);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> spanXIndex = c.getColumnIndexOrThrow</span><br><span class="line">                            (LauncherSettings.Favorites.SPANX);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> spanYIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.SPANY);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> profileIdIndex = c.getColumnIndexOrThrow(</span><br><span class="line">                            LauncherSettings.Favorites.PROFILE_ID);</span><br><span class="line">    ......</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                    <span class="keyword">while</span> (!mStopped &amp;&amp; c.moveToNext()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">int</span> itemType = c.getInt(itemTypeIndex);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">switch</span> (itemType) &#123;               </span><br><span class="line">                            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:</span><br><span class="line">                                         <span class="comment">//获取当前页快捷方式</span></span><br><span class="line">                            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:</span><br><span class="line">                           ......</span><br><span class="line">                                    <span class="keyword">if</span> (intent.getAction() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                        intent.getCategories() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                        intent.getAction().equals(Intent.ACTION_MAIN) &amp;&amp;</span><br><span class="line">                                        intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) &#123;</span><br><span class="line">                                        intent.addFlags(</span><br><span class="line">                                            Intent.FLAG_ACTIVITY_NEW_TASK |</span><br><span class="line">                                            Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">......</span><br><span class="line">                                    <span class="comment">// check &amp; update map of what's occupied</span></span><br><span class="line">                                    <span class="keyword">if</span> (!checkItemPlacement(occupied, info)) &#123;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line"><span class="comment">// 不同容器中添加相应的快捷方式</span></span><br><span class="line">                                    <span class="keyword">switch</span> (container) &#123;</span><br><span class="line">                                           <span class="comment">//桌面添加</span></span><br><span class="line">                                    <span class="keyword">case</span> LauncherSettings.Favorites.CONTAINER_DESKTOP:</span><br><span class="line">                                  <span class="comment">// Ｈotseat 就是最下面的　五个快捷方式的位置</span></span><br><span class="line">                                     <span class="keyword">case</span> LauncherSettings.Favorites.CONTAINER_HOTSEAT:</span><br><span class="line">......</span><br><span class="line">                                        <span class="comment">//　当前需要添加桌面的文件夹</span></span><br><span class="line">                            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_FOLDER:</span><br><span class="line">......　<span class="comment">// 桌面视图类型是Ａｐｐ Widget</span></span><br><span class="line">                            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:</span><br><span class="line">           ......</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            Log.w(TAG, <span class="string">"Desktop items loading interrupted:"</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    c.close();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// 将需要删除的记录从favorites删除</span></span><br><span class="line">                <span class="keyword">if</span> (itemsToRemove.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    ContentProviderClient client = contentResolver.acquireContentProviderClient(</span><br><span class="line">                                    LauncherSettings.Favorites.CONTENT_URI);</span><br><span class="line">                    <span class="comment">// Remove dead items</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">long</span> id : itemsToRemove) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"Removed id = "</span> + id);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// Don't notify content observers</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            client.delete(LauncherSettings.Favorites.getContentUri(id, <span class="keyword">false</span>),</span><br><span class="line">                                    <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                            Log.w(TAG, <span class="string">"Could not remove id = "</span> + id);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"loaded workspace in "</span> + (SystemClock.uptimeMillis()-t) + <span class="string">"ms"</span>);</span><br><span class="line">                    Log.d(TAG, <span class="string">"workspace layout: "</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; mCellCountY; y++) &#123;</span><br><span class="line">                        String line = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; Launcher.SCREEN_COUNT; s++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                line += <span class="string">" | "</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; mCellCountX; x++) &#123;</span><br><span class="line">                                line += ((occupied[s][x][y] != <span class="keyword">null</span>) ? <span class="string">"#"</span> : <span class="string">"."</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Log.d(TAG, <span class="string">"[ "</span> + line + <span class="string">" ]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Filters the set of items who are directly or indirectly (via another container) on the</span></span><br><span class="line"><span class="comment">         * specified screen. */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterCurrentWorkspaceItems</span><span class="params">(<span class="keyword">int</span> currentScreen,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;ItemInfo&gt; allWorkspaceItems,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;ItemInfo&gt; currentScreenItems,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;ItemInfo&gt; otherScreenItems)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Purge any null ItemInfos</span></span><br><span class="line">            Iterator&lt;ItemInfo&gt; iter = allWorkspaceItems.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">                ItemInfo i = iter.next();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    iter.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If we aren't filtering on a screen, then the set of items to load is the full set of</span></span><br><span class="line">            <span class="comment">// items given.</span></span><br><span class="line">            <span class="keyword">if</span> (currentScreen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentScreenItems.addAll(allWorkspaceItems);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Order the set of items by their containers first, this allows use to walk through the</span></span><br><span class="line">            <span class="comment">// list sequentially, build up a list of containers that are in the specified screen,</span></span><br><span class="line">            <span class="comment">// as well as all items in those containers.</span></span><br><span class="line">            Set&lt;Long&gt; itemsOnScreen = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line">            Collections.sort(allWorkspaceItems, <span class="keyword">new</span> Comparator&lt;ItemInfo&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ItemInfo lhs, ItemInfo rhs)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">int</span>) (lhs.container - rhs.container);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span> (ItemInfo info : allWorkspaceItems) &#123;</span><br><span class="line">                <span class="keyword">if</span> (info.container == LauncherSettings.Favorites.CONTAINER_DESKTOP) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (info.screen == currentScreen) &#123;</span><br><span class="line">                        currentScreenItems.add(info);</span><br><span class="line">                        itemsOnScreen.add(info.id);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        otherScreenItems.add(info);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) &#123;</span><br><span class="line">                    currentScreenItems.add(info);</span><br><span class="line">                    itemsOnScreen.add(info.id);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (itemsOnScreen.contains(info.container)) &#123;</span><br><span class="line">                        currentScreenItems.add(info);</span><br><span class="line">                        itemsOnScreen.add(info.id);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        otherScreenItems.add(info);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Filters the set of widgets which are on the specified screen. */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterCurrentAppWidgets</span><span class="params">(<span class="keyword">int</span> currentScreen,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;LauncherAppWidgetInfo&gt; appWidgets,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;LauncherAppWidgetInfo&gt; currentScreenWidgets,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;LauncherAppWidgetInfo&gt; otherScreenWidgets)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// If we aren't filtering on a screen, then the set of items to load is the full set of</span></span><br><span class="line">            <span class="comment">// widgets given.</span></span><br><span class="line">            <span class="keyword">if</span> (currentScreen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentScreenWidgets.addAll(appWidgets);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (LauncherAppWidgetInfo widget : appWidgets) &#123;</span><br><span class="line">                <span class="keyword">if</span> (widget == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (widget.container == LauncherSettings.Favorites.CONTAINER_DESKTOP &amp;&amp;</span><br><span class="line">                        widget.screen == currentScreen) &#123;</span><br><span class="line">                    currentScreenWidgets.add(widget);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    otherScreenWidgets.add(widget);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Filters the set of folders which are on the specified screen. */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterCurrentFolders</span><span class="params">(<span class="keyword">int</span> currentScreen,</span></span></span><br><span class="line"><span class="function"><span class="params">                HashMap&lt;Long, ItemInfo&gt; itemsIdMap,</span></span></span><br><span class="line"><span class="function"><span class="params">                HashMap&lt;Long, FolderInfo&gt; folders,</span></span></span><br><span class="line"><span class="function"><span class="params">                HashMap&lt;Long, FolderInfo&gt; currentScreenFolders,</span></span></span><br><span class="line"><span class="function"><span class="params">                HashMap&lt;Long, FolderInfo&gt; otherScreenFolders)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// If we aren't filtering on a screen, then the set of items to load is the full set of</span></span><br><span class="line">            <span class="comment">// widgets given.</span></span><br><span class="line">            <span class="keyword">if</span> (currentScreen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                currentScreenFolders.putAll(folders);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> id : folders.keySet()) &#123;</span><br><span class="line">                ItemInfo info = itemsIdMap.get(id);</span><br><span class="line">                FolderInfo folder = folders.get(id);</span><br><span class="line">                <span class="keyword">if</span> (info == <span class="keyword">null</span> || folder == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (info.container == LauncherSettings.Favorites.CONTAINER_DESKTOP &amp;&amp;</span><br><span class="line">                        info.screen == currentScreen) &#123;</span><br><span class="line">                    currentScreenFolders.put(id, folder);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    otherScreenFolders.put(id, folder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** Sorts the set of items by hotseat, workspace (spatially from top to bottom, left to</span></span><br><span class="line"><span class="comment">         * right) */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortWorkspaceItemsSpatially</span><span class="params">(ArrayList&lt;ItemInfo&gt; workspaceItems)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">XXX:</span> review this</span></span><br><span class="line">            Collections.sort(workspaceItems, <span class="keyword">new</span> Comparator&lt;ItemInfo&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ItemInfo lhs, ItemInfo rhs)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> cellCountX = LauncherModel.getCellCountX();</span><br><span class="line">                    <span class="keyword">int</span> cellCountY = LauncherModel.getCellCountY();</span><br><span class="line">                    <span class="keyword">int</span> screenOffset = cellCountX * cellCountY;</span><br><span class="line">                    <span class="keyword">int</span> containerOffset = screenOffset * (Launcher.SCREEN_COUNT + <span class="number">1</span>); <span class="comment">// +1 hotseat</span></span><br><span class="line">                    <span class="keyword">long</span> lr = (lhs.container * containerOffset + lhs.screen * screenOffset +</span><br><span class="line">                            lhs.cellY * cellCountX + lhs.cellX);</span><br><span class="line">                    <span class="keyword">long</span> rr = (rhs.container * containerOffset + rhs.screen * screenOffset +</span><br><span class="line">                            rhs.cellY * cellCountX + rhs.cellX);</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">int</span>) (lr - rr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindWorkspaceItems</span><span class="params">(<span class="keyword">final</span> Callbacks oldCallbacks,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> ArrayList&lt;ItemInfo&gt; workspaceItems,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> ArrayList&lt;LauncherAppWidgetInfo&gt; appWidgets,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> HashMap&lt;Long, FolderInfo&gt; folders,</span></span></span><br><span class="line"><span class="function"><span class="params">                ArrayList&lt;Runnable&gt; deferredBindRunnables)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> postOnMainThread = (deferredBindRunnables != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bind the workspace items</span></span><br><span class="line">            <span class="keyword">int</span> N = workspaceItems.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += ITEMS_CHUNK) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> start = i;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> chunkSize = (i+ITEMS_CHUNK &lt;= N) ? ITEMS_CHUNK : (N-i);</span><br><span class="line">                <span class="keyword">final</span> Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                        <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            callbacks.bindItems(workspaceItems, start, start+chunkSize);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (postOnMainThread) &#123;</span><br><span class="line">                    deferredBindRunnables.add(r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    runOnMainThread(r, MAIN_THREAD_BINDING_RUNNABLE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bind the folders</span></span><br><span class="line">            <span class="keyword">if</span> (!folders.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">final</span> Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                        <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            callbacks.bindFolders(folders);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (postOnMainThread) &#123;</span><br><span class="line">                    deferredBindRunnables.add(r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    runOnMainThread(r, MAIN_THREAD_BINDING_RUNNABLE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bind the widgets, one at a time</span></span><br><span class="line">            N = appWidgets.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> LauncherAppWidgetInfo widget = appWidgets.get(i);</span><br><span class="line">                <span class="keyword">final</span> Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                        <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            callbacks.bindAppWidget(widget);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (postOnMainThread) &#123;</span><br><span class="line">                    deferredBindRunnables.add(r);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    runOnMainThread(r, MAIN_THREAD_BINDING_RUNNABLE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Binds all loaded data to actual views on the main thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindWorkspace</span><span class="params">(<span class="keyword">int</span> synchronizeBindPage)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> t = SystemClock.uptimeMillis();</span><br><span class="line">            Runnable r;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Don't use these two variables in any of the callback runnables.</span></span><br><span class="line">            <span class="comment">// Otherwise we hold a reference to them.</span></span><br><span class="line">            <span class="keyword">final</span> Callbacks oldCallbacks = mCallbacks.get();</span><br><span class="line">            <span class="keyword">if</span> (oldCallbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// This launcher has exited and nobody bothered to tell us.  Just bail.</span></span><br><span class="line">                Log.w(TAG, <span class="string">"LoaderTask running with no launcher"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> isLoadingSynchronously = (synchronizeBindPage &gt; -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> currentScreen = isLoadingSynchronously ? synchronizeBindPage :</span><br><span class="line">                oldCallbacks.getCurrentWorkspaceScreen();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load all the items that are on the current page first (and in the process, unbind</span></span><br><span class="line">            <span class="comment">// all the existing workspace items before we call startBinding() below.</span></span><br><span class="line">            unbindWorkspaceItemsOnMainThread();</span><br><span class="line">            ArrayList&lt;ItemInfo&gt; workspaceItems = <span class="keyword">new</span> ArrayList&lt;ItemInfo&gt;();</span><br><span class="line">            ArrayList&lt;LauncherAppWidgetInfo&gt; appWidgets =</span><br><span class="line">                    <span class="keyword">new</span> ArrayList&lt;LauncherAppWidgetInfo&gt;();</span><br><span class="line">            HashMap&lt;Long, FolderInfo&gt; folders = <span class="keyword">new</span> HashMap&lt;Long, FolderInfo&gt;();</span><br><span class="line">            HashMap&lt;Long, ItemInfo&gt; itemsIdMap = <span class="keyword">new</span> HashMap&lt;Long, ItemInfo&gt;();</span><br><span class="line">            <span class="keyword">synchronized</span> (sBgLock) &#123;</span><br><span class="line">                workspaceItems.addAll(sBgWorkspaceItems);</span><br><span class="line">                appWidgets.addAll(sBgAppWidgets);</span><br><span class="line">                folders.putAll(sBgFolders);</span><br><span class="line">                itemsIdMap.putAll(sBgItemsIdMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;ItemInfo&gt; currentWorkspaceItems = <span class="keyword">new</span> ArrayList&lt;ItemInfo&gt;();</span><br><span class="line">            ArrayList&lt;ItemInfo&gt; otherWorkspaceItems = <span class="keyword">new</span> ArrayList&lt;ItemInfo&gt;();</span><br><span class="line">            ArrayList&lt;LauncherAppWidgetInfo&gt; currentAppWidgets =</span><br><span class="line">                    <span class="keyword">new</span> ArrayList&lt;LauncherAppWidgetInfo&gt;();</span><br><span class="line">            ArrayList&lt;LauncherAppWidgetInfo&gt; otherAppWidgets =</span><br><span class="line">                    <span class="keyword">new</span> ArrayList&lt;LauncherAppWidgetInfo&gt;();</span><br><span class="line">            HashMap&lt;Long, FolderInfo&gt; currentFolders = <span class="keyword">new</span> HashMap&lt;Long, FolderInfo&gt;();</span><br><span class="line">            HashMap&lt;Long, FolderInfo&gt; otherFolders = <span class="keyword">new</span> HashMap&lt;Long, FolderInfo&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Separate the items that are on the current screen, and all the other remaining items</span></span><br><span class="line">            filterCurrentWorkspaceItems(currentScreen, workspaceItems, currentWorkspaceItems,</span><br><span class="line">                    otherWorkspaceItems);</span><br><span class="line">            filterCurrentAppWidgets(currentScreen, appWidgets, currentAppWidgets,</span><br><span class="line">                    otherAppWidgets);</span><br><span class="line">            filterCurrentFolders(currentScreen, itemsIdMap, folders, currentFolders,</span><br><span class="line">                    otherFolders);</span><br><span class="line">            sortWorkspaceItemsSpatially(currentWorkspaceItems);</span><br><span class="line">            sortWorkspaceItemsSpatially(otherWorkspaceItems);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Tell the workspace that we're about to start binding items</span></span><br><span class="line">            r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                    <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        callbacks.startBinding();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            runOnMainThread(r, MAIN_THREAD_BINDING_RUNNABLE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load items on the current page</span></span><br><span class="line">            bindWorkspaceItems(oldCallbacks, currentWorkspaceItems, currentAppWidgets,</span><br><span class="line">                    currentFolders, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (isLoadingSynchronously) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                        <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            callbacks.onPageBoundSynchronously(currentScreen);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                runOnMainThread(r, MAIN_THREAD_BINDING_RUNNABLE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load all the remaining pages (if we are loading synchronously, we want to defer this</span></span><br><span class="line">            <span class="comment">// work until after the first render)</span></span><br><span class="line">            mDeferredBindRunnables.clear();</span><br><span class="line">            bindWorkspaceItems(oldCallbacks, otherWorkspaceItems, otherAppWidgets, otherFolders,</span><br><span class="line">                    (isLoadingSynchronously ? mDeferredBindRunnables : <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Tell the workspace that we're done binding items</span></span><br><span class="line">            r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                    <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        callbacks.finishBindingItems();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// If we're profiling, ensure this is the last thing in the queue.</span></span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"bound workspace in "</span></span><br><span class="line">                            + (SystemClock.uptimeMillis()-t) + <span class="string">"ms"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    mIsLoadingAndBindingWorkspace = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (isLoadingSynchronously) &#123;</span><br><span class="line">                mDeferredBindRunnables.add(r);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                runOnMainThread(r, MAIN_THREAD_BINDING_RUNNABLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadAndBindAllApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"loadAndBindAllApps mAllAppsLoaded="</span> + mAllAppsLoaded);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mAllAppsLoaded) &#123;</span><br><span class="line">                loadAllAppsByBatch();</span><br><span class="line">                <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mAllAppsLoaded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                onlyBindAllApps();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onlyBindAllApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Callbacks oldCallbacks = mCallbacks.get();</span><br><span class="line">            <span class="keyword">if</span> (oldCallbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// This launcher has exited and nobody bothered to tell us.  Just bail.</span></span><br><span class="line">                Log.w(TAG, <span class="string">"LoaderTask running with no launcher (onlyBindAllApps)"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// shallow copy</span></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="keyword">final</span> ArrayList&lt;ApplicationInfo&gt; list</span><br><span class="line">                    = (ArrayList&lt;ApplicationInfo&gt;) mBgAllAppsList.data.clone();</span><br><span class="line">            Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> t = SystemClock.uptimeMillis();</span><br><span class="line">                    <span class="keyword">final</span> Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">                    <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        callbacks.bindAllApplications(list);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"bound all "</span> + list.size() + <span class="string">" apps from cache in "</span></span><br><span class="line">                                + (SystemClock.uptimeMillis()-t) + <span class="string">"ms"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">boolean</span> isRunningOnMainThread = !(sWorkerThread.getThreadId() == Process.myTid());</span><br><span class="line">            <span class="keyword">if</span> (oldCallbacks.isAllAppsVisible() &amp;&amp; isRunningOnMainThread) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mHandler.post(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadAllAppsByBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> t = DEBUG_LOADERS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Don't use these two variables in any of the callback runnables.</span></span><br><span class="line">            <span class="comment">// Otherwise we hold a reference to them.</span></span><br><span class="line">            <span class="keyword">final</span> Callbacks oldCallbacks = mCallbacks.get();</span><br><span class="line">            <span class="keyword">if</span> (oldCallbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// This launcher has exited and nobody bothered to tell us.  Just bail.</span></span><br><span class="line">                Log.w(TAG, <span class="string">"LoaderTask running with no launcher (loadAllAppsByBatch)"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Intent mainIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN, <span class="keyword">null</span>);</span><br><span class="line">            mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> List&lt;UserHandle&gt; profiles = mUserManager.getUserProfiles();</span><br><span class="line"></span><br><span class="line">            mBgAllAppsList.clear();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> profileCount = profiles.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; profileCount; p++) &#123;</span><br><span class="line">                UserHandle user = profiles.get(p);</span><br><span class="line">                List&lt;LauncherActivityInfo&gt; apps = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">int</span> N = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> startIndex;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> batchSize = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; N &amp;&amp; !mStopped) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">long</span> qiaTime = DEBUG_LOADERS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">                        apps = mLauncherApps.getActivityList(<span class="keyword">null</span>, user);</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"queryIntentActivities took "</span></span><br><span class="line">                                    + (SystemClock.uptimeMillis()-qiaTime) + <span class="string">"ms"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (apps == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        N = apps.size();</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"queryIntentActivities got "</span> + N + <span class="string">" apps"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// There are no apps?!?</span></span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (mBatchSize == <span class="number">0</span>) &#123;</span><br><span class="line">                            batchSize = N;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            batchSize = mBatchSize;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">long</span> sortTime = DEBUG_LOADERS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">                        Collections.sort(apps,</span><br><span class="line">                                <span class="keyword">new</span> LauncherModel.ShortcutNameComparator(mLabelCache));</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"sort took "</span></span><br><span class="line">                                    + (SystemClock.uptimeMillis()-sortTime) + <span class="string">"ms"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> t2 = DEBUG_LOADERS ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    startIndex = i;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; i&lt;N &amp;&amp; j&lt;batchSize; j++) &#123;</span><br><span class="line">                        <span class="comment">// This builds the icon bitmaps.</span></span><br><span class="line">                        mBgAllAppsList.add(<span class="keyword">new</span> ApplicationInfo(apps.get(i), user,</span><br><span class="line">                                mIconCache, mLabelCache));</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> ArrayList&lt;ApplicationInfo&gt; added = mBgAllAppsList.added;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> firstProfile = p == <span class="number">0</span>;</span><br><span class="line">                    mBgAllAppsList.added = <span class="keyword">new</span> ArrayList&lt;ApplicationInfo&gt;();</span><br><span class="line">                    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">long</span> t = SystemClock.uptimeMillis();</span><br><span class="line">                            <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (firstProfile) &#123;</span><br><span class="line">                                    callbacks.bindAllApplications(added);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    callbacks.bindAppsAdded(added);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                                    Log.d(TAG, <span class="string">"bound "</span> + added.size() + <span class="string">" apps in "</span></span><br><span class="line">                                        + (SystemClock.uptimeMillis() - t) + <span class="string">"ms"</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                Log.i(TAG, <span class="string">"not binding apps: no Launcher activity"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    .....</span><br><span class="line">                    <span class="keyword">if</span> (mAllAppsLoadDelay &gt; <span class="number">0</span> &amp;&amp; i &lt; N) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                                Log.d(TAG, <span class="string">"sleeping for "</span> + mAllAppsLoadDelay + <span class="string">"ms"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            Thread.sleep(mAllAppsLoadDelay);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException exc) &#123; &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"cached all "</span> + N + <span class="string">" apps in "</span></span><br><span class="line">                            + (SystemClock.uptimeMillis()-t) + <span class="string">"ms"</span></span><br><span class="line">                            + (mAllAppsLoadDelay &gt; <span class="number">0</span> ? <span class="string">" (including delay)"</span> : <span class="string">""</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dumpState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>不管是　<code>mLoaderTask.runBindSynchronousPage(synchronousBindPage)</code>　还是　<code>sWorker.post(mLoaderTask)</code>运行的<code>run()</code>　，完成的主要工作只有如下两个：</p><ul><li><p>装载和绑定Workspace　　　<code>loadAndBindWorkspace</code></p></li><li><p>装载和绑定所有的Android应用    <code>loadAndBindAllApps</code></p></li></ul></li></ul><ul><li><p>如果应用没有装载，<code>loadAndBindAllApps</code>会调用<code>loadAllAppsByBatch</code>方法批量安装Android应用</p></li><li><p>如果应用已装载，就调用<code>onlyBindAllApps</code>方法绑定</p></li></ul><ul><li><p>对于Workspace来说，需要先调用loadWorkspace 方法装载Workspace，然后调用bindWorkspace装载Workspace，所以现在处理Workspace和Android应用有四个实现方法 :</p><ul><li><p>loadWorkspace   装载Workspace</p></li><li><p>bindWorkspace  绑定Workspace</p></li><li><p>loadAllAppsByBatch 批量装载所有的Android应用</p></li><li><p>onlyBindAllApps　　绑定所有的Android应用</p></li></ul></li></ul><ul><li><p>loadAllAppsByBatch方法说明</p><ul><li><p>构造一个<code>CATEGORY_LAUNCHER</code>类型的Intent</p></li><li><p>从mContext变量中获取一个<code>PackagerManagerService</code>的接口</p></li><li><p>通过接口<code>queryIntentActivities</code>取回所有的 Action类型为<code>Intent.ACTION_MAIN</code>，且 Category类型为<code>Intent.CATEGORY_LAUNCHER</code>的Activity</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android应用管理之PackageManagerService</title>
      <link href="/posts/2232/"/>
      <url>/posts/2232/</url>
      
        <content type="html"><![CDATA[<h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="PackageManagerService%E4%B8%BB%E8%A6%81%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt=""></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="PMS"><a href="#PMS" class="headerlink" title="PMS"></a>PMS</h5><ul><li>ContextImpl.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PackageManager <span class="title">getPackageManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mPackageManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mPackageManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IPackageManager pm = ActivityThread.getPackageManager();</span><br><span class="line">    <span class="keyword">if</span> (pm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Doesn't matter if we make more than one instance.</span></span><br><span class="line">        <span class="keyword">return</span> (mPackageManager = <span class="keyword">new</span> ApplicationPackageManager(<span class="keyword">this</span>, pm));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityThread.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPackageManager <span class="title">getPackageManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sPackageManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//Slog.v("PackageManager", "returning cur default = " + sPackageManager);</span></span><br><span class="line">        <span class="keyword">return</span> sPackageManager;</span><br><span class="line">    &#125;</span><br><span class="line">    IBinder b = ServiceManager.getService(<span class="string">"package"</span>);</span><br><span class="line">    <span class="comment">//Slog.v("PackageManager", "default service binder = " + b);</span></span><br><span class="line">    sPackageManager = IPackageManager.Stub.asInterface(b);</span><br><span class="line">    <span class="comment">//Slog.v("PackageManager", "default service = " + sPackageManager);</span></span><br><span class="line">    <span class="keyword">return</span> sPackageManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li>应用常规安装操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.fromFile(<span class="keyword">new</span> File(filePath));</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">intent.serDataAndType(Uri,application/vnd.android.<span class="keyword">package</span>-archive)</span><br><span class="line">startActivity(intent)</span><br><span class="line"><span class="comment">// Android系统应用PackageInstall 中有一个PackageInstallerActivity 会响应这个 Intent</span></span><br></pre></td></tr></table></figure><ul><li><p>复制文件</p></li><li><p>装载应用</p></li></ul><h5 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h5><ul><li>卸载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PackageManagerService.java    </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackage</span><span class="params">(<span class="keyword">final</span> String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> IPackageDeleteObserver2 observer, <span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> <span class="keyword">int</span> flags)</span> </span>&#123;<span class="comment">// 检查执行权限</span></span><br><span class="line">        mContext.enforceCallingOrSelfPermission(</span><br><span class="line">                android.Manifest.permission.DELETE_PACKAGES, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">        <span class="keyword">if</span> (UserHandle.getUserId(uid) != userId) &#123;</span><br><span class="line">            mContext.enforceCallingPermission(</span><br><span class="line">                    android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,</span><br><span class="line">                    <span class="string">"deletePackage for user "</span> + userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_UNINSTALL_APPS)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;　<span class="comment">//　如果权限不够，发送错误信息</span></span><br><span class="line">                observer.onPackageDeleted(packageName,</span><br><span class="line">                        PackageManager.DELETE_FAILED_USER_RESTRICTED, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br><span class="line">        <span class="comment">// Queue up an async operation since the package deletion may take a little while.</span></span><br><span class="line">        mHandler.post(<span class="keyword">new</span> Runnable() &#123;　<span class="comment">//　在消息处理方法中执行卸载应用操作</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mHandler.removeCallbacks(<span class="keyword">this</span>);</span><br><span class="line">                <span class="comment">//　调用　　deletePackageX　执行应用操作</span></span><br><span class="line">                <span class="comment">// 即，实际上还是调用的　deletePackageX 方法</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> returnCode = deletePackageX(packageName, userId, flags);</span><br><span class="line">                <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 发送卸载应用结果</span></span><br><span class="line">                        observer.onPackageDeleted(packageName, returnCode, <span class="keyword">null</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">"Observer no longer exists."</span>);</span><br><span class="line">                    &#125; <span class="comment">//end catch</span></span><br><span class="line">                &#125; <span class="comment">//end if</span></span><br><span class="line">            &#125; <span class="comment">//end run</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *　deletePackageX</span></span><br><span class="line"><span class="comment"> *  收集了应用在不同用户下安装情况后，调用deletePackageLI方法</span></span><br><span class="line"><span class="comment"> *　</span></span><br><span class="line"><span class="comment"> *  deletePackageLI</span></span><br><span class="line"><span class="comment"> *　执行删除操作，如果是某个系统应用升级包，还会发出以前的应用又重新使用</span></span><br><span class="line"><span class="comment"> *　主要是根据不同用户的安装情况来删除应用的apk文件和数据，以及PackageManagerService缓存的应用数据</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">queryIntentActivities()</td><td align="center">查询处理Intent的Activity列表</td></tr><tr><td align="center">queryIntentServices()</td><td align="center">查询处理Intent的Service列表</td></tr><tr><td align="center">queryIntentReceivers()</td><td align="center">查询处理Intent的Receiver列表</td></tr><tr><td align="center">queryIntentContentProviders()</td><td align="center">查询处理Intent的Provider列表</td></tr></tbody></table><h5 id="守护"><a href="#守护" class="headerlink" title="守护"></a>守护</h5><ul><li>init.rc</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service installd /system/bin/installd</span><br><span class="line">    class main</span><br><span class="line">    socket installd stream 600 system system</span><br></pre></td></tr></table></figure><ul><li>初始化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//framework/native/cmds/installd.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFER_MAX];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> alen;</span><br><span class="line">    <span class="keyword">int</span> lsocket, s, count;</span><br><span class="line">    <span class="keyword">int</span> selinux_enabled = (is_selinux_enabled() &gt; <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">union</span> selinux_callback cb;<span class="comment">//　初始化</span></span><br><span class="line">    cb.func_log = log_callback;</span><br><span class="line">    selinux_set_callback(SELINUX_CB_LOG, cb);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialize_globals() &lt; <span class="number">0</span>) &#123;　　<span class="comment">//初始化全局变量</span></span><br><span class="line">        ALOGE(<span class="string">"Could not initialize globals; exiting.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialize_directories() &lt; <span class="number">0</span>) &#123;<span class="comment">//初始化创建所有用户的安装目录</span></span><br><span class="line">        ALOGE(<span class="string">"Could not create directories; exiting.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selinux_enabled &amp;&amp; selinux_status_open(<span class="literal">true</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Could not open selinux status; exiting.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    drop_privileges();　<span class="comment">//　更改installd进程权限，使用系统调用prctl来保留进程的能力</span></span><br><span class="line"></span><br><span class="line">    lsocket = android_get_control_socket(SOCKET_PATH);</span><br><span class="line">    <span class="keyword">if</span> (lsocket &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Failed to get socket from environment: %s\n"</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (listen(lsocket, <span class="number">5</span>)) &#123;　<span class="comment">// 监听　socket</span></span><br><span class="line">        ALOGE(<span class="string">"Listen on socket failed: %s\n"</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fcntl(lsocket, F_SETFD, FD_CLOEXEC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        alen = <span class="keyword">sizeof</span>(addr);</span><br><span class="line">        s = accept(lsocket, &amp;addr, &amp;alen);　<span class="comment">//　接受连接</span></span><br><span class="line">        <span class="keyword">if</span> (s &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Accept failed: %s\n"</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fcntl(s, F_SETFD, FD_CLOEXEC);</span><br><span class="line">        <span class="comment">//　立即处理新连接，这样installd一次就只能处理一个请求</span></span><br><span class="line">        ALOGI(<span class="string">"new connection\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> short count;</span><br><span class="line">            <span class="keyword">if</span> (readx(s, &amp;count, <span class="keyword">sizeof</span>(count))) &#123;　<span class="comment">//读取命令长度</span></span><br><span class="line">                ALOGE(<span class="string">"failed to read size\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((count &lt; <span class="number">1</span>) || (count &gt;= BUFFER_MAX)) &#123;　<span class="comment">//如果命令长度错误就停止处理</span></span><br><span class="line">                ALOGE(<span class="string">"invalid size %d\n"</span>, count);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (readx(s, buf, count)) &#123;　<span class="comment">//读取命令</span></span><br><span class="line">                ALOGE(<span class="string">"failed to read command\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            buf[count] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (selinux_enabled &amp;&amp; selinux_status_updated() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                selinux_android_seapp_context_reload();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//　执行命令  struct cmdinfo cmds[]  中对应的命令</span></span><br><span class="line">            <span class="keyword">if</span> (execute(s, buf)) <span class="keyword">break</span>;　</span><br><span class="line">        &#125;</span><br><span class="line">        ALOGI(<span class="string">"closing connection\n"</span>);</span><br><span class="line">        close(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>变更</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drop_privileges</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prctl(PR_SET_KEEPCAPS, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123; <span class="comment">//保存进程权限</span></span><br><span class="line">        ALOGE(<span class="string">"prctl(PR_SET_KEEPCAPS) failed: %s\n"</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (setgid(AID_INSTALL) &lt; <span class="number">0</span>) &#123;　<span class="comment">// 设置进程gid为　"install"</span></span><br><span class="line">        ALOGE(<span class="string">"setgid() can't drop privileges; exiting.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (setuid(AID_INSTALL) &lt; <span class="number">0</span>) &#123;　<span class="comment">// 设置进程uid为　"install"</span></span><br><span class="line">        ALOGE(<span class="string">"setuid() can't drop privileges; exiting.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">user_cap_header_struct</span> <span class="title">capheader</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">user_cap_data_struct</span> <span class="title">capdata</span>[2];</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;capheader, <span class="number">0</span>, <span class="keyword">sizeof</span>(capheader));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;capdata, <span class="number">0</span>, <span class="keyword">sizeof</span>(capdata));</span><br><span class="line">    capheader.version = _LINUX_CAPABILITY_VERSION_3;</span><br><span class="line">    capheader.pid = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * permitted    effective inheritable</span></span><br><span class="line"><span class="comment"> *  　</span></span><br><span class="line"><span class="comment"> * 分别对应kernel进程结构　task_struct中</span></span><br><span class="line"><span class="comment">     * cap_permitted</span></span><br><span class="line"><span class="comment">     * cap_effective</span></span><br><span class="line"><span class="comment">     * cap_inheritable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    capdata[CAP_TO_INDEX(CAP_DAC_OVERRIDE)].permitted |= CAP_TO_MASK(CAP_DAC_OVERRIDE);</span><br><span class="line">    capdata[CAP_TO_INDEX(CAP_CHOWN)].permitted        |= CAP_TO_MASK(CAP_CHOWN);</span><br><span class="line">    capdata[CAP_TO_INDEX(CAP_SETUID)].permitted       |= CAP_TO_MASK(CAP_SETUID);</span><br><span class="line">    capdata[CAP_TO_INDEX(CAP_SETGID)].permitted       |= CAP_TO_MASK(CAP_SETGID);</span><br><span class="line">    capdata[CAP_TO_INDEX(CAP_FOWNER)].permitted       |= CAP_TO_MASK(CAP_FOWNER);</span><br><span class="line"></span><br><span class="line">    capdata[<span class="number">0</span>].effective = capdata[<span class="number">0</span>].permitted;</span><br><span class="line">    capdata[<span class="number">1</span>].effective = capdata[<span class="number">1</span>].permitted;</span><br><span class="line">    capdata[<span class="number">0</span>].inheritable = <span class="number">0</span>;</span><br><span class="line">    capdata[<span class="number">1</span>].inheritable = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (capset(&amp;capheader, &amp;capdata[<span class="number">0</span>]) &lt; <span class="number">0</span>) &#123; <span class="comment">//设置进程权限</span></span><br><span class="line">        ALOGE(<span class="string">"capset failed: %s\n"</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commands.c  </span></span><br><span class="line"><span class="comment">//　该方法在　installd.c 中被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">install</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pkgname, <span class="keyword">uid_t</span> uid, <span class="keyword">gid_t</span> gid, <span class="keyword">const</span> <span class="keyword">char</span> *seinfo)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">char</span> pkgdir[PKG_PATH_MAX];</span><br><span class="line">      <span class="keyword">char</span> libsymlink[PKG_PATH_MAX];</span><br><span class="line">      <span class="keyword">char</span> applibdir[PKG_PATH_MAX];</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">libStat</span>;</span></span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> ((uid &lt; AID_SYSTEM) || (gid &lt; AID_SYSTEM)) &#123;　<span class="comment">//检查uid和gid</span></span><br><span class="line">          ALOGE(<span class="string">"invalid uid/gid: %d %d\n"</span>, uid, gid);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 得到应用的数据目录名 /data/data/&lt;包名&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (create_pkg_path(pkgdir, pkgname, PKG_DIR_POSTFIX, <span class="number">0</span>)) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot create package path\n"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 得到应用的动态库目录名 /data/data/&lt;包名&gt;/lib</span></span><br><span class="line">      <span class="keyword">if</span> (create_pkg_path(libsymlink, pkgname, PKG_LIB_POSTFIX, <span class="number">0</span>)) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot create package lib symlink origin path\n"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 得到/app-lib目录下的符号链接名称 /data/app-lib/&lt;包名&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (create_pkg_path_in_dir(applibdir, &amp;android_app_lib_dir, pkgname, PKG_DIR_POSTFIX)) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot create package lib symlink dest path\n"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">//创建应用的数据目录</span></span><br><span class="line">      <span class="keyword">if</span> (mkdir(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot create dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 修改目录权限</span></span><br><span class="line">      <span class="keyword">if</span> (chmod(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot chmod dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">          unlink(pkgdir);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 检查符号链接是否已经存在</span></span><br><span class="line">      <span class="keyword">if</span> (lstat(libsymlink, &amp;libStat) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (errno != ENOENT) &#123;</span><br><span class="line">              ALOGE(<span class="string">"couldn't stat lib dir: %s\n"</span>, strerror(errno));</span><br><span class="line">              <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (S_ISDIR(libStat.st_mode)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (delete_dir_contents(libsymlink, <span class="number">1</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                  ALOGE(<span class="string">"couldn't delete lib directory during install for: %s"</span>, libsymlink);</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (S_ISLNK(libStat.st_mode)) &#123;</span><br><span class="line">              <span class="keyword">if</span> (unlink(libsymlink) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                  ALOGE(<span class="string">"couldn't unlink lib directory during install for: %s"</span>, libsymlink);</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">//为目录设置SELinux的安全上下文</span></span><br><span class="line">      <span class="keyword">if</span> (selinux_android_setfilecon(pkgdir, pkgname, seinfo, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot setfilecon dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">          unlink(libsymlink);</span><br><span class="line">          unlink(pkgdir);</span><br><span class="line">          <span class="keyword">return</span> -errno;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 创建符号链接</span></span><br><span class="line">      <span class="keyword">if</span> (symlink(applibdir, libsymlink) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          ALOGE(<span class="string">"couldn't symlink directory '%s' -&gt; '%s': %s\n"</span>, libsymlink, applibdir,</span><br><span class="line">                  strerror(errno));</span><br><span class="line">          unlink(pkgdir);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 修改目录的gid和uid</span></span><br><span class="line">      <span class="keyword">if</span> (chown(pkgdir, uid, gid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          ALOGE(<span class="string">"cannot chown dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">          unlink(libsymlink);</span><br><span class="line">          unlink(pkgdir);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>优化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// command.c  </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 启动一个子进程来执行优化，同时会根据目前系统使用的是Dalvik虚拟机还是ART</span></span><br><span class="line"><span class="comment">   * 来决定将apk文件转换成任何格式。</span></span><br><span class="line"><span class="comment">   *　</span></span><br><span class="line"><span class="comment">   *　如果是 odex　格式，则调用　/sysytem/bin/dexopt 文件来执行转换工作</span></span><br><span class="line"><span class="comment">   *　如果是　ART　的　oat　格式，则调用/ system/bin/dex2oat　来执行转换</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">dexopt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *apk_path, <span class="keyword">uid_t</span> uid, <span class="keyword">bool</span> is_public,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">const</span> <span class="keyword">char</span> *pkgname, <span class="keyword">const</span> <span class="keyword">char</span> *instruction_set,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">bool</span> vm_safe_mode, <span class="keyword">bool</span> is_patchoat)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>移动</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// command.c  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">movefiles</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">      d = opendir(UPDATE_COMMANDS_DIR_PREFIX); <span class="comment">//　打开/system/etc/updatecmds　目录</span></span><br><span class="line">  ......</span><br><span class="line">      <span class="keyword">while</span> ((de = readdir(d))) &#123;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">char</span> *name = de-&gt;d_name;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (de-&gt;d_type == DT_DIR) &#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              subfd = openat(dfd, name, O_RDONLY);　<span class="comment">//　读取目录下的文件</span></span><br><span class="line">  ......</span><br><span class="line">              <span class="keyword">while</span> (<span class="number">1</span>) &#123;　<span class="comment">//　循环执行文件的所有命令</span></span><br><span class="line">                  bufi = bufp;</span><br><span class="line">                  <span class="keyword">while</span> (bufi &lt; bufe &amp;&amp; buf[bufi] != <span class="string">'\n'</span>) &#123;</span><br><span class="line">                      bufi++;</span><br><span class="line">      .......</span><br><span class="line">                          <span class="comment">//　执行结果就是移动文件或者目录</span></span><br><span class="line">                                  movefileordir(srcpath, dstpath,</span><br><span class="line">                                          <span class="built_in">strlen</span>(dstpath)-<span class="built_in">strlen</span>(buf+bufp),</span><br><span class="line">                                          dstuid, dstgid, &amp;s);</span><br><span class="line">     ......</span><br><span class="line">  ｝</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>实际上，系统中进行apk文件格式转换、建立数据目录等工作最后是由InstallD进程来完成的。因为PMS所在SystemServer属于System用户组，没有root权限。然而，在文件系统中更改目录和复制删除文件都需要root权限才能完成。</li><li>为什么installd的用户install也不是root,但是！！</li><li>installd架构就是监听一个本地socket，该socket通过在init.rc文件指定服务属性的方式创建。</li><li>installd.c中drop_privileges() 使用系统调用prctl来保留进程的能力，<strong>能力(<code>capability</code>)</strong>是Linux内核2.1之后引入的概念。</li></ul><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><ul><li>笔记摘要：《深入解析Android5.0系统》刘超　　第十一章：APK安装、卸载、优化　</li><li>本博客基于　<code>基于Android版本  5.1_LMY47D</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Framework中添加自定义系统服务</title>
      <link href="/posts/28791/"/>
      <url>/posts/28791/</url>
      
        <content type="html"><![CDATA[<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="aidl"><a href="#aidl" class="headerlink" title="aidl"></a>aidl</h5><ul><li>frameworks/base/core/java/android/app/ISystemStatusManager.aidl</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package android.app;</span><br><span class="line"></span><br><span class="line">interface ISystemStatusManager</span><br><span class="line">&#123;</span><br><span class="line">    String[] getSystemStatus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改mk"><a href="#修改mk" class="headerlink" title="修改mk"></a>修改mk</h5><ul><li><p>frameworks/base/Android.mk</p></li><li><p>加到LOCAL_SRC_FILES后面，注意看清楚是哪个LOCAL_SRC_FILES</p></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## READ ME: ########################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## When updating this list of aidl files, consider if that aidl is</span></span><br><span class="line"><span class="comment">## part of the SDK API.  If it is, also add it to the list below that</span></span><br><span class="line"><span class="comment">## is preprocessed and distributed with the SDK.  This list should</span></span><br><span class="line"><span class="comment">## not contain any aidl files for parcelables, but the one below should</span></span><br><span class="line"><span class="comment">## if you intend for 3rd parties to be able to send those objects</span></span><br><span class="line"><span class="comment">## across process boundaries.</span></span><br><span class="line"><span class="comment">##  </span></span><br><span class="line"><span class="comment">## READ ME: ########################################################</span></span><br><span class="line">LOCAL_SRC_FILES += \</span><br><span class="line">    core/java/android/app/ISystemStatusManager.aidl\</span><br><span class="line">core/java/android/accessibilityservice/IAccessibilityServiceConnection.aidl \</span><br><span class="line">core/java/android/accessibilityservice/IAccessibilityServiceClient.aidl \</span><br><span class="line">core/java/android/accounts/IAccountManager.aidl \</span><br></pre></td></tr></table></figure><h5 id="service实现"><a href="#service实现" class="headerlink" title="service实现"></a>service实现</h5><ul><li>frameworks/base/services/core/java/com/android/server/SystemStatusManagerService.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.ISystemStatusManager;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.util.Slog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wl</span></span><br><span class="line"><span class="comment"> * on 18-9-26</span></span><br><span class="line"><span class="comment"> * Userfor: 实现自定义服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemStatusManagerService</span> <span class="keyword">extends</span>  <span class="title">ISystemStatusManager</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemStatusManagerService</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line"></span><br><span class="line">        Slog.d(<span class="string">"SystemStatus"</span>, <span class="string">"Date:"</span> + getDateTime() + <span class="string">"\nVersion:"</span> + getVersion());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSystemStatus() &#123;</span><br><span class="line">        String[] infos = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        infos[<span class="number">0</span>] = <span class="string">"Date:"</span> + getDateTime();</span><br><span class="line">        infos[<span class="number">1</span>] = <span class="string">"Version:"</span> + getVersion();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> infos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-DD-mm HH:mm:s"</span>);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> format.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Build.DISPLAY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="manager"><a href="#manager" class="headerlink" title="manager"></a>manager</h5><ul><li>frameworks/base/core/java/android/app/SystemStatusManager.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Slog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemStatusManager</span> </span>&#123;</span><br><span class="line">    Context mContext;</span><br><span class="line">    ISystemStatusManager mService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemStatusManager</span><span class="params">(Context context, ISystemStatusManager service)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mService = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSystemStatus() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mService != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mService.getSystemStatus();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Slog.e(<span class="string">"SystemStatus"</span>, <span class="string">"RemoteException "</span> + e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service-名称定义"><a href="#service-名称定义" class="headerlink" title="service　名称定义"></a>service　名称定义</h5><ul><li>frameworks/base/core/java/android/content/Context.java中添加service名称定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ISystemStatusManager.aidl</span></span><br><span class="line"><span class="comment">    * SystemStatusManagerService</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_STATUS_SERVICE = <span class="string">"system_status_service"</span>;</span><br><span class="line"><span class="comment">//　可以搜索一下类似的格式　然后对比，这样不容易写错位置</span></span><br></pre></td></tr></table></figure><h5 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h5><ul><li>frameworks/base/services/java/com/android/server/SystemServer.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;<span class="comment">// 在startOtherServices方法里面添加</span></span><br><span class="line">      ......</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                ServiceManager.addService(Context.SYSTEM_STATUS_SERVICE, <span class="keyword">new</span> SystemStatusManagerService(context));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Failure starting System Status Service "</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">  ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务　"></a>注册服务　</h5><ul><li>frameworks/base/core/java/android/app/ContextImpl.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123; <span class="comment">// 在ｓｔａｔｉｃ方法里面添加</span></span><br><span class="line">    registerService(SYSTEM_STATUS_SERVICE, <span class="keyword">new</span> ServiceFetcher() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">createService</span><span class="params">(ContextImpl ctx)</span> </span>&#123;</span><br><span class="line">            IBinder b = ServiceManager.getService(SYSTEM_STATUS_SERVICE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SystemStatusManager(ctx, ISystemStatusManager.Stub.asInterface(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译-jar包"><a href="#编译-jar包" class="headerlink" title="编译 jar包"></a>编译 jar包</h5><ul><li><p>编译前需要先 <code>make update-api</code>,然后正常编译即可!!这一步必须要,否则会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">see build/core/apicheck_msg_current.txt</span><br><span class="line">******************************</span><br><span class="line">You have tried to change the API from what has been previously approved.</span><br><span class="line"></span><br><span class="line">To make these errors go away, you have two choices:</span><br><span class="line">   1) You can add "@hide" javadoc comments to the methods, etc. listed in the</span><br><span class="line">      errors above.</span><br><span class="line"></span><br><span class="line">   2) You can update current.txt by executing the following command:</span><br><span class="line">         make update-api</span><br><span class="line"></span><br><span class="line">      To submit the revised current.txt to the main Android repository,</span><br><span class="line">      you will need approval.</span><br><span class="line">******************************</span><br></pre></td></tr></table></figure><ul><li>谷歌对于所有的类和API，分为开方和非开放两种，而开放的类和API，可以通过“Javadoc标签”与源码同步生成“程序的开发文档”；当我们修改或者添加一个新的API时，我们有两种方案可以避免出现上述错误.<ul><li>其一是将该接口加上 非公开的标签：/*{@hide}/</li><li>再者可以在修改后执行：make update-api(公开)，将修改内容与API的doc文件更新到一致</li></ul></li><li>修改后相应API文件后，在base库下面会产生“.current.txt”文件的差异</li></ul></li></ul><hr><ul><li><p>正式编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd xx/                      //进入源码目录</span><br><span class="line">source build/envsetup.sh    //初始化编译环境 </span><br><span class="line">cd framework/base  //进入 framework/base</span><br><span class="line">mmm core/res         //生成framework-res.apk</span><br><span class="line"></span><br><span class="line">******</span><br><span class="line">cd xxx/framework/base</span><br><span class="line">mm -B//生成framework.jar</span><br><span class="line"></span><br><span class="line">*******</span><br><span class="line">cd xxx/framework/base/services/java</span><br><span class="line">mm</span><br></pre></td></tr></table></figure></li><li><p>文件位置　</p><ul><li>xxx/out/target/product/generic/system/framework 　  </li></ul></li><li><p>图示</p><ul><li><p>编译framework-res.apk<br><img src="%E7%BC%96%E8%AF%91framework-res.apk.png" alt="framework-res.apk"></p></li><li><p>编译framework.jar<br><img src="framework.jar.png" alt="framework.jar"></p></li><li><p>编译service.jar</p><p><img src="service.jar.png" alt="service.jar"></p></li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>编译framework-res.apk、framework.jar和services.jar,push到/system/framework后,重启手机</p></li><li><p>提示没有权限的话  </p><ul><li>adb root(前提是：手机root了)</li><li>adb remount，重新挂载系统分区(前提是：adb root)</li><li>adb shell “mount -o rw,remount /system”</li><li>注意：有的系统编译framework后还生成了secondary_framework.jar，也需要push</li></ul></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SystemStatusManager mManager = (SystemStatusManager) getSystemService(Context.SYSTEM_STATUS_SERVICE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;    </span><br><span class="line">    String[] infos = mManager.getSystemStatus();</span><br><span class="line">    Log.i(<span class="string">"SystemStatus"</span>, <span class="string">"SystemStatus Date:"</span> + infos[<span class="number">0</span>] + <span class="string">"\nVersion:"</span> +infos[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><ul><li>参考自　<a href="https://blog.csdn.net/sgzy001/article/details/54344739">在android framework中添加自定义系统服务</a></li><li>后面又看到一篇，和参考的博客有些不一样。所以也贴出来　<a href="https://www.jianshu.com/p/d01949651484">Android自定义系统服务</a></li><li>本博客基于　<code>基于Android版本  5.1_LMY47D</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher3启动</title>
      <link href="/posts/24087/"/>
      <url>/posts/24087/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>Home 程序应用Launcher由ActivityManagerService 启动，而ActivityManagerService和　PackageManagerService　都是开机时候由SystemServer组件启动的。SystemServer组件首先启动PackageManagerService来安装系统的应用程序，当系统中安装应用程序后，SystemServer组件接下来会通过ActivityManagerService来启动Home应用程序Launcher。在启动Launcher时会通过ActivityManagerService把系统中已经安装好的应用程序以快捷图标的形式展示在桌面上。</li></ul><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="/Launcher3%E5%90%AF%E5%8A%A8.png" alt=""></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li>Home应用程序Launcher启动之后，将PackageManagerService保存的信息取出来，以快捷图标形式取出</li></ul><h5 id="设置系统进程"><a href="#设置系统进程" class="headerlink" title="设置系统进程"></a>设置系统进程</h5><ul><li>ActivityManagerService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">//添加ＡMS实例添加到ServiceManager中托管</span></span><br><span class="line">            <span class="comment">//那么　ServiceManager.getService　获取　这个唯一的实例</span></span><br><span class="line">            ServiceManager.addService(Context.ACTIVITY_SERVICE, <span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">            ServiceManager.addService(ProcessStats.SERVICE_NAME, mProcessStats);</span><br><span class="line">            ServiceManager.addService(<span class="string">"meminfo"</span>, <span class="keyword">new</span> MemBinder(<span class="keyword">this</span>));</span><br><span class="line">            ServiceManager.addService(<span class="string">"gfxinfo"</span>, <span class="keyword">new</span> GraphicsBinder(<span class="keyword">this</span>));</span><br><span class="line">            ServiceManager.addService(<span class="string">"dbinfo"</span>, <span class="keyword">new</span> DbBinder(<span class="keyword">this</span>));</span><br><span class="line">            <span class="keyword">if</span> (MONITOR_CPU_USAGE) &#123;</span><br><span class="line">                ServiceManager.addService(<span class="string">"cpuinfo"</span>, <span class="keyword">new</span> CpuBinder(<span class="keyword">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            ServiceManager.addService(<span class="string">"permission"</span>, <span class="keyword">new</span> PermissionController(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">            ApplicationInfo info = mContext.getPackageManager().getApplicationInfo(</span><br><span class="line">                    <span class="string">"android"</span>, STOCK_PM_FLAGS);</span><br><span class="line">            <span class="comment">//  mSystemThread = ActivityThread.currentActivityThread();</span></span><br><span class="line">            <span class="comment">//　把应用程序框架层的Android包加载进来</span></span><br><span class="line">            mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                ProcessRecord app = newProcessRecordLocked(info, info.processName, <span class="keyword">false</span>, <span class="number">0</span>);</span><br><span class="line">                app.persistent = <span class="keyword">true</span>;</span><br><span class="line">                app.pid = MY_PID;</span><br><span class="line">                app.maxAdj = ProcessList.SYSTEM_ADJ;</span><br><span class="line">                app.makeActive(mSystemThread.getApplicationThread(), mProcessStats);</span><br><span class="line">                mProcessNames.put(app.processName, app.uid, app);</span><br><span class="line">                <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</span><br><span class="line">                    mPidsSelfLocked.put(app.pid, app);</span><br><span class="line">                &#125;</span><br><span class="line">                updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                updateOomAdjLocked();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to find android system package"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//　被　ＳｙstemServer　调用</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">(<span class="keyword">final</span> Runnable goingCallback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">                <span class="comment">// If we're done calling all the receivers, run the next "boot phase" passed in</span></span><br><span class="line">                <span class="comment">// by the SystemServer</span></span><br><span class="line">                <span class="keyword">if</span> (goingCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    goingCallback.run();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// SystemServer 调用</span></span><br><span class="line">                        systemReady(goingCallback);</span><br><span class="line">               ......</span><br><span class="line">        retrieveSettings();</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动Home主页</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">startHomeActivityLocked</span><span class="params">(<span class="keyword">int</span> userId, String reason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</span><br><span class="line">                &amp;&amp; mTopAction == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We are running in factory test mode, but unable to find</span></span><br><span class="line">            <span class="comment">// the factory test app, so just sit around displaying the</span></span><br><span class="line">            <span class="comment">// error message and don't try to start anything.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Intent intent = getHomeIntent();</span><br><span class="line">        ActivityInfo aInfo =</span><br><span class="line">            resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);</span><br><span class="line">        <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent.setComponent(<span class="keyword">new</span> ComponentName(</span><br><span class="line">                    aInfo.applicationInfo.packageName, aInfo.name));</span><br><span class="line">            <span class="comment">// Don't do this if the home app is currently being</span></span><br><span class="line">            <span class="comment">// instrumented.</span></span><br><span class="line">            aInfo = <span class="keyword">new</span> ActivityInfo(aInfo);</span><br><span class="line">            aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);</span><br><span class="line">           <span class="comment">//第一次启动时候返回的　ProcessRecord实例是　null</span></span><br><span class="line">            ProcessRecord app = getProcessRecordLocked(aInfo.processName,</span><br><span class="line">                    aInfo.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (app == <span class="keyword">null</span> || app.instrumentationClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">                mStackSupervisor.startHomeActivity(intent, aInfo, reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建　CATEGORY_HOME　的Intent,那么就会向PackageManagerService查询</span></span><br><span class="line">   <span class="function">Intent <span class="title">getHomeIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(mTopAction, mTopData != <span class="keyword">null</span> ? Uri.parse(mTopData) : <span class="keyword">null</span>);</span><br><span class="line">        intent.setComponent(mTopComponent);</span><br><span class="line">        <span class="keyword">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class="line">            intent.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityStackSupervisor.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startHomeActivity</span><span class="params">(Intent intent, ActivityInfo aInfo, String reason)</span> </span>&#123;</span><br><span class="line">     moveHomeStackTaskToTop(HOME_ACTIVITY_TYPE, reason);</span><br><span class="line">    <span class="comment">//　把　com.android.launcher2.Launcher　启动</span></span><br><span class="line">     startActivityLocked(<span class="keyword">null</span>, intent, <span class="keyword">null</span>, aInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>ActivityStack.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startActivityLocked</span><span class="params">(ActivityRecord r, <span class="keyword">boolean</span> newTask,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">boolean</span> doResume, <span class="keyword">boolean</span> keepCurTransition, Bundle options)</span> </span>&#123;</span><br><span class="line">           ...</span><br><span class="line"> <span class="keyword">if</span> (task == r.task) &#123;</span><br><span class="line">                   <span class="comment">// Here it is!  Now, if this is not yet visible to the</span></span><br><span class="line">                   <span class="comment">// user, then just add it without starting; it will</span></span><br><span class="line">                   <span class="comment">// get started when the user navigates back to it.</span></span><br><span class="line">                   <span class="keyword">if</span> (!startIt) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG_ADD_REMOVE) Slog.i(TAG, <span class="string">"Adding activity "</span> + r + <span class="string">" to task "</span></span><br><span class="line">                               + task, <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>).fillInStackTrace());</span><br><span class="line">                       task.addActivityToTop(r);</span><br><span class="line">                       r.putInHistory();</span><br><span class="line">                       <span class="comment">//　WMS的操作　！！！</span></span><br><span class="line">                       mWindowManager.addAppToken(task.mActivities.indexOf(r), r.appToken,</span><br><span class="line">                               r.task.taskId, mStackId, r.info.screenOrientation, r.fullscreen,</span><br><span class="line">                               (r.info.flags &amp; ActivityInfo.FLAG_SHOW_ON_LOCK_SCREEN) != <span class="number">0</span>,</span><br><span class="line">                               r.userId, r.info.configChanges, task.voiceSession != <span class="keyword">null</span>,</span><br><span class="line">                               r.mLaunchTaskBehind);</span><br><span class="line">                       <span class="keyword">if</span> (VALIDATE_TOKENS) &#123;</span><br><span class="line">                           validateAppTokensLocked();</span><br><span class="line">                       &#125;</span><br><span class="line">                       ActivityOptions.abort(options);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">......</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Bionic</title>
      <link href="/posts/1936/"/>
      <url>/posts/1936/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>Android的基础库之一，是Android和Linux系统内核的桥梁</li><li>包含很多基础模块功能，基本都是源于Linux，同时增加了自己的新模块</li><li>Android平台为c/c++开发者进行原生应用程序开发所提供的符合POSIX（可移植系统接口）标准的C库</li><li>包含系统中最基本的库,包括libc 、libm、libdl、 libstd++、 libthread_db以及Android特有的链接器linker</li></ul><p><strong><em>通俗的说，就是NDK的API</em></strong></p><h4 id="五个库"><a href="#五个库" class="headerlink" title="五个库"></a>五个库</h4><h5 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h5><ul><li><p><strong>Libc是C语言最基础的库文件，它提供了所有系统的基本功能，这些功能主要是对系统调用的封装，是Libc是应用和Linux内核交流的桥梁，主要功能如下</strong>:</p><ul><li>进程管理：包括进程的创建、调度策略和优先级的调整</li><li>线程管理：包括线程的创建和销毁，线程的同步/互斥等</li><li>内存管理：包括内存分配和释放等</li><li>时间管理：包括获取和保存系统时间、获取当前系统运行时长等</li><li>时区管理：包括时区的设置和调整等</li><li>定时器管理：提供系统的定时服务</li><li>文件系统管理：提供文件系统的挂载和移除功能</li><li>文件管理：包括文件和目录的创建增删改</li><li>网络套接字：创建和监听socket，发送和接受</li><li>DNS解析：帮助解析网络地址</li><li>信号：用于进程间通信</li><li>环境变量：设置和获取系统的环境变量</li><li>Android Log：提供和Android Log驱动进行交互的功能</li><li>Android 属性：管理一个共享区域来设置和读取Android的属性</li><li>标准输入/输出：提供格式化的输入/输出</li><li>字符串：提供字符串的移动、复制和比较等功能</li><li>宽字符：提供对宽字符的支持。</li></ul></li></ul><h5 id="libm"><a href="#libm" class="headerlink" title="libm"></a>libm</h5><ul><li><strong>Libm 是数学函数库，提供了常见的数学函数和浮点运算功能，但是Android浮点运算时通过软件实现的，运行速度慢，不建议频繁使用</strong></li></ul><h5 id="libdl"><a href="#libdl" class="headerlink" title="libdl"></a>libdl</h5><ul><li><strong>libdl库原本是用于动态库的装载。很多函数实现都是空壳，应用进程使用的一些函数，实际上是在linker模块中实现</strong></li></ul><h5 id="libstd"><a href="#libstd" class="headerlink" title="libstd++"></a>libstd++</h5><ul><li><strong>libstd++ 是标准的C++的功能库，但是，Android的实现是非常简单的，只是new，delete等少数几个操作符的实现</strong></li></ul><h5 id="libthread-db"><a href="#libthread-db" class="headerlink" title="libthread_db"></a>libthread_db</h5><ul><li><strong>libthread_db 用来支持对多线程的中动态库的调试</strong></li></ul><h4 id="一个模块"><a href="#一个模块" class="headerlink" title="一个模块"></a>一个模块</h4><h5 id="Linker模块"><a href="#Linker模块" class="headerlink" title="Linker模块"></a>Linker模块</h5><ul><li><strong>Linux系统上其实有两种并不完全相同的可执行文件</strong></li></ul><h4 id="Bionic库的内存管理函数"><a href="#Bionic库的内存管理函数" class="headerlink" title="Bionic库的内存管理函数"></a>Bionic库的内存管理函数</h4><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><h4 id="摘录自"><a href="#摘录自" class="headerlink" title="摘录自"></a>摘录自</h4><p><a href="https://www.jianshu.com/p/25a908c7eefa">Android跨进程通信IPC之2——Bionic</a></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android源码Build系统模块学习</title>
      <link href="/posts/63968/"/>
      <url>/posts/63968/</url>
      
        <content type="html"><![CDATA[<h4 id="模块区分"><a href="#模块区分" class="headerlink" title="模块区分"></a>模块区分</h4><h5 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h5><ul><li>build/core</li></ul><h5 id="针对机型厂商"><a href="#针对机型厂商" class="headerlink" title="针对机型厂商"></a>针对机型厂商</h5><ul><li>device</li></ul><h5 id="单独模块"><a href="#单独模块" class="headerlink" title="单独模块"></a>单独模块</h5><ul><li><p>比较常见一般在　源码新建app时使用</p></li><li><p>单独模块的Build是依赖Android核心的Build模块的，所以编译时候流程为:</p><ul><li>源码根目录执行　<code>source ./build/envsetup.sh</code>,初始化各种环境变量以及shell函数</li><li>执行任意一条指令<ul><li>mmm 模块包名</li><li>mmm package/apps/模块包名</li></ul></li></ul></li><li><p><code>./build/envsetup.sh</code> 完成的事情</p><ul><li>定义m、 mm、 mmm、 lunch等函数</li><li>检查当前shell环境是否是bash</li><li>添加编译目标，搜索　vendor/*/ 和device下面的一些vendorsetup.sh文件(驱动配置脚本)</li></ul></li><li><p><code>envsetup.sh</code>定义的常用shell指令</p><table><thead><tr><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">contact-button</td><td align="center">指定当前编译的产品</td></tr><tr><td align="center">croot</td><td align="center">快速切换到源码的根目录，方便开始编译</td></tr><tr><td align="center">m</td><td align="center">编译整个源码，但不用将当前的目录切换到源码的根目录</td></tr><tr><td align="center">mm</td><td align="center">编译当前目录下的所有模块，但是不编译他们的依赖项</td></tr><tr><td align="center">mmm</td><td align="center">编译当前目录下的所有模块，但是不编译他们的依赖项</td></tr><tr><td align="center">cgrep</td><td align="center">对系统中所有的C/C++文件执行grep命令</td></tr><tr><td align="center">sgrep</td><td align="center">对系统中所有的源文件执行grep命令</td></tr></tbody></table></li></ul><h4 id="Build结果"><a href="#Build结果" class="headerlink" title="Build结果"></a>Build结果</h4><h5 id="位置"><a href="#位置" class="headerlink" title="位置:"></a>位置:</h5><ul><li>/out</li></ul><h5 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h5><ul><li>/out/host <ul><li>该目录下包含了针对主机的 Android 开发工具的产物。即 SDK 中的各种工具，例如：emulator，adb，aapt 等</li></ul></li><li>/out/target/common<ul><li>该目录下包含了针对设备的共通的编译产物，主要是 Java 应用代码和 Java 库</li></ul></li><li>/out/target/product<ul><li>包含了针对特定设备的编译结果以及平台相关的 C/C++ 库和二进制文件。其中，是具体目标设备的名称</li></ul></li><li>/out/dist<ul><li>包含了为多种分发而准备的包，通过“make disttarget”将文件拷贝到该目录，默认的编译目标不会产生该目录</li></ul></li></ul><h4 id="Build生成的镜像"><a href="#Build生成的镜像" class="headerlink" title="Build生成的镜像"></a>Build生成的镜像</h4><h5 id="out-target-product"><a href="#out-target-product" class="headerlink" title="/out/target/product"></a>/out/target/product</h5><ul><li>system.img<ul><li>包含了 Android OS 的系统文件，库，可执行文件以及预置的应用程序，将被挂载为根分区</li></ul></li><li>ramdisk.img<ul><li>在启动时将被 Linux 内核挂载为只读分区，它包含了 /init文件和一些配置文件。它用来挂载其他系统镜像并启动 init 进程</li></ul></li><li>userdata.img<ul><li>将被挂载为 /data，包含了应用程序相关的数据以及和用户相关的数据</li></ul></li></ul><h4 id="MK-文件"><a href="#MK-文件" class="headerlink" title="MK　文件"></a>MK　文件</h4><ul><li><p>常规我们新增或修改mk文件，一般都是在我们新加了app的时候</p><ul><li><p>在package/apps/xxx/Android.mk        <em>新建</em></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br></pre></td></tr></table></figure><ul><li>设置当前模块的编译路径为当前文件夹路径</li><li>清理（可能由其他模块设置过的）编译环境中用到的变量</li></ul></li><li><p>在build/target/product/core.mk 　  <em>新增</em></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_PACKAGES := \ </span><br><span class="line">DeskClock \ </span><br><span class="line">xxx \   <span class="comment">#这个是创建的工程</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>package/apps/xxx/Android.mk  常用的一些变量</p><table><thead><tr><th align="center">变量</th><th>作用</th></tr></thead><tbody><tr><td align="center">LOCAL_MODULE</td><td>当前模块的名称，这个名称应当是唯一的，模块间的依赖关系就是通过这个名称来引用的。</td></tr><tr><td align="center">LOCAL_SRC_FILES</td><td>当前模块包含的所有源代码文件</td></tr><tr><td align="center">LOCAL_C_INCLUDES</td><td>C 或 C++ 语言需要的头文件的路径</td></tr><tr><td align="center">LOCAL_STATIC_LIBRARIES</td><td>当前模块在静态链接时需要的库的名称</td></tr><tr><td align="center">LOCAL_SHARED_LIBRARIES</td><td>当前模块在运行时依赖的动态库的名称</td></tr><tr><td align="center">LOCAL_CFLAGS</td><td>提供给 C/C++ 编译器的额外编译参数</td></tr><tr><td align="center">LOCAL_JAVA_LIBRARIES</td><td>当前模块依赖的 Java 共享库</td></tr><tr><td align="center">LOCAL_STATIC_JAVA_LIBRARIES</td><td>当前模块依赖的 Java 静态库</td></tr><tr><td align="center">LOCAL_PACKAGE_NAME</td><td>当前 APK 应用的名称</td></tr><tr><td align="center">LOCAL_CERTIFICATE</td><td>签署当前应用的证书名称</td></tr><tr><td align="center">LOCAL_MODULE_TAGS</td><td>当前模块所包含的标签,一个模块可以包含多个标签。默认　optional</td></tr></tbody></table></li></ul><p><a href="https://blog.csdn.net/roland_sun/article/details/30466105">详情可参看－－Android.mk语法解释</a></p><h5 id="Android-mk-便捷函数"><a href="#Android-mk-便捷函数" class="headerlink" title="Android.mk　便捷函数"></a>Android.mk　便捷函数</h5><ul><li>$(call my-dir)：获取当前文件夹路径。</li><li>$(call all-java-files-under, <src>)：获取指定目录下的所有 Java 文件。</li><li>$(call all-c-files-under, <src>)：获取指定目录下的所有 C 语言文件。</li><li>$(call all-Iaidl-files-under, <src>) ：获取指定目录下的所有 AIDL 文件。</li><li>$(call all-makefiles-under, <folder>)：获取指定目录下的所有 Make 文件。</li><li>$(call intermediates-dir-for, <class>, <app_name>, <host or target>, &lt;common?&gt; )：获取 Build 输出的目标文件夹路径。</li></ul><h5 id="编译一个-APK-文件示例"><a href="#编译一个-APK-文件示例" class="headerlink" title="编译一个 APK 文件示例"></a>编译一个 APK 文件示例</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"><span class="comment"># 获取所有子目录中的 Java 文件</span></span><br><span class="line">LOCAL_SRC_FILES := <span class="variable">$(<span class="built_in">call</span> all-subdir-java-files)</span>         </span><br><span class="line"><span class="comment"># 当前模块依赖的静态 Java 库，如果有多个以空格分隔</span></span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := static-library</span><br><span class="line"><span class="comment"># 当前模块的名称</span></span><br><span class="line">LOCAL_PACKAGE_NAME := LocalPackage</span><br><span class="line"><span class="comment"># 编译 APK 文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_PACKAGE)</span></span><br></pre></td></tr></table></figure><h5 id="编译一个-Java-的静态库示例"><a href="#编译一个-Java-的静态库示例" class="headerlink" title="编译一个 Java 的静态库示例"></a>编译一个 Java 的静态库示例</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"><span class="comment"># 获取所有子目录中的 Java 文件</span></span><br><span class="line">LOCAL_SRC_FILES := <span class="variable">$(<span class="built_in">call</span> all-subdir-java-files)</span></span><br><span class="line"><span class="comment"># 当前模块依赖的动态 Java 库名称</span></span><br><span class="line">LOCAL_JAVA_LIBRARIES := android.test.runner</span><br><span class="line"><span class="comment"># 当前模块的名称</span></span><br><span class="line">LOCAL_MODULE := sample</span><br><span class="line"><span class="comment"># 将当前模块编译成一个静态的 Java 库</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_JAVA_LIBRARY)</span></span><br></pre></td></tr></table></figure><h4 id="摘录自"><a href="#摘录自" class="headerlink" title="摘录自"></a>摘录自</h4><p><a href="https://blog.csdn.net/eliot_shao/article/details/79121234">android build 系统</a></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServiceManager学习</title>
      <link href="/posts/17591/"/>
      <url>/posts/17591/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>能集中管理系统内的所有服务，能施加权限，并不是任何进程都能注册服务</p></li><li><p>支持字符串名称来查找对应的Service</p></li><li><p>由于各种原因,Service可能生死无常。有了统一的管理机构,Client只需要查询ServiceManager,就能把握动向，得到最新信息　</p></li></ul><h4 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h4><h5 id="service-manager-c"><a href="#service-manager-c" class="headerlink" title="service_manager.c"></a>service_manager.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_state</span> *<span class="title">bs</span>;</span></span><br><span class="line">    bs = binder_open(<span class="number">128</span>*<span class="number">1024</span>);<span class="comment">//打开设备文件，映射文件到本进程的空间地址</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (binder_become_context_manager(bs)) &#123;<span class="comment">//将自己注册成为Binder进程间通信机制的上下文管理者</span></span><br><span class="line">......</span><br><span class="line">    selinux_set_callback(SELINUX_CB_LOG, cb);</span><br><span class="line"></span><br><span class="line">    svcmgr_handle = BINDER_SERVICE_MANAGER;</span><br><span class="line">    binder_loop(bs, svcmgr_handler);<span class="comment">//循环等待和处理Client进程的通信请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//      binder_loop 调用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">svcmgr_handler</span><span class="params">(struct binder_state *bs,</span></span></span><br><span class="line"><span class="function"><span class="params">                   struct binder_transaction_data *txn,</span></span></span><br><span class="line"><span class="function"><span class="params">                   struct binder_io *msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                   struct binder_io *reply)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (txn-&gt;target.handle != svcmgr_handle) <span class="comment">//比较是不是自己</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  ......</span><br><span class="line">     <span class="comment">//　这里将实现　IServiceManager　中定义的各个业务函数</span></span><br><span class="line">    <span class="keyword">switch</span>(txn-&gt;code) &#123;</span><br><span class="line">    <span class="keyword">case</span> SVC_MGR_GET_SERVICE:　<span class="comment">//得到某个　service　的信息，service用字符串表示</span></span><br><span class="line">    <span class="keyword">case</span> SVC_MGR_CHECK_SERVICE:</span><br><span class="line">        s = bio_get_string16(msg, &amp;len);　<span class="comment">//　s　表示的是　service</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//查找</span></span><br><span class="line">        handle = do_find_service(bs, s, len, txn-&gt;sender_euid, txn-&gt;sender_pid);</span><br><span class="line">  ......</span><br><span class="line">    <span class="keyword">case</span> SVC_MGR_ADD_SERVICE:<span class="comment">//对应的　addService　请求</span></span><br><span class="line">       ......</span><br><span class="line">          <span class="keyword">if</span> (do_add_service(bs, s, len, handle, txn-&gt;sender_euid,</span><br><span class="line">            allow_isolated, txn-&gt;sender_pid))</span><br><span class="line">      ......</span><br><span class="line">    <span class="keyword">case</span> SVC_MGR_LIST_SERVICES: <span class="comment">//得到当前系统已经注册的所有 service的名字</span></span><br><span class="line">       ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务的注册"><a href="#服务的注册" class="headerlink" title="服务的注册"></a>服务的注册</h4><h5 id="service-manager-c-1"><a href="#service-manager-c-1" class="headerlink" title="service_manager.c"></a>service_manager.c</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_add_service</span><span class="params">(struct binder_state *bs,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> <span class="keyword">uint16_t</span> *s, <span class="keyword">size_t</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">uint32_t</span> handle, <span class="keyword">uid_t</span> uid, <span class="keyword">int</span> allow_isolated,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">pid_t</span> spid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">svcinfo</span> *<span class="title">si</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ALOGI("add_service('%s',%x,%s) uid=%d\n", str8(s, len), handle,</span></span><br><span class="line">    <span class="comment">//        allow_isolated ? "allow_isolated" : "!allow_isolated", uid);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!handle || (len == <span class="number">0</span>) || (len &gt; <span class="number">127</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//是用来判断注册服务的进程是否有权限,但是具体实现我有点看不懂，留待以后</span></span><br><span class="line">    <span class="comment">//　如果Server　进程权限不够，需要在这边做对应的处理</span></span><br><span class="line">    <span class="keyword">if</span> (!svc_can_register(s, len, spid)) &#123; </span><br><span class="line">        ALOGE(<span class="string">"add_service('%s',%x) uid=%d - PERMISSION DENIED\n"</span>,</span><br><span class="line">             str8(s, len), handle, uid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    si = find_svc(s, len);</span><br><span class="line">    <span class="keyword">if</span> (si) &#123;</span><br><span class="line">        <span class="keyword">if</span> (si-&gt;handle) &#123;</span><br><span class="line">            ALOGE(<span class="string">"add_service('%s',%x) uid=%d - ALREADY REGISTERED, OVERRIDE\n"</span>,</span><br><span class="line">                 str8(s, len), handle, uid);</span><br><span class="line">            svcinfo_death(bs, si);</span><br><span class="line">        &#125;</span><br><span class="line">        si-&gt;handle = handle;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        si = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*si) + (len + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));<span class="comment">//分配内存</span></span><br><span class="line">        <span class="keyword">if</span> (!si) &#123;</span><br><span class="line">            ALOGE(<span class="string">"add_service('%s',%x) uid=%d - OUT OF MEMORY\n"</span>,</span><br><span class="line">                 str8(s, len), handle, uid);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        si-&gt;handle = handle;</span><br><span class="line">        si-&gt;len = len;</span><br><span class="line">        <span class="built_in">memcpy</span>(si-&gt;name, s, (len + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line">        si-&gt;name[len] = <span class="string">'\0'</span>;</span><br><span class="line">        si-&gt;death.func = (<span class="keyword">void</span>*) svcinfo_death;　<span class="comment">//service　退出的通知函数</span></span><br><span class="line">        si-&gt;death.ptr = si;</span><br><span class="line">        si-&gt;allow_isolated = allow_isolated;</span><br><span class="line">        si-&gt;next = svclist;　<span class="comment">// 存储了当前注册到ServiceManagaer信息的list</span></span><br><span class="line">        svclist = si;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    binder_acquire(bs, handle);</span><br><span class="line">    <span class="comment">//清理释放　malloc出来的内存，而每当有服务进程退出时候，ServiceManager就会得到来自binder设备的通知</span></span><br><span class="line">    binder_link_to_death(bs, handle, &amp;si-&gt;death);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MediaPlayService-示例"><a href="#MediaPlayService-示例" class="headerlink" title="MediaPlayService　示例"></a>MediaPlayService　示例</h4><ul><li>Client想要得到某个Service的信息，就必须先和ServiceManager打交道，通过调用getService函数来获取对应的Service的信息</li></ul><h5 id="查询-ServiceManager"><a href="#查询-ServiceManager" class="headerlink" title="查询 ServiceManager"></a>查询 ServiceManager</h5><ul><li>IMediaDeathNotifier.c<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sp&lt;IMediaPlayerService&gt;&amp;</span><br><span class="line">IMediaDeathNotifier::getMediaPlayerService()</span><br><span class="line">&#123;</span><br><span class="line">    ALOGV(<span class="string">"getMediaPlayerService"</span>);</span><br><span class="line">    Mutex::Autolock _l(sServiceLock);</span><br><span class="line">    <span class="keyword">if</span> (sMediaPlayerService == <span class="number">0</span>) &#123;</span><br><span class="line">        sp&lt;IServiceManager&gt; sm = defaultServiceManager();</span><br><span class="line">        sp&lt;IBinder&gt; binder;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//向　ServiceManager查询对应的服务信息，返回 BpBinder</span></span><br><span class="line">            binder = sm-&gt;getService(String16(<span class="string">"media.player"</span>));</span><br><span class="line">            <span class="keyword">if</span> (binder != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ALOGW(<span class="string">"Media player service not published, waiting..."</span>);</span><br><span class="line">            usleep(<span class="number">500000</span>); <span class="comment">// 0.5 s</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sDeathNotifier == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            sDeathNotifier = <span class="keyword">new</span> DeathNotifier();</span><br><span class="line">        &#125;</span><br><span class="line">        binder-&gt;linkToDeath(sDeathNotifier);</span><br><span class="line">        <span class="comment">/*　interface_cast 在　MediaServer理解Binder　篇中，注册服务就有说过这个</span></span><br><span class="line"><span class="comment">         *　将这个　BpBinder　转换成了　BpMediaPlayerService</span></span><br><span class="line"><span class="comment">         *  那么，就能调用　IMediaPlayerService.cpp　提供的业务逻辑函数(CreateMediaRecorder...)</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         *  接下来还是　MediaServer理解Binder　篇中，业务层和通信层的操作了</span></span><br><span class="line"><span class="comment">         */</span>　</span><br><span class="line">        sMediaPlayerService = interface_cast&lt;IMediaPlayerService&gt;(binder);</span><br><span class="line">    &#125;</span><br><span class="line">    ALOGE_IF(sMediaPlayerService == <span class="number">0</span>, <span class="string">"no media player service!?"</span>);</span><br><span class="line">    <span class="keyword">return</span> sMediaPlayerService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="匿名Service"><a href="#匿名Service" class="headerlink" title="匿名Service"></a>匿名Service</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li>没有注册意味着这个Service没有在ServiceManager上注册</li><li>是一个Service又表示它确实是一个基于Binder通信的C/S架构</li></ul><h5 id="IMediaPlayerService-cpp"><a href="#IMediaPlayerService-cpp" class="headerlink" title="IMediaPlayerService.cpp"></a>IMediaPlayerService.cpp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">BnMediaPlayerService::onTransact</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">        <span class="keyword">case</span> CREATE: &#123;</span><br><span class="line">            CHECK_INTERFACE(IMediaPlayerService, data, reply);</span><br><span class="line">            sp&lt;IMediaPlayerClient&gt; client =</span><br><span class="line">                interface_cast&lt;IMediaPlayerClient&gt;(data.readStrongBinder());</span><br><span class="line">            <span class="keyword">int</span> audioSessionId = data.readInt32();</span><br><span class="line">            <span class="comment">//　返回一个　 IMediaPlayer 对象</span></span><br><span class="line">            sp&lt;IMediaPlayer&gt; player = create(client, audioSessionId);</span><br><span class="line">            <span class="comment">//　将Binder　类型作为一种特殊数据类型处理</span></span><br><span class="line">            <span class="comment">//　这样　BpMediaPlayer 就可以得到　BnMediaPlayer 的　handler　值</span></span><br><span class="line">            <span class="comment">// handler 事关通信的目的端</span></span><br><span class="line">            reply-&gt;writeStrongBinder(player-&gt;asBinder());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>基于Android版本  5.1_LMY47D </li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MediaSever理解Binder图解</title>
      <link href="/posts/49536/"/>
      <url>/posts/49536/</url>
      
        <content type="html"><![CDATA[<h4 id="获取ProcessState实例"><a href="#获取ProcessState实例" class="headerlink" title="获取ProcessState实例"></a>获取ProcessState实例</h4><p><img src="ProcessState%E5%AE%9E%E4%BE%8B.png" alt="ProcessState实例"></p><h4 id="向SM注册服务"><a href="#向SM注册服务" class="headerlink" title="向SM注册服务"></a>向SM注册服务</h4><p><img src="%E5%90%91SM%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1.png" alt="向SM注册服务"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">            /* IServiceManager.cpp中</span><br><span class="line">             *</span><br><span class="line">             *  interface_cast&lt;IServiceManager&gt; 在 IInterface.h实现</span><br><span class="line">             *  即　相当于：</span><br><span class="line">             *inline sp&lt;IServiceManager&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)</span><br><span class="line"> *&#123;</span><br><span class="line">    * return IServiceManager::asInterface(obj);</span><br><span class="line"> *&#125;</span><br><span class="line">             *</span><br><span class="line">             *调用ProcessState.cpp的getContextObject()</span><br><span class="line">             *</span><br><span class="line">             *  继续看完　下面　ProcessState.cpp　和　BpBinder.cpp　调用的方法,发现实际上就是：</span><br><span class="line">             *    ************************************************************</span><br><span class="line">             *    gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(</span><br><span class="line">             *    new BpBinder(0));　 </span><br><span class="line">             *    ************************************************************</span><br><span class="line">             */</span><br><span class="line">             </span><br><span class="line">！！这段函数到最后返回的就是一个　IServiceManager　对象，详细请参看　业务层如何架构在Binder机制上 篇</span><br></pre></td></tr></table></figure><h4 id="注册MediaPlayService"><a href="#注册MediaPlayService" class="headerlink" title="注册MediaPlayService"></a>注册MediaPlayService</h4><p><img src="MediaPlayService%E4%B8%9A%E5%8A%A1%E5%B1%82.png" alt=""><br><img src="MediaPlayService%E9%80%9A%E8%AE%AF%E5%B1%82.png" alt="MediaPlayService通讯层"></p><h4 id="startThreadPool"><a href="#startThreadPool" class="headerlink" title="startThreadPool()"></a>startThreadPool()</h4><p><img src="startThreadPool().png" alt="startThreadPool"></p><h4 id="joinThreadPool"><a href="#joinThreadPool" class="headerlink" title="joinThreadPool"></a>joinThreadPool</h4><p><img src="joinThreadPool.png" alt="joinThreadPool"></p><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ul><li><p>有两个线程在为　Service　服务</p></li><li><p><code>startThreadPool</code>中新启动的线程通过<code>joinThreadPool</code>来读取　<code>binder</code>　设备，查看是否有请求</p></li><li><p>主线程也调用<code>joinThreadPool</code>来读取<code>binder</code>设备，查看是都有请求。所以，<code>binder</code>是支持多线程操作</p></li></ul><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><ul><li>基于Android版本  5.1_LMY47D </li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android应用管理第一步</title>
      <link href="/posts/23585/"/>
      <url>/posts/23585/</url>
      
        <content type="html"><![CDATA[<h4 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h4><ul><li>PackageManagerService启动时候，扫描所有APK 文件和Jar包，把它们的信息读出来，保存在内存中，这样就能迅速找到各种应用和组件的信息</li></ul><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><h5 id="PMS"><a href="#PMS" class="headerlink" title="PMS"></a>PMS</h5><p><img src="pms.png" alt=""></p><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p><img src="image.png" alt=""></p><h5 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> SystemServer().run();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line">       <span class="comment">// Create the system service manager.</span></span><br><span class="line">       mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</span><br><span class="line">       LocalServices.addService(SystemServiceManager<span class="class">.<span class="keyword">class</span>, <span class="title">mSystemServiceManager</span>)</span>;</span><br><span class="line">       <span class="comment">// 开启服务</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           startBootstrapServices();</span><br><span class="line">           startCoreServices();</span><br><span class="line">           startOtherServices();</span><br><span class="line"> ......</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBootstrapServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//等待installd完成启动，以便它有机会启动</span></span><br><span class="line"><span class="comment">//创建关键目录，例如/data/user权限。</span></span><br><span class="line">    <span class="comment">//在初始化其他服务之前，我们需要完成这个任务</span></span><br><span class="line">       Installer installer = mSystemServiceManager.startService(Installer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Activity manager runs the show.</span></span><br><span class="line">       mActivityManagerService = mSystemServiceManager.startService(</span><br><span class="line">               ActivityManagerService.Lifecycle<span class="class">.<span class="keyword">class</span>).<span class="title">getService</span>()</span>;</span><br><span class="line">       mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</span><br><span class="line">       mActivityManagerService.setInstaller(installer);</span><br><span class="line">......</span><br><span class="line">       <span class="comment">//这里是一些列的服务开启　电源啊　AMS　...</span></span><br><span class="line">......</span><br><span class="line">       <span class="comment">// 开启包管理器</span></span><br><span class="line">       Slog.i(TAG, <span class="string">"Package Manager"</span>);</span><br><span class="line">       mPackageManagerService = PackageManagerService.main(mSystemContext, installer,</span><br><span class="line">               mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</span><br><span class="line">       mFirstBoot = mPackageManagerService.isFirstBoot();</span><br><span class="line">       mPackageManager = mSystemContext.getPackageManager();</span><br><span class="line"><span class="comment">// 注册服务</span></span><br><span class="line">       ServiceManager.addService(Context.USER_SERVICE, UserManagerService.getInstance());</span><br><span class="line">       <span class="comment">// Initialize attribute cache used to cache resources from packages.</span></span><br><span class="line">       AttributeCache.init(mSystemContext);</span><br><span class="line">       <span class="comment">// Set up the Application instance for the system process and get started.</span></span><br><span class="line">       mActivityManagerService.setSystemProcess();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="PackageManagerService"><a href="#PackageManagerService" class="headerlink" title="PackageManagerService"></a>PackageManagerService</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageManagerService</span><span class="params">(Context context, Installer installer,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    mSettings.addSharedUserLPw（XXX）</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//对应的文件路径    </span></span><br><span class="line">    File dataDir = Environment.getDataDirectory();</span><br><span class="line">    mAppDataDir = <span class="keyword">new</span> File(dataDir, <span class="string">"data"</span>);</span><br><span class="line">    mAppInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app"</span>);</span><br><span class="line">  　mAppLib32InstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-lib"</span>);</span><br><span class="line">    mAsecInternalPath = <span class="keyword">new</span> File(dataDir, <span class="string">"app-asec"</span>).getPath();</span><br><span class="line">    mUserAppDataDir = <span class="keyword">new</span> File(dataDir, <span class="string">"user"</span>);</span><br><span class="line">  　mDrmAppPrivateInstallDir = <span class="keyword">new</span> File(dataDir, <span class="string">"app-private"</span>);</span><br><span class="line">    <span class="comment">// 获取权限配置</span></span><br><span class="line">    ArrayMap&lt;String, SystemConfig.PermissionEntry&gt; permConfig</span><br><span class="line">    　　 = systemConfig.getPermissions();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;permConfig.size(); i++) &#123;</span><br><span class="line">         　 SystemConfig.PermissionEntry perm = permConfig.valueAt(i);</span><br><span class="line">           BasePermission bp = mSettings.mPermissions.get(perm.name);</span><br><span class="line">           <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bp = <span class="keyword">new</span> BasePermission(perm.name, <span class="string">"android"</span>, BasePermission.TYPE_BUILTIN);</span><br><span class="line">                    mSettings.mPermissions.put(perm.name, bp);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (perm.gids != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bp.gids = appendInts(bp.gids, perm.gids);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">    ......</span><br><span class="line">      mSettings.readLPw(xx) <span class="comment">//Setting 获取 PackageManagerService相关信息 </span></span><br><span class="line">    .....</span><br><span class="line">      scanDirLI(mAppInstallDir, <span class="number">0</span>, scanFlags, <span class="number">0</span>); <span class="comment">//扫描对应的文件路径的apk文件</span></span><br><span class="line">    ｝</span><br><span class="line">        </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanDirLI</span><span class="params">(File dir, <span class="keyword">int</span> parseFlags, <span class="keyword">int</span> scanFlags, <span class="keyword">long</span> currentTime)</span>  ｛</span></span><br><span class="line"><span class="function">        <span class="title">scanPackageLI</span><span class="params">(file, parseFlags | PackageParser.PARSE_MUST_BE_APK,</span></span></span><br><span class="line"><span class="function"><span class="params">                        scanFlags, currentTime, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">    ......</span><br><span class="line">        scanPackageLI(xxxx)  <span class="comment">//扫描包并返回一个新的解析包　　&#123;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pkg = pp.parsePackage(scanFile, parseFlags);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">    ......   </span><br><span class="line">     ｝</span><br></pre></td></tr></table></figure><h5 id="PackageParser"><a href="#PackageParser" class="headerlink" title="PackageParser"></a>PackageParser</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> Package <span class="title">parsePackage</span><span class="params">(File packageFile, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> PackageParserException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (packageFile.isDirectory()) &#123;</span><br><span class="line">           <span class="comment">// 单包解析，分析所有的应用程序在给定目录</span></span><br><span class="line">            <span class="keyword">return</span> parseClusterPackage(packageFile, flags);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parseMonolithicPackage(packageFile, flags);<span class="comment">//5.1时过时的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> Package <span class="title">parseBaseApk</span><span class="params">(File apkFile, AssetManager assets, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> PackageParserException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String apkPath = apkFile.getAbsolutePath();</span><br><span class="line">        mParseError = PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">        mArchiveSourcePath = apkFile.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_JAR) Slog.d(TAG, <span class="string">"Scanning base APK: "</span> + apkPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cookie = loadApkIntoAssetManager(assets, apkPath, flags);</span><br><span class="line">        Resources res = <span class="keyword">null</span>;</span><br><span class="line">        XmlResourceParser parser = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            res = <span class="keyword">new</span> Resources(assets, mMetrics, <span class="keyword">null</span>);</span><br><span class="line">            assets.setConfiguration(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                    Build.VERSION.RESOURCES_SDK_INT);</span><br><span class="line">            <span class="comment">// private static final String ANDROID_MANIFEST_FILENAME = "AndroidManifest.xml";</span></span><br><span class="line">            parser = assets.openXmlResourceParser(cookie, ANDROID_MANIFEST_FILENAME);</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><ul><li>系统应用指位于 <code>/sysem/app</code>(系统级别的应用)和<code>/system/priv-app</code>(Android4.4开始出现的,存放底层系统应用)目录下的应用</li><li>５.0之后，PackageManagerService不会监控安装应用的目录，意味着无法在使用向这种目录复制apk的方式安装应用</li><li>通常系统应用是不能删除的，但是可以升级。升级的办法是安装一个包名相同，但是更高版本号的应用在<code>/data/app</code>目录下。对于这种升级情况，Android会在<code>/data/system/packages.xml</code>文件中用标签<code>&lt;update-package&gt;</code>记录被覆盖的系统应用的信息</li><li>/data/system/packages.list记录了App的uid和数据路径</li><li>Android5.0之前！扫描时，遇见没有优化的文件还会执行转换工作，将app文件从dex格式转换成odex格式。</li><li>Android5.0之后！扫描时，遇见没有优化的文件还会执行转换工作，将app文件从dex格式转换成oat格式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>业务层如何架构在Binder机制上</title>
      <link href="/posts/29281/"/>
      <url>/posts/29281/</url>
      
        <content type="html"><![CDATA[<h4 id="定义业务逻辑"><a href="#定义业务逻辑" class="headerlink" title="定义业务逻辑"></a>定义业务逻辑</h4><h5 id="IServiceManager-是怎么做的"><a href="#IServiceManager-是怎么做的" class="headerlink" title="IServiceManager 是怎么做的"></a>IServiceManager 是怎么做的</h5><ul><li><p>IServiceManager.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class IServiceManager : public IInterface</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    DECLARE_META_INTERFACE(ServiceManager); //定义宏</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Retrieve an existing service, blocking for a few seconds</span><br><span class="line">     * if it doesn&apos;t yet exist.</span><br><span class="line">     */</span><br><span class="line">    virtual sp&lt;IBinder&gt;         getService( const String16&amp; name) const = 0;</span><br><span class="line"></span><br><span class="line">    // Retrieve an existing service, non-blocking.</span><br><span class="line">    virtual sp&lt;IBinder&gt;         checkService( const String16&amp; name) const = 0;</span><br><span class="line">    </span><br><span class="line">     // Register a service.</span><br><span class="line">    virtual status_t            addService( const String16&amp; name,</span><br><span class="line">                                            const sp&lt;IBinder&gt;&amp; service,</span><br><span class="line">                                            bool allowIsolated = false) = 0;</span><br><span class="line"> </span><br><span class="line">     // Return list of all existing services.  </span><br><span class="line">    virtual Vector&lt;String16&gt;    listServices() = 0;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="业务与通讯的挂钩"><a href="#业务与通讯的挂钩" class="headerlink" title="业务与通讯的挂钩"></a>业务与通讯的挂钩</h4><ul><li><p>Android通过<code>DECLARE_META_INTERFACE</code>和<code>IMPLENT</code>宏,将业务钩在一起</p></li><li><p><code>DECLARE_META_INTERFACE</code> 和　<code>IMPLEMENT_META_INTERFACE</code> 都在　<code>IInterface.h</code></p></li><li><p><code>DECLARE_META_INTERFACE</code> 声明一些函数和一个变量</p></li><li><p><code>IMPLEMENT_META_INTERFACE</code> 就是定义声明的函数和变量</p></li><li><p>IInterface.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#define DECLARE_META_INTERFACE(INTERFACE)     //宏                      </span><br><span class="line">    </span><br><span class="line">    static const android::String16 descriptor;                          </span><br><span class="line">    static android::sp&lt;I##INTERFACE&gt; asInterface(                       </span><br><span class="line">            const android::sp&lt;android::IBinder&gt;&amp; obj);                  </span><br><span class="line">    virtual const android::String16&amp; getInterfaceDescriptor() const;    </span><br><span class="line">    I##INTERFACE();                                                     </span><br><span class="line">    virtual ~I##INTERFACE();       </span><br><span class="line">    </span><br><span class="line">#define IMPLEMENT_META_INTERFACE(INTERFACE, NAME)       //宏                 </span><br><span class="line">    const android::String16 I##INTERFACE::descriptor(NAME);             </span><br><span class="line">    const android::String16&amp;                                            </span><br><span class="line">            I##INTERFACE::getInterfaceDescriptor() const &#123;              </span><br><span class="line">        return I##INTERFACE::descriptor;                                </span><br><span class="line">    &#125;                                                                   </span><br><span class="line">    android::sp&lt;I##INTERFACE&gt; I##INTERFACE::asInterface(                </span><br><span class="line">            const android::sp&lt;android::IBinder&gt;&amp; obj)                   </span><br><span class="line">    &#123;                                                                   </span><br><span class="line">        android::sp&lt;I##INTERFACE&gt; intr;                                 </span><br><span class="line">        if (obj != NULL) &#123;                                              </span><br><span class="line">            intr = static_cast&lt;I##INTERFACE*&gt;(                          </span><br><span class="line">                obj-&gt;queryLocalInterface(                               </span><br><span class="line">                        I##INTERFACE::descriptor).get());               </span><br><span class="line">            if (intr == NULL) &#123;                                         </span><br><span class="line">                intr = new Bp##INTERFACE(obj);                          </span><br><span class="line">            &#125;                                                           </span><br><span class="line">        &#125;                                                               </span><br><span class="line">        return intr;                                                    </span><br><span class="line">    &#125;                                                                   </span><br><span class="line">    I##INTERFACE::I##INTERFACE() &#123; &#125;                                    </span><br><span class="line">    I##INTERFACE::~I##INTERFACE() &#123; &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="替换声明-函数和变量"><a href="#替换声明-函数和变量" class="headerlink" title="替换声明　函数和变量"></a>替换声明　函数和变量</h5><ul><li><p><code>DECLARE_META_INTERFACE</code>这个宏，在<code>IInterface.h</code>和<code>IServiceManager.h</code>有共同声明，套用可得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static const android::String16 descriptor //定义一个描述字符</span><br><span class="line">                    </span><br><span class="line">static android::sp&lt;IServiceManager&gt; asInterface(                       </span><br><span class="line">        const android::sp&lt;android::IBinder&gt;&amp; obj);           </span><br><span class="line">// 定义一个 getInterfaceDescriptor函数，估计就是返回 descriptor 字符串</span><br><span class="line">virtual const android::String16&amp; getInterfaceDescriptor() const;    </span><br><span class="line">// 定义一个 IServiceManager 的构造函数和析构函数</span><br><span class="line">IServiceManager();                                                     </span><br><span class="line">virtual ~IServiceManager();</span><br></pre></td></tr></table></figure></li></ul><p>#####　定义使用　函数和变量</p><ul><li><p>IServiceManager.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IMPLEMENT_META_INTERFACE(ServiceManager, <span class="string">"android.os.IServiceManager"</span>);</span><br></pre></td></tr></table></figure></li><li><p>宏定义展开( ServiceManager, “android.os.IServiceManager”　参数，套进 　IInterface.h　的　IMPLEMENT_META_INTERFACE(INTERFACE, NAME)  　这个宏定义中，得：)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> android::String16  </span><br><span class="line">IServiceManager::descriptor(<span class="string">"android.os.IServiceManager"</span>);  </span><br><span class="line"><span class="comment">//实现getInterfaceDescriptor函数。  </span></span><br><span class="line"><span class="function"><span class="keyword">const</span> android::String16&amp; <span class="title">IServiceManager::getInterfaceDescriptor</span><span class="params">()</span> <span class="keyword">const</span>  </span></span><br><span class="line"><span class="function"> </span>&#123;  </span><br><span class="line">    <span class="comment">//返回字符串descriptor，值是"android.os.IServiceManager"。  </span></span><br><span class="line">      <span class="keyword">return</span> IServiceManager::descriptor;  </span><br><span class="line">  &#125;  </span><br><span class="line"><span class="comment">//实现asInterface函数。  </span></span><br><span class="line">  android::sp&lt;IServiceManager&gt; </span><br><span class="line">  IServiceManager::asInterface(<span class="keyword">const</span> android::</span><br><span class="line">sp&lt;android::IBinder&gt;&amp; obj)  </span><br><span class="line">&#123;  </span><br><span class="line">        android::sp&lt;IServiceManager&gt; intr;  </span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            intr = <span class="keyword">static_cast</span>&lt;IServiceManager *&gt;(  </span><br><span class="line">                obj-&gt;queryLocalInterface</span><br><span class="line">(IServiceManager::descriptor).get());  </span><br><span class="line">            <span class="keyword">if</span> (intr == <span class="literal">NULL</span>) &#123;  </span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * obj是我们刚才创建的那个BpBinder(0)。  </span></span><br><span class="line"><span class="comment">              *</span></span><br><span class="line"><span class="comment">              *记不记得，之前  MediaServer理解Binder　篇， SM注册服务   </span></span><br><span class="line"><span class="comment">              *实际返回的是BpServiceManager　  </span></span><br><span class="line"><span class="comment">              * 但是最终却返回的是　IServiceManager</span></span><br><span class="line"><span class="comment">              * 请看下面　的　图示　关系</span></span><br><span class="line"><span class="comment">              */</span>  </span><br><span class="line">                intr = <span class="keyword">new</span> BpServiceManager(obj);                 </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> intr;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//实现构造函数和析构函数。  </span></span><br><span class="line">IServiceManager::IServiceManager () &#123; &#125;  </span><br><span class="line">IServiceManager::~ IServiceManager() &#123; &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="IServiceManager.png" alt="IServiceManager"></p><h5 id="基于Android版本-5-1-LMY47D"><a href="#基于Android版本-5-1-LMY47D" class="headerlink" title="基于Android版本  5.1_LMY47D"></a>基于Android版本  5.1_LMY47D</h5>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MediaServer理解Binder</title>
      <link href="/posts/39534/"/>
      <url>/posts/39534/</url>
      
        <content type="html"><![CDATA[<h4 id="MediaServer"><a href="#MediaServer" class="headerlink" title="MediaServer"></a>MediaServer</h4><ul><li>AudioFlinger   :   音频系统中的核心服务   </li><li>AudioPolicyService　：　音频系统中关于音频策略的重要任务</li><li>MediaPlayService　：　多媒体系统中的重要服务</li><li>CameraService　：　有关摄像/照相的重要服务</li></ul><h5 id="main-mediaserver-cpp"><a href="#main-mediaserver-cpp" class="headerlink" title="main_mediaserver.cpp"></a>main_mediaserver.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个ProcessState实例</span></span><br><span class="line"><span class="function">sp&lt;ProcessState&gt; <span class="title">proc</span><span class="params">(ProcessState::self())</span></span>;</span><br><span class="line"><span class="comment">// MS作为SM的客户端，需要向SM注册服务</span></span><br><span class="line">sp&lt;IServiceManager&gt; sm = defaultServiceManager();</span><br><span class="line">ALOGI(<span class="string">"ServiceManager: %p"</span>, sm.get());</span><br><span class="line">AudioFlinger::instantiate();</span><br><span class="line"><span class="comment">// 多媒体服务的　MediaPlayer服务，作为主切入点</span></span><br><span class="line">MediaPlayerService::instantiate();</span><br><span class="line">CameraService::instantiate();</span><br><span class="line"><span class="comment">//音频系统的AudioPolicy服务</span></span><br><span class="line">AudioPolicyService::instantiate();</span><br><span class="line">SoundTriggerHwService::instantiate();</span><br><span class="line">registerExtensions();</span><br><span class="line"><span class="comment">//创造劳动力</span></span><br><span class="line">ProcessState::self()-&gt;startThreadPool();</span><br><span class="line"><span class="comment">//万众归一</span></span><br><span class="line">IPCThreadState::self()-&gt;joinThreadPool();</span><br></pre></td></tr></table></figure><hr><h4 id="获取ProcessState实例"><a href="#获取ProcessState实例" class="headerlink" title="获取ProcessState实例"></a>获取ProcessState实例</h4><ul><li>打开<code>/dev/binder</code>设备，相当于与内核的Binder驱动有了交互通道</li><li>对返回的<code>fd</code>使用<code>mmap</code>，这样Binder驱动就会分配一块内存来接受数据</li><li>由于ProcessState具有唯一性，因此一个进程只打开设备一次</li></ul><h5 id="ProcessState-cpp"><a href="#ProcessState-cpp" class="headerlink" title="ProcessState.cpp"></a>ProcessState.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sp&lt;ProcessState&gt; <span class="title">ProcessState::self</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mutex::Autolock _l(gProcessMutex);</span><br><span class="line">    <span class="keyword">if</span> (gProcess != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> gProcess;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//　创建一个　ProcessState 对象，并赋值给　gProcess</span></span><br><span class="line">    gProcess = <span class="keyword">new</span> ProcessState;</span><br><span class="line">    <span class="keyword">return</span> gProcess;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">open_driver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// linux c 的　方法　arg1:路径  arg2:方式(读/写/读写)　此处是可读写</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/binder"</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">       ......</span><br><span class="line">        <span class="comment">// ioctl方式告诉binder驱动，这个fd支持的最大线程数是　１５</span></span><br><span class="line">        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</span><br><span class="line">      ......</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">ProcessState::ProcessState()</span><br><span class="line">    : mDriverFD(open_driver())　　  <span class="comment">//open_driver() 打开设备</span></span><br><span class="line">    , mVMStart(MAP_FAILED)</span><br><span class="line">    , mManagesContexts(<span class="literal">false</span>)</span><br><span class="line">    , mBinderContextCheckFunc(<span class="literal">NULL</span>)</span><br><span class="line">    , mBinderContextUserData(<span class="literal">NULL</span>)</span><br><span class="line">    , mThreadPoolStarted(<span class="literal">false</span>)</span><br><span class="line">    , mThreadPoolSeq(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDriverFD &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      ......</span><br><span class="line">        <span class="comment">// mmap the binder, providing a chunk of virtual address space to receive transactions.  mmap方法 请求虚拟空间</span></span><br><span class="line">        mVMStart = mmap(<span class="number">0</span>, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, <span class="number">0</span>);</span><br><span class="line">.......</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="向SM注册服务"><a href="#向SM注册服务" class="headerlink" title="向SM注册服务"></a>向SM注册服务</h4><h5 id="IServiceManager-cpp"><a href="#IServiceManager-cpp" class="headerlink" title="IServiceManager.cpp"></a>IServiceManager.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sp&lt;IServiceManager&gt; <span class="title">defaultServiceManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gDefaultServiceManager != <span class="literal">NULL</span>) <span class="keyword">return</span> gDefaultServiceManager;<span class="comment">//单例模式</span></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMutex _l(gDefaultServiceManagerLock);</span><br><span class="line">        <span class="keyword">while</span> (gDefaultServiceManager == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">/* 真正的gDefaultServiceManager，是在这里创建的  </span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *  interface_cast&lt;IServiceManager&gt; 在 IInterface.h实现</span></span><br><span class="line"><span class="comment">             *  即　相当于：</span></span><br><span class="line"><span class="comment">             *inline sp&lt;IServiceManager&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)</span></span><br><span class="line"><span class="comment"> *&#123;</span></span><br><span class="line"><span class="comment">    * return IServiceManager::asInterface(obj);</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *调用ProcessState.cpp的getContextObject()</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *  继续看完　下面　ProcessState.cpp　和　BpBinder.cpp　调用的方法,发现实际上就是：</span></span><br><span class="line"><span class="comment">             *    ************************************************************</span></span><br><span class="line"><span class="comment">             *    gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(</span></span><br><span class="line"><span class="comment">             *    new BpBinder(0));　 </span></span><br><span class="line"><span class="comment">             *    ************************************************************</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//  这段函数到最后返回的就是一个　IServiceManager　对象</span></span><br><span class="line">            gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(</span><br><span class="line">                ProcessState::self()-&gt;getContextObject(<span class="literal">NULL</span>));　 </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (gDefaultServiceManager == <span class="literal">NULL</span>)</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> gDefaultServiceManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="IInterface-h"><a href="#IInterface-h" class="headerlink" title="IInterface.h"></a>IInterface.h</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename INTERFACE&gt;</span><br><span class="line">inline sp&lt;INTERFACE&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">    return INTERFACE::asInterface(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ProcessState-cpp-1"><a href="#ProcessState-cpp-1" class="headerlink" title="ProcessState.cpp"></a>ProcessState.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getContextObject()</span></span><br><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ProcessState::getContextObject</span><span class="params">(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; <span class="comment">/*caller*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//为什么参数值为　０？</span></span><br><span class="line">    <span class="comment">//这个值在整个Binder系统有重要含义，它代表的就是　ServiceManager所对应的　BBinder</span></span><br><span class="line">    <span class="keyword">return</span> getStrongProxyForHandle(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function">sp&lt;IBinder&gt; <span class="title">ProcessState::getStrongProxyForHandle</span><span class="params">(<span class="keyword">int32_t</span> handle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;IBinder&gt; result;</span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    </span><br><span class="line">    handle_entry* e = lookupHandleLocked(handle);</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// We need to create a new BpBinder if there isn't currently one, OR we</span></span><br><span class="line">        <span class="comment">// are unable to acquire a weak reference on this current one.  See comment</span></span><br><span class="line">        <span class="comment">// in getWeakProxyForHandle() for more info about this.、</span></span><br><span class="line">        IBinder* b = e-&gt;binder;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">NULL</span> || !e-&gt;refs-&gt;attemptIncWeak(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handle == <span class="number">0</span>) &#123;</span><br><span class="line">                Parcel data;</span><br><span class="line">                <span class="keyword">status_t</span> status = IPCThreadState::self()-&gt;transact(</span><br><span class="line">                        <span class="number">0</span>, IBinder::PING_TRANSACTION, data, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (status == DEAD_OBJECT)</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*创建一个BpBinder,可以看下面　BpBinder.cpp</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *为什么是创建　BpBinder;</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             *因为我们是ServiceManager的客户端，当然要使用代理端和ServiceManager进行交互</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            b = <span class="keyword">new</span> BpBinder(handle); </span><br><span class="line">            </span><br><span class="line">            e-&gt;binder = b;  <span class="comment">//填充entry的内容</span></span><br><span class="line">            <span class="keyword">if</span> (b) e-&gt;refs = b-&gt;getWeakRefs();</span><br><span class="line">            result = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// This little bit of nastyness is to allow us to add a primary</span></span><br><span class="line">            <span class="comment">// reference to the remote proxy when this team doesn't have one</span></span><br><span class="line">            <span class="comment">// but another team is sending the handle to us.</span></span><br><span class="line">            result.force_set(b);</span><br><span class="line">            e-&gt;refs-&gt;decWeak(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">//返回BpBInder(handler),注意,handle的值为０；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="BpBinder-cpp"><a href="#BpBinder-cpp" class="headerlink" title="BpBinder.cpp"></a>BpBinder.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BpBinder::BpBinder(<span class="keyword">int32_t</span> handle)</span><br><span class="line">    : mHandle(handle)</span><br><span class="line">    , mAlive(<span class="number">1</span>)</span><br><span class="line">    , mObitsSent(<span class="number">0</span>)</span><br><span class="line">    , mObituaries(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ALOGV(<span class="string">"Creating BpBinder %p handle %d\n"</span>, <span class="keyword">this</span>, mHandle);</span><br><span class="line">    extendObjectLifetime(OBJECT_LIFETIME_WEAK);</span><br><span class="line">    IPCThreadState::self()-&gt;incWeakHandle(handle);<span class="comment">//另一个重要对象是TPCThreadState</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="IBinder.png" alt=""></p><ul><li><p>BpBinder是客户端与Server交互的代表，p 是Proxy 的意思</p></li><li><p>BBinder则是与Proxy相对的一端，它是Proxy交互的目的端。它们是一一对应的</p></li><li><p>BpBinder是如何表示它对应的BBinder：</p><ul><li>Binder系统　通过　handler　来标识　BBinder </li></ul></li></ul><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><ul><li>这一步到最终是返回的<code>IServiceManager</code>,但是通过业务层的实际返回的是<code>BpServiceManager</code>,关于这个业务逻辑是如何实现，看<code>业务层如何架构在Binder机制上</code>篇</li><li>也可以先参考这个图示</li><li><img src="IServiceManager.png" alt=""></li></ul><hr><h4 id="注册MediaPlayService"><a href="#注册MediaPlayService" class="headerlink" title="注册MediaPlayService"></a>注册MediaPlayService</h4><h5 id="业务层工作"><a href="#业务层工作" class="headerlink" title="业务层工作"></a>业务层工作</h5><ul><li>MediaPlayerService.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MediaPlayerService::instantiate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用BpServiceManager执行了addService</span></span><br><span class="line">    defaultServiceManager()-&gt;addService(</span><br><span class="line">            String16(<span class="string">"media.player"</span>), <span class="keyword">new</span> MediaPlayerService());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IServiceManager.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">status_t</span> <span class="title">addService</span><span class="params">(<span class="keyword">const</span> String16&amp; name, <span class="keyword">const</span> sp&lt;IBinder&gt;&amp; service,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">bool</span> allowIsolated)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// Parcel 当成是一个　数据包</span></span><br><span class="line">    Parcel data, reply;</span><br><span class="line">    data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());</span><br><span class="line">    data.writeString16(name);</span><br><span class="line">    data.writeStrongBinder(service);</span><br><span class="line">    data.writeInt32(allowIsolated ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// remote　返回的也是　remote,也就是BpBinder对象</span></span><br><span class="line">  <span class="comment">//  addService把请求数据打包成　data, 传给了BpBinder和transact函数，也就是说把通信的工作交给了BpBinder。</span></span><br><span class="line">    <span class="keyword">status_t</span> err = remote()-&gt;transact(ADD_SERVICE_TRANSACTION, data, &amp;reply);</span><br><span class="line">    <span class="keyword">return</span> err == NO_ERROR ? reply.readExceptionCode() : err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>小结</p><ul><li>作用就是将请求数据打包之后，交给通信层处理</li></ul></li></ul><h5 id="通信层工作"><a href="#通信层工作" class="headerlink" title="通信层工作"></a>通信层工作</h5><ul><li><p>BpBinder.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">BpBinder::transact</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Once a binder has died, it will never come back to life.</span></span><br><span class="line">    <span class="keyword">if</span> (mAlive) &#123;</span><br><span class="line">        <span class="comment">// IPCThreadState 调用　　transact　方法</span></span><br><span class="line">        <span class="keyword">status_t</span> status = IPCThreadState::self()-&gt;transact(</span><br><span class="line">            mHandle, code, data, reply, flags);</span><br><span class="line">        <span class="keyword">if</span> (status == DEAD_OBJECT) mAlive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DEAD_OBJECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IPCThreadState.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">IPCThreadState::IPCThreadState()</span><br><span class="line">    : mProcess(ProcessState::self()),</span><br><span class="line">      mMyThreadId(androidGetTid()),</span><br><span class="line">      mStrictModePolicy(<span class="number">0</span>),</span><br><span class="line">      mLastTransactionBinderFlags(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    pthread_setspecific(gTLS, <span class="keyword">this</span>);　　<span class="comment">// 把自己设置到 TLS</span></span><br><span class="line">    clearCaller();</span><br><span class="line">    mIn.setDataCapacity(<span class="number">256</span>);　　<span class="comment">// mIn mOut　是两个Parcel，可以看成是发送/接收指令的缓冲区</span></span><br><span class="line">    mOut.setDataCapacity(<span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IPCThreadState* <span class="title">IPCThreadState::self</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gHaveTLS) &#123; <span class="comment">//gHaveTLS　初始值　默认为　false</span></span><br><span class="line">restart:</span><br><span class="line">       <span class="comment">/*TLS 是　Thread Local Storage　线程本地存储空间</span></span><br><span class="line"><span class="comment">        *：　每个线程都会有，而且线程之间不共享这些空间</span></span><br><span class="line"><span class="comment">        *　　通过pthread_getspecific/pthread_setspecific函数可以获取/设置这些空间的内容</span></span><br><span class="line"><span class="comment">        *　　　</span></span><br><span class="line"><span class="comment">        *　　从TLS获取保存在其中的 IPCThreadState　对象</span></span><br><span class="line"><span class="comment">        *　　从调有　pthread_getspecific　的地方，肯定也有调用　pthread_setspecific(k)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">pthread_key_t</span> k = gTLS;</span><br><span class="line">        IPCThreadState* st = (IPCThreadState*)pthread_getspecific(k);</span><br><span class="line">        <span class="keyword">if</span> (st) <span class="keyword">return</span> st;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IPCThreadState;　<span class="comment">// new 一个对象　构造函数会调用　pthread_setspecific(k)</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (gShutdown) <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">    pthread_mutex_lock(&amp;gTLSMutex);</span><br><span class="line">    <span class="keyword">if</span> (!gHaveTLS) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_key_create(&amp;gTLS, threadDestructor) != <span class="number">0</span>) &#123;</span><br><span class="line">            pthread_mutex_unlock(&amp;gTLSMutex);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        gHaveTLS = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;gTLSMutex);</span><br><span class="line">    <span class="keyword">goto</span> restart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BpBinder.cpp 调用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::transact</span><span class="params">(<span class="keyword">int32_t</span> handle,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  Parcel* reply, <span class="keyword">uint32_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">status_t</span> err = data.errorCheck();</span><br><span class="line">    flags |= TF_ACCEPT_FDS;</span><br><span class="line">    <span class="comment">/*  writeTransactionData 方法被调用</span></span><br><span class="line"><span class="comment"> *  这里的第一个参数　BC_TRANSACTION 它是应用程序向binder设备发送消息的消息码</span></span><br><span class="line"><span class="comment">     *　而binder设备向应用程序回复消息的消息码以　BR_ 开头。消息码的定义在　binder_module.h中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, <span class="literal">NULL</span>);</span><br><span class="line">    ......</span><br><span class="line"><span class="comment">// 上面是写入，这边就是等待</span></span><br><span class="line">        <span class="keyword">if</span> (reply) &#123;</span><br><span class="line">            err = waitForResponse(reply);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Parcel fakeReply;</span><br><span class="line">            err = waitForResponse(&amp;fakeReply);</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::writeTransactionData</span><span class="params">(<span class="keyword">int32_t</span> cmd, <span class="keyword">uint32_t</span> binderFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int32_t</span> handle, <span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel&amp; data, <span class="keyword">status_t</span>* statusBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    binder_transaction_data tr;<span class="comment">// binder_transaction_data 是和　binder设备通讯的数据结构</span></span><br><span class="line"></span><br><span class="line">    tr.target.ptr = <span class="number">0</span>; <span class="comment">/* Don't pass uninitialized stack data to a remote process */</span></span><br><span class="line">    tr.target.handle = handle;　<span class="comment">// handler 的值　传递给了　target，用来标示目的端，其中0是 ServiceManager的标志</span></span><br><span class="line">    tr.code = code;</span><br><span class="line">    tr.flags = binderFlags;</span><br><span class="line">    tr.cookie = <span class="number">0</span>;</span><br><span class="line">    tr.sender_pid = <span class="number">0</span>;</span><br><span class="line">    tr.sender_euid = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">status_t</span> err = data.errorCheck();</span><br><span class="line">    <span class="keyword">if</span> (err == NO_ERROR) &#123;</span><br><span class="line">        tr.data_size = data.ipcDataSize();</span><br><span class="line">        tr.data.ptr.buffer = data.ipcData();</span><br><span class="line">        tr.offsets_size = data.ipcObjectsCount()*<span class="keyword">sizeof</span>(<span class="keyword">binder_size_t</span>);</span><br><span class="line">        tr.data.ptr.offsets = data.ipcObjects();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusBuffer) &#123;</span><br><span class="line">        tr.flags |= TF_STATUS_CODE;</span><br><span class="line">        *statusBuffer = err;</span><br><span class="line">        tr.data_size = <span class="keyword">sizeof</span>(<span class="keyword">status_t</span>);</span><br><span class="line">        tr.data.ptr.buffer = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(statusBuffer);</span><br><span class="line">        tr.offsets_size = <span class="number">0</span>;</span><br><span class="line">        tr.data.ptr.offsets = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (mLastError = err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把命令写到　mOut　中，而不是直接发出去，可见这个函数有点名不副实</span></span><br><span class="line">    mOut.writeInt32(cmd);</span><br><span class="line">    mOut.write(&amp;tr, <span class="keyword">sizeof</span>(tr));  </span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::waitForResponse</span><span class="params">(Parcel *reply, <span class="keyword">status_t</span> *acquireResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> cmd;</span><br><span class="line">    <span class="keyword">int32_t</span> err;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    ......</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            err = executeCommand(cmd); <span class="comment">//收到回复后，做处理</span></span><br><span class="line">            <span class="keyword">if</span> (err != NO_ERROR) <span class="keyword">goto</span> finish;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::executeCommand</span><span class="params">(<span class="keyword">int32_t</span> cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BBinder* obj;</span><br><span class="line">    RefBase::weakref_type* refs;</span><br><span class="line">    <span class="keyword">status_t</span> result = NO_ERROR;</span><br><span class="line"><span class="keyword">case</span> BR_TRANSACTION:</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">  <span class="keyword">if</span> (tr.target.ptr) &#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">     <span class="function">sp&lt;BBinder&gt; <span class="title">b</span><span class="params">((BBinder*)tr.cookie)</span></span>;</span><br><span class="line">     error = b-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//the_context_object 是　IPCThreadState.cpp定义的一个全局变量,可通过setTheContextObject</span></span><br><span class="line">     error = the_context_object-&gt;transact(tr.code, buffer, &amp;reply, tr.flags);</span><br><span class="line">  &#125;     </span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">case</span> BR_DEAD_BINDER:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//　收到Binder驱动发来的service 死掉的消息，只有Bp端能收到</span></span><br><span class="line">   BpBinder *proxy = (BpBinder*)mIn.readPointer();</span><br><span class="line">   proxy-&gt;sendObituary();</span><br><span class="line">   mOut.writeInt32(BC_DEAD_BINDER_DONE);</span><br><span class="line">   mOut.writePointer((<span class="keyword">uintptr_t</span>)proxy);</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BR_SPAWN_LOOPER:</span><br><span class="line">    <span class="comment">// 这里将收到来自驱动的指示以创建一个新线程，用于和Binder通讯</span></span><br><span class="line">   mProcess-&gt;spawnPooledThread(<span class="literal">false</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> ｝   </span><br><span class="line">     </span><br><span class="line"> <span class="comment">// 交互数据与驱动</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::talkWithDriver</span><span class="params">(<span class="keyword">bool</span> doReceive)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mProcess-&gt;mDriverFD &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -EBADF;</span><br><span class="line">  &#125;</span><br><span class="line">  binder_write_read bwr; <span class="comment">//　用来与binder设备交换数据的机构 </span></span><br><span class="line"> ......</span><br><span class="line">  bwr.write_size = outAvail;<span class="comment">// 请求命令的填充</span></span><br><span class="line">  bwr.write_buffer = (<span class="keyword">uintptr_t</span>)mOut.data();</span><br><span class="line">  <span class="comment">// This is what we'll read.</span></span><br><span class="line">  <span class="keyword">if</span> (doReceive &amp;&amp; needRead) &#123;</span><br><span class="line">      bwr.read_size = mIn.dataCapacity();<span class="comment">//接收数据缓冲区信息的填充，如果接收到数据就直接填在mIn中</span></span><br><span class="line">      bwr.read_buffer = (<span class="keyword">uintptr_t</span>)mIn.data();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      bwr.read_size = <span class="number">0</span>;</span><br><span class="line">      bwr.read_buffer = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(HAVE_ANDROID_OS)</span></span><br><span class="line">    <span class="comment">//　不是read/write调用，而是　ioctl 方式</span></span><br><span class="line">      <span class="keyword">if</span> (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= <span class="number">0</span>)　</span><br><span class="line">          err = NO_ERROR;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          err = -errno;</span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="startThreadPool"><a href="#startThreadPool" class="headerlink" title="startThreadPool()"></a>startThreadPool()</h4><h5 id="ProcessState-cpp-2"><a href="#ProcessState-cpp-2" class="headerlink" title="ProcessState.cpp"></a>ProcessState.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProcessState::startThreadPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    <span class="keyword">if</span> (!mThreadPoolStarted) &#123;<span class="comment">//　如果已startThreadPool的话，这个函数无实质性作用</span></span><br><span class="line">        mThreadPoolStarted = <span class="literal">true</span>;</span><br><span class="line">        spawnPooledThread(<span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ProcessState::spawnPooledThread</span><span class="params">(<span class="keyword">bool</span> isMain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mThreadPoolStarted) &#123; <span class="comment">//　参数是　true</span></span><br><span class="line">        String8 name = makeBinderThreadName();</span><br><span class="line">        ALOGV(<span class="string">"Spawning new pooled thread, name=%s\n"</span>, name.<span class="built_in">string</span>());</span><br><span class="line">        sp&lt;Thread&gt; t = <span class="keyword">new</span> PoolThread(isMain);</span><br><span class="line">        t-&gt;run(name.<span class="built_in">string</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="joinThreadPool"><a href="#joinThreadPool" class="headerlink" title="joinThreadPool"></a>joinThreadPool</h4><h5 id="IPCThreadState-cpp"><a href="#IPCThreadState-cpp" class="headerlink" title="IPCThreadState.cpp"></a>IPCThreadState.cpp</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IPCThreadState::joinThreadPool</span><span class="params">(<span class="keyword">bool</span> isMain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果　isMain　为　true，需要循环处理。把请求信息写到　mOut，待会一起发出</span></span><br><span class="line">    mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER);</span><br><span class="line">    set_sched_policy(mMyThreadId, SP_FOREGROUND);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">status_t</span> result;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        processPendingDerefs();</span><br><span class="line">        <span class="comment">// now get the next command to be processed, waiting if necessary</span></span><br><span class="line">        result = getAndExecuteCommand();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result &lt; NO_ERROR &amp;&amp; result != TIMED_OUT &amp;&amp; result != -ECONNREFUSED &amp;&amp; result != -EBADF) &#123;</span><br><span class="line">            ALOGE(<span class="string">"getAndExecuteCommand(fd=%d) returned unexpected error %d, aborting"</span>,</span><br><span class="line">                  mProcess-&gt;mDriverFD, result);</span><br><span class="line">            <span class="built_in">abort</span>();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// Let this thread exit the thread pool if it is no longer</span></span><br><span class="line">        <span class="comment">// needed and it is not the main process thread.</span></span><br><span class="line">        <span class="keyword">if</span>(result == TIMED_OUT &amp;&amp; !isMain) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result != -ECONNREFUSED &amp;&amp; result != -EBADF);</span><br><span class="line"></span><br><span class="line">    LOG_THREADPOOL(<span class="string">"**** THREAD %p (PID %d) IS LEAVING THE THREAD POOL err=%p\n"</span>,</span><br><span class="line">        (<span class="keyword">void</span>*)pthread_self(), getpid(), (<span class="keyword">void</span>*)result);</span><br><span class="line">    </span><br><span class="line">    mOut.writeInt32(BC_EXIT_LOOPER);</span><br><span class="line">    talkWithDriver(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">IPCThreadState::getAndExecuteCommand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">status_t</span> result;</span><br><span class="line">    <span class="keyword">int32_t</span> cmd;</span><br><span class="line"></span><br><span class="line">    result = talkWithDriver();　<span class="comment">// 发送命令，读取请求</span></span><br><span class="line">    <span class="keyword">if</span> (result &gt;= NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">size_t</span> IN = mIn.dataAvail();</span><br><span class="line">        <span class="keyword">if</span> (IN &lt; <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>)) <span class="keyword">return</span> result;</span><br><span class="line">        cmd = mIn.readInt32();</span><br><span class="line">        IF_LOG_COMMANDS() &#123;</span><br><span class="line">            alog &lt;&lt; <span class="string">"Processing top-level Command: "</span></span><br><span class="line">                 &lt;&lt; getReturnString(cmd) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result = executeCommand(cmd);　<span class="comment">// 处理信息</span></span><br><span class="line">        <span class="comment">// After executing the command, ensure that the thread is returned to the</span></span><br><span class="line">        <span class="comment">// foreground cgroup before rejoining the pool.  The driver takes care of</span></span><br><span class="line">        <span class="comment">// restoring the priority, but doesn't do anything with cgroups so we</span></span><br><span class="line">        <span class="comment">// need to take care of that here in userspace.  Note that we do make</span></span><br><span class="line">        <span class="comment">// sure to go in the foreground after executing a transaction, but</span></span><br><span class="line">        <span class="comment">// there are other callbacks into user code that could have changed</span></span><br><span class="line">        <span class="comment">// our group so we want to make absolutely sure it is put back.</span></span><br><span class="line">        set_sched_policy(mMyThreadId, SP_FOREGROUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>基于Android版本  5.1_LMY47D </li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder初步理解</title>
      <link href="/posts/63325/"/>
      <url>/posts/63325/</url>
      
        <content type="html"><![CDATA[<h4 id="Binder进程通信使用情景"><a href="#Binder进程通信使用情景" class="headerlink" title="Binder进程通信使用情景"></a>Binder进程通信使用情景</h4><ul><li>Service Manager的启动过程</li><li>Service Manager代理对象的获取过程</li><li>Service 组件的启动过程</li><li>Service 代理对象的获取过程</li></ul><h4 id="Binder优势"><a href="#Binder优势" class="headerlink" title="Binder优势"></a>Binder优势</h4><ul><li>性能<ul><li>传统跨进程通讯需要拷贝数据两次，而Binder机制只需要一次，主要是使用到了内存映射</li><li>接收数据的缓存区由数据接收进程提供，但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能大的内存空间或者先调用 API 接收消息头来获取消息体的大小，这两种做法不是浪费空间就是浪费时间</li></ul></li><li>稳定<ul><li>基于 C/S</li><li>优于内存共享</li></ul></li><li>安全<ul><li>传统IPC没有安全措施，完全依赖上层协议来确保</li><li>传统IPC无法获取对象可靠的进程ID/用户ID （PID/UID),从而无法鉴别对方的身份</li><li>传统IPC只能由用户在数据包中填入 UID/PID，容易被恶意程序利用</li><li>传统IPC访问接入点是开放的</li><li>(进程ID是鉴别进程身份的重要标志)</li><li>Binder既支持匿名Binder，又支持匿名Binder，安全性高</li></ul></li></ul><h4 id="Linux基础知识"><a href="#Linux基础知识" class="headerlink" title="Linux基础知识"></a>Linux基础知识</h4><ul><li><p>进程空间划分</p><ul><li><p>一个进程空间分为  <code>用户空间</code> 和 <code>内核空间</code>,即进程内 <code>用户</code> 和 <code>内核</code> 隔离</p></li><li><p>二者区别</p><ul><li>进程间，用户空间的数据不可共享，所以 用户空间 = 不可共享空间</li><li>进程间，内核空间的数据可共享，所以 内核空间 = 可共享空间</li></ul></li><li><p>进程内 用户空间 &amp; 内核空间进行交互，需要通过  系统调用，主要通过函数：</p><ul><li><code>copy_from_user()</code>  将用户空间的数据拷贝到内核空间</li><li><code>copy_to_user ()</code>  将内核空间的数据拷贝到用户空间</li></ul></li><li><p>所有进程共用一个内核空间</p><p><img src="%E8%BF%9B%E7%A8%8B%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86.png" alt="进程空间划分"></p></li></ul></li><li><p>进程隔离 &amp; 跨进程通讯 (IPC)</p><ul><li><p>进程隔离</p><ul><li>为了保证 安全性 &amp; 独立性，一个进程 不能直接操作或者访问另一个进程，即<code>Android</code>的进程是<strong>相互独立、隔离的</strong></li></ul></li><li><p>跨进程通讯 (IPC)</p><ul><li><p>进程间进行数据交互，通讯</p></li><li><p>跨进程通讯需要内核空间作支持，但是Binder不是Linux内核的一部分，但是得益于 Linux 内核的动态内核可以加载模板机制</p></li><li><p>模块是独立功能的程序，可以被单独编译但是不可以单独运行，在运行时候被链接到内核作为内核的一部分运行</p></li><li><p>Android系统可以通过动态添加一个内核模块在内核空间，用户进程通过这个内核模块作为桥梁来实现通讯</p></li><li><p>Android系统中，这个运行在内核空间负责各个用户进程通过Binder实现通讯功能的内核模块就叫 <code>Binder驱动</code>，而Android用户<code>通过BInder驱动使用内存映射</code>来实现通讯</p></li><li><p><code>内存映射</code>通过 <code>mmap()</code>来实现</p><ul><li>内存映射简单的讲就是将用户空间的一块内存区域映射到内核空间。映射关系建立后，用户对这块内存区域的修改可以直接反应到内核空间；反之内核空间对这段区域的修改也能直接反应到用户空间。</li></ul></li></ul></li></ul></li></ul><h4 id="Binder-IPC-通讯原理"><a href="#Binder-IPC-通讯原理" class="headerlink" title="Binder IPC 通讯原理"></a>Binder IPC 通讯原理</h4><ul><li><p>Binder IPC 是基于 mmap() 来实现的，但是 mmap() 通常在有物理介质的文件系统上</p></li><li><p>Binder 并不存在物理介质，因此 BInder驱动使用 mmap()  并不是在屋里介质和用户空间建立映射，而在于用来在某个内核空间创建数据接收的缓存空间</p></li></ul><p><img src="%E8%B7%A8%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AF%E6%A8%A1%E5%9E%8B.png" alt="跨进程通讯模型"></p><h5 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h5><ul><li><p><code>Client</code>进程、<code>Server</code>进程 &amp; <code>Service Manager</code> 进程之间的交互 都必须通过<code>Binder</code>驱动（使用 <code>open</code> 和 <code>ioctl</code>文件操作函数），而非直接交互:</p></li><li><ul><li><p><code>Client</code>进程、<code>Server</code>进程 &amp; <code>Service Manager</code>进程属于进程空间的用户空间，不可进行进程间交互  </p></li><li><p><code>Binder</code>驱动 属于 进程空间的 内核空间，可进行进程间 &amp; 进程内交互</p></li></ul></li></ul><hr><h4 id="Binder通讯过程"><a href="#Binder通讯过程" class="headerlink" title="Binder通讯过程"></a>Binder通讯过程</h4><ul><li><p>首先，一个进程使用 BINDER_SET_CONTEXT_MGR 命令通过 Binder 驱动将自己注册成为 ServiceManager</p></li><li><p>Server 通过驱动向 ServiceManager 中注册 Binder（Server 中的 Binder 实体），表明可以对外提供服务。驱动为这个 Binder 创建位于内核中的实体节点以及 ServiceManager 对实体的引用，将名字以及新建的引用打包传给 ServiceManager，ServiceManger 将其填入查找表</p></li><li><p>Client 通过名字，在 Binder 驱动的帮助下从 ServiceManager 中获取到对 Binder 实体的引用，通过这个引用就能实现和 Server 进程的通信</p><p><img src="Binder%E9%80%9A%E8%AE%AF%E6%A8%A1%E5%9E%8B.png" alt="Binder通讯模型"></p></li></ul><hr><h4 id="常规使用案例参考"><a href="#常规使用案例参考" class="headerlink" title="常规使用案例参考"></a>常规使用案例参考</h4><ul><li><p><a href="https://blog.csdn.net/lmj623565791/article/details/38461079">鸿洋_Android aidl Binder框架浅析</a></p></li><li><h5 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h5><p>常见，自寻</p></li><li><h5 id="非AIDL"><a href="#非AIDL" class="headerlink" title="非AIDL"></a>非AIDL</h5><ul><li><p>Binder-SYS将通信的双方分为Server和Client，即C/S架构</p></li><li><p>Server和Client利用IBinder跨进程通信的原理是:</p><ul><li>Client调用其IBinder实例的transact()发起操作，Binder-SYS使得方法调用传递到Server端，以相同的参数执行Server端IBinder实例的transact()方法——这就是Binder-SYS实现的跨进程操作</li></ul></li><li><p>两端进程均使用一个接口IBinder的实例进行通信，它定义了方法IBinder.transact()，方法原型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform a generic operation with the object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code The action to perform.  This should</span></span><br><span class="line"><span class="comment"> * be a number between &#123;<span class="doctag">@link</span> #FIRST_CALL_TRANSACTION&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #LAST_CALL_TRANSACTION&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data Marshalled data to send to the target.  Must not be null.</span></span><br><span class="line"><span class="comment"> * If you are not sending any data, you must create an empty Parcel</span></span><br><span class="line"><span class="comment"> * that is given here.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reply Marshalled data to be received from the target.  May be</span></span><br><span class="line"><span class="comment"> * null if you are not interested in the return value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> flags Additional operation flags.  Either 0 for a normal</span></span><br><span class="line"><span class="comment"> * RPC, or &#123;<span class="doctag">@link</span> #FLAG_ONEWAY&#125; for a one-way RPC.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> RemoteException</span>;</span><br></pre></td></tr></table></figure></li><li><p>code<br>表示要执行的动作，类似Handler发送的Message的what。<br>code指示了当前远程操作的命令，IBinder定义了像INTERFACE_TRANSACTION、PING_TRANSACTION这样的几个通用命令。自己使用的命令的标识值需要在FIRST_CALL_TRANSACTION和LAST_CALL_TRANSACTION之间，仅仅是整数范围的一个约定，很好理解。</p></li><li><p>data和reply<br>data和reply参数相当于普通java方法里的调用参数和返回值。Parcel类型是可以跨进程的数据。</p></li><li><p>flags<br>参数flags只有0和FLAG_ONEWAY两种，默认的跨进程操作是同步的，所以transact()方法的执行会阻塞，调用以同步的形式传递到远程的transact()，等待远端的transact()返回后继续执行——最好理解的方式就是把两端的transact()看作一个方法，Binder机制的目标也就是这样。指定FLAG_ONEWAY时，表示Client的transact()是单向调用，执行后立即返回，无需等待Server端transact()返回。code</p></li></ul></li></ul><hr><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><ul><li>摘录自<ul><li><a href="https://www.bbsmax.com/A/AgGdXn1J4m/">笔记：Binder通信机制</a></li><li><a href="https://blog.csdn.net/carson_ho/article/details/73560642">Android跨进程通信：图文详解 Binder机制 原理</a></li><li><a href="https://www.jianshu.com/p/429a1ff3560c">写给 Android 应用工程师的 Binder 原理剖析</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载编译Android内核</title>
      <link href="/posts/29775/"/>
      <url>/posts/29775/</url>
      
        <content type="html"><![CDATA[<ul><li>发现有一个写的比我好很多的</li><li><a href="https://blog.csdn.net/u012417380/article/details/73353670">Android系统内核编译及刷机实战 （修改反调试标志位）</a></li></ul><hr><h4 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h4><ul><li>各个版本内核源码项目所对应的下载命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/common.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/hikey-linaro</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/x86_64.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/exynos.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/msm.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/omap.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/samsung.git</span><br><span class="line">$ git clone https://aosp.tuna.tsinghua.edu.cn/kernel/tegra.git</span><br></pre></td></tr></table></figure><ul><li>各个内核项目所支持的设备<ul><li><code>goldfish</code> 项目包含适用于所模拟的平台的内核源代码。</li><li><code>msm</code> 项目包含适用于 ADP1、ADP2、Nexus One、Nexus 4、Nexus 5、Nexus 6、Nexus 5X、Nexus 6P、Nexus 7 (2013)、Pixel 和 Pixel XL 的源代码，可用作使用 Qualcomm MSM 芯片组的起点。</li><li><code>omap</code> 项目用于 PandaBoard 和 Galaxy Nexus，可用作使用 TI OMAP 芯片组的起点。</li><li><code>samsung</code> 项目用于 Nexus S，可用作使用 Samsung Hummingbird 芯片组的起点。</li><li><code>tegra</code> 项目用于 Xoom、Nexus 7 (2012)、Nexus 9，可用作使用 NVIDIA Tegra 芯片组的起点。</li><li><code>exynos</code> 项目包含适用于 Nexus 10 的内核源代码，可用作使用 Samsung Exynos 芯片组的起点。</li><li><code>x86_64</code> 项目包含适用于 Nexus Player 的内核源代码，可用作使用 Intel x86_64 芯片组的起点。</li><li><code>hikey-linaro</code> 项目用于 HiKey 参考板，可用作使用 HiSilicon 620 芯片组的起点。</li></ul></li></ul><hr><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ul><li><p>创建文件夹</p><p> mkdir kernel</p></li><li><p>下载内核文件</p></li><li><p>goldfish 是Android模拟器使用的</p></li><li><p>git clone <a href="https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git">https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git</a></p></li></ul><ul><li>这里用的是清华镜像，谷歌的反正总是连不上。fq也不行<br><img src="%E4%B8%8B%E8%BD%BD%E5%86%85%E6%A0%B8.png" alt="下载内核"></li></ul><ul><li><p>获取分支</p><ul><li>git branch -a<br><img src="%E8%8E%B7%E5%8F%96%E5%88%86%E6%94%AF.png" alt="获取分支"></li></ul></li><li><p>下拉对应文件</p><ul><li>这个3.4看个人需求，比如我下载的是4.4.3-r1的源码，编译刷机后，手机里面的关于手机。内核是3.4.0</li><li>git checkout remotes/origin/android-goldfish-3.4<br><img src="checkout.png" alt="checkout"></li></ul></li></ul><hr><h4 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h4><ul><li><p>配置环境变量</p><ul><li>$ export PATH=$PATH:~/源码目录(如果下载了Android源码)/prebuilts/gcc/linux-x86/arm/arm-eabi-4.8(这个有的是4.6)/bin</li><li>[gcc交叉编译工具链-没下载Android源码的点这里]( git clone <a href="https://aosp.tuna.tsinghua.edu.cn/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6">https://aosp.tuna.tsinghua.edu.cn/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6</a>)</li><li>goldfish 目录下找到 Makefile 文件修改</li></ul><p><img src="Makefile.png" alt="Makefile .png"></p><ul><li>在goldfish目录下 执行<ul><li>make goldfish_armv7_defconfig<ul><li>编译开始</li><li>make</li></ul></li></ul></li></ul></li></ul><ul><li>成功截图<br><img src="%E7%BC%96%E8%AF%91%E6%88%90%E5%8A%9F.png" alt="编译成功"></li></ul><hr><h4 id="虚拟机使用编译内核"><a href="#虚拟机使用编译内核" class="headerlink" title="虚拟机使用编译内核"></a>虚拟机使用编译内核</h4><ul><li>启动指令 </li><li>需要先lunch一下编译的android镜像<ul><li>emulator 　-kernel   路径/kernel/goldfish/arch/arm/boot/zImage &amp;</li></ul></li></ul><p><img src="%E4%BD%BF%E7%94%A8%E5%86%85%E6%A0%B8%E9%95%9C%E5%83%8F.png" alt="使用内核镜像"></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WiFi通讯</title>
      <link href="/posts/6794/"/>
      <url>/posts/6794/</url>
      
        <content type="html"><![CDATA[<h4 id="Socket通讯"><a href="#Socket通讯" class="headerlink" title="Socket通讯"></a>Socket通讯</h4><ul><li><p><a href="https://www.jianshu.com/p/572ac573e4b8">参考自-Android Wifi连接控制、TCP、UDP通信，6.0以上适配</a></p></li><li><p><a href="https://github.com/wl960127/WifiChatUse.git">本案例Demo传送</a></p></li><li><p>面向连接 TCP</p><ul><li>传输控制协议</li><li>面向连接，可靠的面向数据的字节流服务</li><li>传输之前经过”三次握手”，保证数据的可靠性，但效率较低</li><li>要求系统资源较多,且必须先开启服务器</li><li>一般用于对数据传输安全性比较高的场合</li></ul></li><li><p>无连接 UDP</p><ul><li>用户数据协议</li><li>简单的，面向数据报的运输层协议</li><li>不提供可靠性，数据传输可能会错序，丢包，但是效率高</li><li>可以有大量Client</li><li>一般用于对于实时性要求比较高，网络负担重的场合</li></ul></li></ul><h4 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h4><ul><li><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p><img src="tcp.jpg" alt="tcp"></p></li><li><h5 id="TCP服务器实现"><a href="#TCP服务器实现" class="headerlink" title="TCP服务器实现"></a>TCP服务器实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServerActivity 使用  new Thread( new MyServerRunnable()).start();</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="comment">//发数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        LogUtils.e(<span class="string">"服务端发送："</span> + data);</span><br><span class="line">        <span class="keyword">if</span> (printWriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            printWriter.println(data);</span><br><span class="line">            printWriter.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//接数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogUtils.e(<span class="string">"=======打开服务========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(Config.INSTANCE.getHOST_PORT());</span><br><span class="line">            clientSocket = serverSocket.accept();</span><br><span class="line">            LogUtils.e(<span class="string">"======客户端连接成功========="</span>);</span><br><span class="line">            InetAddress inetAddress = clientSocket.getInetAddress();</span><br><span class="line">            String ip = inetAddress.getHostAddress();</span><br><span class="line">            LogUtils.e(<span class="string">"客户端ID为:"</span> + ip);</span><br><span class="line">            printWriter = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream());</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> ((result = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                LogUtils.e(<span class="string">"服务端接到的数据为："</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="TCP客户端实现"><a href="#TCP客户端实现" class="headerlink" title="TCP客户端实现"></a>TCP客户端实现</h5> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClientActivity 使用  new Thread( new MyClientRunnable()).start();</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientRunnable</span>  <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">      <span class="comment">//客户端发数据</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String data)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (printWriter != <span class="keyword">null</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             printWriter.println(data);</span><br><span class="line">             printWriter.flush();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       <span class="comment">//接收据</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//连接服务器</span></span><br><span class="line">             clientSocket = <span class="keyword">new</span> Socket(server_ip, Config.INSTANCE.getHOST_PORT());</span><br><span class="line">             clientSocket.setSoTimeout(timeout);</span><br><span class="line">             </span><br><span class="line">             printWriter = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream());</span><br><span class="line">             bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line">             </span><br><span class="line">             String result = <span class="string">""</span>;</span><br><span class="line">             <span class="keyword">while</span> ((result = bufferedReader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                LogUtils.e( <span class="string">"客户端接到的数据为："</span> + result);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e)</span><br><span class="line">         &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">// 关闭流</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;..&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p><img src="udp.jpg" alt="udp"></p></li><li><h5 id="UDP接收实现"><a href="#UDP接收实现" class="headerlink" title="UDP接收实现"></a>UDP接收实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpReceiveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress groupAddress = InetAddress.getByName(Config.INSTANCE.getHOST_ADDRESS());</span><br><span class="line">            <span class="comment">//实现多播</span></span><br><span class="line">            ms = <span class="keyword">new</span> MulticastSocket(Config.INSTANCE.getHOST_PORT());</span><br><span class="line">            </span><br><span class="line">            ms.joinGroup(groupAddress);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dp = <span class="keyword">new</span> DatagramPacket(data, data.length);</span><br><span class="line">                <span class="keyword">if</span> (ms != <span class="keyword">null</span>)</span><br><span class="line">                    ms.receive(dp);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dp.getAddress() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String quest_ip = dp.getAddress().toString();</span><br><span class="line"></span><br><span class="line">                String host_ip = NetUtils.getLocalHostIp(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String codeString = <span class="keyword">new</span> String(data, <span class="number">0</span>, dp.getLength());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(host_ip) &amp;&amp; host_ip.equals(quest_ip.substring(<span class="number">1</span>))) &#123;</span><br><span class="line"> </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ....</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li><li><p>MulticastSocket用于发送、接收数据报的方法与DatagramSocket完全一样。但MulticastSocket比DatagramSocket多了一个setTimeToLive(int ttl)方法，该ttl参数用于设置数据报最多可以跨过多少个网络，当ttl的值为0时，指定数据报应停留在本地主机；当ttl的值为1时，指定数据报发送到本地局域网；当ttl的值为32时，意味着只能发送到本站点的网络上；当ttl的值为64时，意味着数据报应保留在本地区；当ttl的值为128时，意味着数据报应保留在本大洲；当ttl的值为255时，意味着数据报可发送到所有地方；在默认情况下，该ttl的值为1。</p></li><li><h5 id="UDP发送实现"><a href="#UDP发送实现" class="headerlink" title="UDP发送实现"></a>UDP发送实现</h5> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpBroadCast</span>  <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    MulticastSocket sender = <span class="keyword">null</span>;</span><br><span class="line">    DatagramPacket dj = <span class="keyword">null</span>;</span><br><span class="line">    InetAddress group = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//发送方法</span></span><br><span class="line">    UdpBroadCast(String dataString) &#123;</span><br><span class="line">        data = dataString.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sender = <span class="keyword">new</span> MulticastSocket();</span><br><span class="line">            <span class="comment">//ip</span></span><br><span class="line">            group = InetAddress.getByName(Config.INSTANCE.getHOST_ADDRESS());</span><br><span class="line">            <span class="comment">//端口号</span></span><br><span class="line">            dj = <span class="keyword">new</span> DatagramPacket(data, data.length, group, Config.INSTANCE.getHOST_PORT());</span><br><span class="line">            sender.send(dj);</span><br><span class="line">            sender.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wii一般连接操作</title>
      <link href="/posts/54963/"/>
      <url>/posts/54963/</url>
      
        <content type="html"><![CDATA[<h4 id="WifiManager"><a href="#WifiManager" class="headerlink" title="WifiManager"></a>WifiManager</h4><ul><li>addNetwork(WifiConfiguration config) 添加一个config描述的WIFI网络，默认情况下，这个WIFI网络是DISABLE状态的。</li><li>calculateSignalLevel(int rssi , int numLevels) 计算信号的等级</li><li>compareSignalLevel(int rssiA, int rssiB) 对比网络A和网络B的信号强度</li><li>createWifiLock(int lockType, String tag) 创建一个WIFI 锁，锁定当前的WIFI连接</li><li>disableNetwork(int netId) 让一个网络连接失效</li><li>disconnect() 断开当前的WIFI连接</li><li>enableNetwork(int netId, Boolean disableOthers) 连接netId所指的WIFI网络，并是其他的网络都被禁用</li><li>getConfiguredNetworks() 获取网络连接的状态</li><li>getConnectionInfo() 获取当前连接的信息</li><li>getDhcpInfo() 获取DHCP 的信息</li><li>getScanResulats() 获取扫描测试的结果</li><li>getWifiState() 获取当前WIFI设备的状态</li><li>isWifiEnabled() 判断WIFI设备是否打开</li><li>pingSupplicant() ping操作，和PC的ping操作相同作用</li><li>ressociate() 重新连接WIFI网络，即使该网络是已经被连接上的</li><li>reconnect() 重新连接一个未连接上的WIFI网络</li><li>removeNetwork() 移除某一个网络</li><li>saveConfiguration() 保留一个配置信息</li><li>setWifiEnabled() 让一个连接有效</li><li>getScanResults() 开始扫描</li><li>updateNetwork(WifiConfiguration config) 更新一个网络连接</li></ul><p><img src="wifi.png" alt="wifi"></p><p><img src="%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="运行结果"></p><h5 id="Demo传送门"><a href="#Demo传送门" class="headerlink" title="Demo传送门"></a><a href="https://github.com/wl960127/WifiConnectUse.git">Demo传送门</a></h5><ul><li>Demo还有些bug，连接之后，状态没有变，然后再次关闭开启SwitchButton,没有执行到getScanResults方法</li><li>所以上面的 getConfiguredNetworks 没有获取到数据可能有问题，下次再核实一下。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MQTT在Android的使用</title>
      <link href="/posts/63361/"/>
      <url>/posts/63361/</url>
      
        <content type="html"><![CDATA[<h4 id="消息推送的方式"><a href="#消息推送的方式" class="headerlink" title="消息推送的方式"></a>消息推送的方式</h4><ul><li>轮询   <ul><li>Handler、定时器…</li></ul></li><li>持久连接： 长连接<ul><li>Google的C2DM（Cloudto Device Messaging）。需要科学上网，国内大多数用户无法使用。</li><li>XMPP<ul><li>XMPP(可扩展通讯和表示协议)是基于可扩展标记语言（XML）的协议。androidpn是一个基于XMPP协议的java开源Android push notification实现。它包含了完整的客户端和服务器端。</li></ul></li><li>MQTT<ul><li>MQTT是一个轻量级的消息发布/订阅协议，它是实现基于手机客户端的消息推送服务器的理想解决方案。</li></ul></li><li>WebSocket    </li></ul></li></ul><h4 id="MQTT简介"><a href="#MQTT简介" class="headerlink" title="MQTT简介"></a>MQTT简介</h4><ul><li><a href="http://mqtt.org/">MQTT官网</a></li><li><a href="http://www.ibm.com">MQTT介绍</a></li><li><a href="https://github.com/eclipse/paho.mqtt.android">MQTT Android github</a></li><li><a href="http://www.eclipse.org/paho/files/javadoc/index.html">MQTT API</a></li><li><a href="http://www.eclipse.org/paho/files/android-javadoc/index.html">MQTT Android API</a></li></ul><h4 id="Window服务器搭建"><a href="#Window服务器搭建" class="headerlink" title="Window服务器搭建"></a>Window服务器搭建</h4><h5 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h5><ul><li><p><a href="http://activemq.apache.org/apollo/download.html">点击下载 Apollo 1.7.1</a></p></li><li><p>命令行进入安装目录bin目录下  </p></li><li><p>输入apollo create XXX（xxx为创建的服务器实例名称，例：apollo create mybroker），之后会在bin目录下创建名称为XXX的文件夹。XXX文件夹下etc\apollo.xml文件下是配置服务器信息的文件。etc\users.properties文件包含连接MQTT服务器时用到的用户名和密码，默认为admin=password，即账号为admin，密码为password，可自行更改。</p></li><li><p>进入XXX/bin目录，输入apollo-broker.cmd run开启服务器，没报错一般就是开启成功</p></li><li><p>之后在浏览器输入<a href="http://127.0.0.1:61680/">http://127.0.0.1:61680/</a>，查看是否安装成功。 </p></li></ul><h5 id="EMQX"><a href="#EMQX" class="headerlink" title="EMQX"></a>EMQX</h5><p><a href="https://wuhansan.github.io/2019/03/07/EMQX%E9%83%A8%E7%BD%B2%E5%9C%A8Window%E7%B3%BB%E7%BB%9F/">EMQX部署在Window系统</a></p><h5 id="mosquitto"><a href="#mosquitto" class="headerlink" title="mosquitto"></a>mosquitto</h5><h4 id="Android客户端"><a href="#Android客户端" class="headerlink" title="Android客户端"></a>Android客户端</h4><ul><li><p><strong>先看到最后</strong></p></li><li><p>build.gradle (app)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;https://repo.eclipse.org/content/repositories/paho-releases/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    implementation &apos;org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0&apos;</span><br><span class="line">    implementation &apos;org.eclipse.paho:org.eclipse.paho.android.service:1.1.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidManifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--权限--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line">        &lt;!-- Mqtt Service --&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"org.eclipse.paho.android.service.MqttService"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自己定义的逻辑 Service --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyMtqqService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MyMtqqService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMtqqService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"><span class="comment">//    private String host = "tcp://电脑IPv4:61613";</span></span><br><span class="line"><span class="comment">//    private String clientId = "02";</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//一般来说是 10.0.2.2但是模拟器中的IP地址网段为3，所以写的10.0.3.2</span></span><br><span class="line">    <span class="comment">//记得观察仔细</span></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"tcp://10.0.3.2:61613"</span>;</span><br><span class="line">    <span class="keyword">private</span> String clientId = <span class="string">"03"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userName = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> String passWord = <span class="string">"password"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String myTopic = <span class="string">"topic"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MqttAndroidClient client;</span><br><span class="line">    <span class="keyword">private</span> MqttConnectOptions conOpt;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//抽取出来的发送函数，供调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        String topic = myTopic;</span><br><span class="line">        <span class="comment">//QOS ＝　0/1/2  　最多一次　　最少一次　多次</span></span><br><span class="line">        Integer qos = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//是否保留消息，为ｔｒｕｅ时,后来订阅该主题的仍然收到该消息</span></span><br><span class="line">        Boolean retained = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.publish(topic, msg.getBytes(), qos, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 服务器地址（协议+地址+端口号）</span></span><br><span class="line">        String uri = host;</span><br><span class="line">        client = <span class="keyword">new</span> MqttAndroidClient(<span class="keyword">this</span>.getApplicationContext(), uri, clientId);</span><br><span class="line">        <span class="comment">// 设置MQTT监听并且接受消息</span></span><br><span class="line">        client.setCallback(mqttCallback);</span><br><span class="line">    </span><br><span class="line">        conOpt = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        <span class="comment">// 不清除缓存　为false表示服务器会保留客户端的连接记录，否则每次连接到服务器都会以新的身份接入　　　　</span></span><br><span class="line">       conOpt.setCleanSession(ｆａlse);</span><br><span class="line">        <span class="comment">// 设置超时时间，单位：秒　　这个有默认</span></span><br><span class="line">      <span class="comment">//  conOpt.setConnectionTimeout(10);</span></span><br><span class="line">        <span class="comment">// mqtt自带实现的心跳包发送间隔，单位：秒　　　这个有默认　６０</span></span><br><span class="line">        <span class="comment">//conOpt.setKeepAliveInterval(20);</span></span><br><span class="line">        <span class="comment">// 用户名</span></span><br><span class="line">        conOpt.setUserName(userName);</span><br><span class="line">        <span class="comment">// 密码</span></span><br><span class="line">        conOpt.setPassword(passWord.toCharArray());</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">boolean</span> doConnect = <span class="keyword">true</span>;</span><br><span class="line">        String message = <span class="string">"&#123;\"terminal_uid\":\""</span> + clientId + <span class="string">"掉线\"&#125;"</span>;</span><br><span class="line">        String topic = myTopic;</span><br><span class="line">        Integer qos = <span class="number">2</span>;</span><br><span class="line">        Boolean retained = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> ((!message.equals(<span class="string">""</span>)) || (!topic.equals(<span class="string">""</span>))) &#123;</span><br><span class="line">            <span class="comment">// 最后的遗嘱 也就是断线之后发送出来的消息,测试发现　收到这个消息的时候已经掉线很久</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conOpt.setWill(topic, message.getBytes(), qos, retained);</span><br><span class="line">                LogUtils.e(<span class="string">" conOpt.setWill"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LogUtils.e(e.toString());</span><br><span class="line">                doConnect = <span class="keyword">false</span>;</span><br><span class="line">                iMqttActionListener.onFailure(<span class="keyword">null</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (doConnect) &#123;</span><br><span class="line">            doClientConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.disconnect();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//连接MQTT服务器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doClientConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogUtils.e(<span class="string">"doClientConnection"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!client.isConnected() &amp;&amp; isConnectIsNomarl()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                client.connect(conOpt, <span class="keyword">null</span>, iMqttActionListener);</span><br><span class="line">                LogUtils.e(<span class="string">" client.connect"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                LogUtils.e(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MQTT是否连接成功</span></span><br><span class="line">    <span class="keyword">private</span> IMqttActionListener iMqttActionListener = <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken arg0)</span> </span>&#123;</span><br><span class="line">            LogUtils.e(<span class="string">"连接成功 "</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 订阅myTopic话题</span></span><br><span class="line">                client.subscribe(myTopic, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken arg0, Throwable arg1)</span> </span>&#123;</span><br><span class="line">            arg1.printStackTrace();</span><br><span class="line">            LogUtils.e(<span class="string">" 失败 "</span> + arg1.toString());</span><br><span class="line">            <span class="comment">// 连接失败，重连</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MQTT监听并且接受消息</span></span><br><span class="line">    <span class="keyword">private</span> MqttCallback mqttCallback = <span class="keyword">new</span> MqttCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            String str1 = <span class="keyword">new</span> String(message.getPayload());</span><br><span class="line">            String str2 = topic + <span class="string">";qos:"</span> + message.getQos() + <span class="string">";retained:"</span> + message.isRetained();</span><br><span class="line">            LogUtils.e(<span class="string">"messageArrived:"</span> + str1);</span><br><span class="line">            LogUtils.e(str2);</span><br><span class="line">            Toast.makeText(MyMtqqService.<span class="keyword">this</span>, str1, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken arg0)</span> </span>&#123;</span><br><span class="line">            LogUtils.e(arg0.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable arg0)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 失去连接，重连</span></span><br><span class="line">            <span class="comment">//先判断客户端是否为空　　然后客户端.connect（x,x）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="comment">// 判断网络是否连接</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isConnectIsNomarl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConnectivityManager connectivityManager = (ConnectivityManager) <span class="keyword">this</span>.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">        NetworkInfo info = connectivityManager.getActiveNetworkInfo();</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; info.isAvailable()) &#123;</span><br><span class="line">            String name = info.getTypeName();</span><br><span class="line">            LogUtils.e(<span class="string">"MQTT当前网络名称："</span> + name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogUtils.e(<span class="string">"MQTT 没有可用网络"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//开启</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startMqtt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//判断服务是否在运行</span></span><br><span class="line">        isRunning = isServiceRunning();<span class="comment">//不贴了</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning) &#123;</span><br><span class="line">          <span class="comment">// "已经开启了MQTT", clsToolBox.getDateTimeString()));</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MQTTService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">           <span class="comment">// "开启MQTT"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectMqtt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isRunning = isServiceRunning();</span><br><span class="line">        <span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">        <span class="comment">//"请开启MQTT服务";</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (MQTTService.isConnect()) &#123;</span><br><span class="line">           <span class="comment">//"MQTT服务已经连接上了"</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MQTTService.connect();</span><br><span class="line">           <span class="comment">//"MQTT服务开始连接"</span></span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//　发送消息</span></span><br><span class="line">MyMtqqService.pulish(xxx);</span><br></pre></td></tr></table></figure></li></ul><h5 id="问题补充"><a href="#问题补充" class="headerlink" title="问题补充"></a>问题补充</h5><ul><li>MqttException (0) - java.net.SocketTimeoutException: failed to connect to 192.168.x.x</li><li>解决方法<ul><li>一般测试都是在局域网内。所以一定设备和主机要在同一网段</li><li>防火墙！防火墙！防火墙！一定要关闭，我就是碰到这个问题</li></ul></li></ul><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><ul><li>当两台同一局域网的设备安装了apk，之后，已经可以相互通讯并且接收消息了。</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="本地测试效果"><a href="#本地测试效果" class="headerlink" title="本地测试效果"></a>本地测试效果</h5><ul><li><h5 id="服务器模拟"><a href="#服务器模拟" class="headerlink" title="服务器模拟"></a>服务器模拟</h5><ul><li><strong>MQTTLens.io</strong> 谷歌插件，没法翻墙，你就直接下载插件包，然后打开谷歌浏览器的开发者模式，皆可以安装上了。当然你也可以使用 星愿浏览器，和Chrom一样，但可以直接下载安装插件</li></ul></li></ul><p><img src="%E6%A8%A1%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%E5%8F%91.png" alt="模拟服务器下发"></p><ul><li><h5 id="模拟设备"><a href="#模拟设备" class="headerlink" title="模拟设备"></a>模拟设备</h5><ul><li><p>点击 index.html 。</p><ul><li>例如E:\apache-apollo-1.7.1\examples\mqtt\websocket\index.html</li></ul><p><img src="%E6%A8%A1%E6%8B%9F%E8%AE%BE%E5%A4%87.png" alt="模拟设备"></p></li></ul></li><li><h5 id="模拟下发"><a href="#模拟下发" class="headerlink" title="模拟下发"></a>模拟下发</h5><p><img src="%E6%A8%A1%E6%8B%9F%E4%B8%8B%E5%8F%91.png" alt="模拟下发"></p></li><li><h5 id="手机效果"><a href="#手机效果" class="headerlink" title="手机效果"></a>手机效果</h5><p><img src="%E6%89%8B%E6%9C%BA%E6%95%88%E6%9E%9C.png" alt="手机效果"></p></li></ul><h5 id="ubuntu-远程服务器测试"><a href="#ubuntu-远程服务器测试" class="headerlink" title="ubuntu 远程服务器测试"></a>ubuntu 远程服务器测试</h5><ul><li><p>订阅话题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//固定某个</span><br><span class="line">mosquitto_sub -h localhost -p xxx服务器端口 -t &quot;话题&quot; -v　-u &quot;服务器账号&quot; -P &quot;密码&quot;</span><br><span class="line">//监听一级话题下的所有话题</span><br><span class="line">mosquitto_sub -h localhost -p xxx服务器端口 -t &quot;一级话题/#&quot; -v　-u &quot;服务器账号&quot; -P &quot;密码&quot;</span><br></pre></td></tr></table></figure><ul><li>-V  -P 都是大写</li></ul></li><li><p>发送测试话题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto_pub -h localhost -t &quot;topic&quot; -m &quot;&#123;\&quot;action\&quot;:\&quot;relay\&quot;xxx&#125;&quot; -u &quot;mqttuser&quot; -P &quot;yunfan&quot;</span><br></pre></td></tr></table></figure><ul><li>控制台命令是需要转义部分字符</li></ul></li></ul><h4 id="二次改进"><a href="#二次改进" class="headerlink" title="二次改进"></a>二次改进</h4><p>　- MQTTService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQTTService</span> <span class="keyword">extends</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">MqttCallbackExtended</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEBUG_TAG = <span class="string">"MQTTService"</span>; <span class="comment">// Debug TAG</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_THREAD_NAME = <span class="string">"MQTTService["</span> + DEBUG_TAG + <span class="string">"]"</span>; <span class="comment">// Handler Thread ID</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MQTT_BROKER; <span class="comment">// Broker URL or IP Address</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MQTT_PORT; <span class="comment">// Broker Port</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MQTT_USE_NAME; <span class="comment">// Broker NAME</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MQTT_PWD; <span class="comment">// Broker PWD</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String MQTT_TOPIC; <span class="comment">// Broker TOPIC</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MQTT_QOS_0 = <span class="number">0</span>; <span class="comment">// QOS Level 0 ( Delivery Once no confirmation )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MQTT_QOS_1 = <span class="number">1</span>; <span class="comment">// QOS Level 1 ( Delevery at least Once with confirmation )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MQTT_QOS_2 = <span class="number">2</span>; <span class="comment">// QOS Level 2 ( Delivery only once with confirmation with handshake )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MQTT_KEEP_ALIVE = <span class="number">1000</span> * <span class="number">30</span>; <span class="comment">// KeepAlive Interval in MS  修改成30s一次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] MQTT_KEEP_ALIVE_MESSAGE = &#123;<span class="number">0</span>&#125;; <span class="comment">// Keep Alive message to send</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MQTT_KEEP_ALIVE_QOS = MQTT_QOS_2; <span class="comment">// Default Keepalive QOS</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> MQTT_CLEAN_SESSION = <span class="keyword">true</span>; <span class="comment">// Start a clean session?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQTT_URL_FORMAT = <span class="string">"tcp://%s:%s"</span>; <span class="comment">// URL Format normally don't change</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_START = DEBUG_TAG + <span class="string">".START"</span>; <span class="comment">// Action to start</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_STOP = DEBUG_TAG + <span class="string">".STOP"</span>; <span class="comment">// Action to stop</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_KEEPALIVE = DEBUG_TAG + <span class="string">".KEEPALIVE"</span>; <span class="comment">// Action to keep alive used by alarm manager</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_RECONNECT = DEBUG_TAG + <span class="string">".RECONNECT"</span>; <span class="comment">// Action to reconnect</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEVICE_ID_FORMAT = <span class="string">"andr_%s"</span>; <span class="comment">// Device ID Format, add any prefix you'd like</span></span><br><span class="line">    <span class="comment">// Note: There is a 23 character limit you will get</span></span><br><span class="line">    <span class="comment">// An NPE if you go over that limit</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> mStarted = <span class="keyword">false</span>;   <span class="comment">// Is the Client started?</span></span><br><span class="line">    <span class="comment">//    private String CLIENT_ID;       // Device ID, Secure.ANDROID_ID</span></span><br><span class="line">    <span class="keyword">private</span> Handler mConnHandler;     <span class="comment">// Seperate Handler thread for networking</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MemoryPersistence mMemStore; <span class="comment">// On Fail reverts to MemoryStore</span></span><br><span class="line">    <span class="keyword">private</span> MqttConnectOptions mOpts; <span class="comment">// Connection Options</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"StaticFieldLeak"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MqttAndroidClient mClient; <span class="comment">// Mqtt Client</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AlarmManager mAlarmManager; <span class="comment">// Alarm manager to perform repeating tasks</span></span><br><span class="line">    <span class="keyword">private</span> ConnectivityManager mConnectivityManager; <span class="comment">// To check for connectivity changes</span></span><br><span class="line">    <span class="keyword">private</span> Gson gson;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MqttBean mqttBean;</span><br><span class="line">    <span class="keyword">private</span> MqttMessage mPublisMessage;</span><br><span class="line">    <span class="keyword">private</span> MqttMessage message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MQTTService instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MQTTService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> MQTTService <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> MQTTService();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start MQTT Client</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx context to start the service with</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStart</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LogUtils.e(<span class="string">"actionStart"</span>);</span><br><span class="line"></span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(ctx, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_START);</span><br><span class="line">        ctx.startService(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stop MQTT Client</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx context to start the service with</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionStop</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(ctx, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_STOP);</span><br><span class="line">        ctx.startService(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Send a KeepAlive Message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx context to start the service with</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionKeepalive</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(ctx, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_KEEPALIVE);</span><br><span class="line">        ctx.startService(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionReconnect</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(ctx, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_RECONNECT);</span><br><span class="line">        ctx.startService(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initalizes the DeviceId and most instance variables</span></span><br><span class="line"><span class="comment">     * Including the Connection Handler, Datastore, Alarm Manager</span></span><br><span class="line"><span class="comment">     * and ConnectivityManager.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"HardwareIds"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        LogUtils.e(<span class="string">"onCreate"</span>);</span><br><span class="line"></span><br><span class="line">        gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(MQTT_THREAD_NAME);</span><br><span class="line">        thread.start();</span><br><span class="line">        mConnHandler = <span class="keyword">new</span> Handler(thread.getLooper());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定时心跳 以及变化监听</span></span><br><span class="line">        mAlarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class="line">        mConnectivityManager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        CLIENT_ID = ACache.get(MyApplication.getInstance()).getAsString(<span class="string">"imei"</span>);</span><br><span class="line">        LogUtils.e(TextUtils.isEmpty(CLIENT_ID) ? <span class="string">"null"</span> : CLIENT_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOption</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        mOpts.setUserName(MQTT_USE_NAME);</span><br><span class="line">        mOpts.setPassword(MQTT_PWD.toCharArray());</span><br><span class="line">        mOpts.setAutomaticReconnect(<span class="keyword">true</span>);</span><br><span class="line">        mOpts.setKeepAliveInterval(<span class="number">30</span>);</span><br><span class="line">        mOpts.setConnectionTimeout(<span class="number">60</span>);</span><br><span class="line">        mOpts.setCleanSession(MQTT_CLEAN_SESSION);</span><br><span class="line"></span><br><span class="line">        mOpts.setWill(<span class="string">"zhineng-"</span> + MQTT_TOPIC, (CLIENT_ID + <span class="string">" 发布了遗嘱 "</span>).getBytes(), MQTT_QOS_0, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        mOpts.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);<span class="comment">//据说不设置这个会有EOFException</span></span><br><span class="line"></span><br><span class="line">        LogUtils.e(<span class="string">" initOption "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service onStartCommand</span></span><br><span class="line"><span class="comment">     * Handles the action passed via the Intent</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> START_REDELIVER_INTENT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line"></span><br><span class="line">        String action = intent.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LogToFileUtils.write(<span class="string">" Starting service with  and no action\n Probably from a crash"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">                <span class="keyword">case</span> ACTION_START:</span><br><span class="line">                    LogUtils.e(<span class="string">"Received ACTION_START"</span>);</span><br><span class="line"></span><br><span class="line">                    String str = ACache.get(<span class="keyword">this</span>).getAsString(<span class="string">"bean"</span>);</span><br><span class="line">                    mqttBean = <span class="keyword">new</span> Gson().fromJson(str, MqttBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    MQTT_BROKER = mqttBean.getServer();</span><br><span class="line">                    MQTT_PORT = mqttBean.getPort();</span><br><span class="line">                    MQTT_USE_NAME = mqttBean.getUserName();</span><br><span class="line">                    MQTT_PWD = mqttBean.getPwd();</span><br><span class="line">                    MQTT_TOPIC = mqttBean.getTopic();</span><br><span class="line"></span><br><span class="line">                    start();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ACTION_STOP:</span><br><span class="line">                    LogUtils.e(<span class="string">"Received ACTION_STOP"</span>);</span><br><span class="line">                    stop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ACTION_KEEPALIVE:</span><br><span class="line">                    LogUtils.w(<span class="string">"Received ACTION_KEEPALIVE"</span>);</span><br><span class="line">                    keepAlive();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ACTION_RECONNECT:</span><br><span class="line"></span><br><span class="line">                    LogUtils.e(<span class="string">"Received ACTION_RECONNECT"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (isNetworkAvailable()) &#123;</span><br><span class="line">                        reconnectIfNecessary();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        LogToFileUtils.write(<span class="string">"网络故障 无法重连 "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> START_REDELIVER_INTENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts connect to the Mqtt Broker</span></span><br><span class="line"><span class="comment">     * and listen for Connectivity changes</span></span><br><span class="line"><span class="comment">     * via ConnectivityManager.CONNECTVITIY_ACTION BroadcastReceiver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStarted) &#123;</span><br><span class="line">            LogUtils.e(<span class="string">"Attempt to start while already started"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasScheduledKeepAlives()) &#123;</span><br><span class="line"></span><br><span class="line">            LogToFileUtils.write(<span class="string">"start方法中  hasScheduledKeepAlives   执行  stopKeepAlives"</span>);</span><br><span class="line">            stopKeepAlives();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connect();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attempts to stop the Mqtt client</span></span><br><span class="line"><span class="comment">     * as well as halting all keep alive messages queued</span></span><br><span class="line"><span class="comment">     * in the alarm manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogToFileUtils.write(<span class="string">" MQTTService  stop()  "</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mStarted) &#123;</span><br><span class="line">            LogToFileUtils.write(<span class="string">"Attemtpign to stop connection that isn't running"</span>);</span><br><span class="line">            LogUtils.e(<span class="string">"Attemtpign to stop connection that isn't running"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mClient) &#123;</span><br><span class="line">            mConnHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isConnect() ) &#123;</span><br><span class="line">                            mClient.disconnect();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (MqttException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                        LogToFileUtils.write(<span class="string">"STOP 方法异常"</span> + CommonUtils.getStackTrace(ex));</span><br><span class="line">                    &#125;</span><br><span class="line">                    LogToFileUtils.write(<span class="string">" mqtt stop"</span>);</span><br><span class="line"></span><br><span class="line">                    mClient = <span class="keyword">null</span>;</span><br><span class="line">                    mStarted = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Connects to the broker with the appropriate datastore</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        initOption();</span><br><span class="line"></span><br><span class="line">        String url = String.format(Locale.US, MQTT_URL_FORMAT, MQTT_BROKER, MQTT_PORT);</span><br><span class="line">        mClient = <span class="keyword">new</span> MqttAndroidClient(<span class="keyword">this</span>, url, CLIENT_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LogUtils.e(<span class="string">"Connecting with URL: "</span> + url);</span><br><span class="line">        LogToFileUtils.write(<span class="keyword">null</span> == MQTT_TOPIC ? <span class="string">"null==MQTT_TOPIC"</span> : MQTT_TOPIC);</span><br><span class="line">        LogUtils.e(<span class="keyword">null</span> == mClient ? <span class="string">"null==mClient"</span> : <span class="string">"null!=mClient"</span>);</span><br><span class="line"></span><br><span class="line">        mConnHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                LogUtils.e(<span class="string">"mClient is notConnect ,execute  the method --&gt; mClient.connect()    "</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mClient.connect(mOpts, <span class="keyword">null</span>, <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken asyncActionToken)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                                //连接成功之后设置连接断开的缓冲配置</span></span><br><span class="line"><span class="comment">//                                DisconnectedBufferOptions disconnectedBufferOptions = new DisconnectedBufferOptions();</span></span><br><span class="line"><span class="comment">//                                //开启</span></span><br><span class="line"><span class="comment">//                                disconnectedBufferOptions.setBufferEnabled(true);</span></span><br><span class="line"><span class="comment">//                                //离线后最多缓存100条</span></span><br><span class="line"><span class="comment">//                                disconnectedBufferOptions.setBufferSize(100);</span></span><br><span class="line"><span class="comment">//                                //一直持续留存</span></span><br><span class="line"><span class="comment">//                                disconnectedBufferOptions.setPersistBuffer(false);</span></span><br><span class="line"><span class="comment">//                                //删除旧消息</span></span><br><span class="line"><span class="comment">//                                disconnectedBufferOptions.setDeleteOldestMessages(false);</span></span><br><span class="line"><span class="comment">//                                if (null != mClient) &#123;</span></span><br><span class="line"><span class="comment">//                                    mClient.setBufferOpts(disconnectedBufferOptions);</span></span><br><span class="line"><span class="comment">//                                &#125;</span></span><br><span class="line">                            subscribeToTopic();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken asyncActionToken, Throwable exception)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                            LogUtils.e(asyncActionToken.isComplete() + <span class="string">"  onFailure "</span> + exception.toString());</span><br><span class="line">                            LogToFileUtils.write(<span class="string">"\n\n onFailure   "</span> + asyncActionToken.isComplete() + <span class="string">"      "</span> + CommonUtils.getStackTrace(exception));</span><br><span class="line">                            <span class="keyword">if</span> (NetUtil.getInstance().isConnectIsNormal()) &#123;</span><br><span class="line">                                String s = NetUtil.getInstance().beginPing();</span><br><span class="line">                                LogToFileUtils.write(<span class="string">"\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"</span>);</span><br><span class="line">                                LogToFileUtils.write(<span class="string">"onFailure   but net is normal  ,ping is "</span> + s);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                LogToFileUtils.write(<span class="string">"\n onFailure  无网络"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    mClient.setCallback(MQTTService.<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">                    mStarted = <span class="keyword">true</span>; <span class="comment">// Service is now connected</span></span><br><span class="line"></span><br><span class="line">                    Toast.makeText(MQTTService.<span class="keyword">this</span>, <span class="string">"设备上线"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                    LogUtils.e(<span class="string">"Successfully connected and subscribed starting keep alives"</span>);</span><br><span class="line">                    LogToFileUtils.write(<span class="string">" ------  连接成功 开始心跳 Successfully connected and subscribed starting keep alives  ------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//                    EventBus.getDefault().post(new MQTTMessage("------  连接成功 开始心跳 Successfully connected and subscribed starting keep alives  -----"));</span></span><br><span class="line"></span><br><span class="line">                    startKeepAlives();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                    LogToFileUtils.write(<span class="string">"connect mConnHandler post方法中  catch  MqttException  "</span> + e.getMessage());</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribeToTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConnect())</span><br><span class="line">                mClient.subscribe(MQTT_TOPIC, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken asyncActionToken)</span> </span>&#123;</span><br><span class="line">                        LogToFileUtils.write(<span class="string">"订阅话题成功"</span>);</span><br><span class="line">                        LogUtils.e(<span class="string">"订阅话题成功"</span>);</span><br><span class="line"><span class="comment">//                    EventBus.getDefault().post(new MQTTMessage("订阅话题成功"));</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken asyncActionToken, Throwable exception)</span> </span>&#123;</span><br><span class="line">                        LogToFileUtils.write(<span class="string">"订阅话题失败"</span>);</span><br><span class="line">                        LogUtils.e(<span class="string">"订阅话题失败"</span>);</span><br><span class="line"><span class="comment">//                    EventBus.getDefault().post(new MQTTMessage("订阅话题失败"));</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException ex) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Exception whilst subscribing"</span>);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Schedules keep alives via a PendingIntent</span></span><br><span class="line"><span class="comment">     * in the Alarm Manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"ShortAlarm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startKeepAlives</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LogUtils.d(<span class="string">" startKeepAlives "</span>);</span><br><span class="line"></span><br><span class="line">        LogToFileUtils.write(<span class="string">" startKeepAlives "</span>);</span><br><span class="line"></span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">        i.setClass(<span class="keyword">this</span>, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_KEEPALIVE);</span><br><span class="line">        PendingIntent pi = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line">        mAlarmManager.setRepeating(AlarmManager.RTC_WAKEUP,</span><br><span class="line">                System.currentTimeMillis() + MQTT_KEEP_ALIVE, MQTT_KEEP_ALIVE, pi);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cancels the Pending Intent</span></span><br><span class="line"><span class="comment">     * in the alarm manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopKeepAlives</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogUtils.e(<span class="string">" stopKeepAlives "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//停止</span></span><br><span class="line">        actionStop(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        LogToFileUtils.write(<span class="string">"stopKeepAlives"</span>);</span><br><span class="line"></span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">        i.setClass(<span class="keyword">this</span>, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_KEEPALIVE);</span><br><span class="line">        PendingIntent pi = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line">        mAlarmManager.cancel(pi);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Publishes a KeepALive to the topic</span></span><br><span class="line"><span class="comment">     * in the broker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">keepAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LogUtils.d(<span class="string">"keepAlive"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isConnect()) &#123;</span><br><span class="line">            MachineBean machineBean = <span class="keyword">new</span> MachineBean(<span class="string">"net"</span>, CLIENT_ID, <span class="string">""</span> + MY_SIGNAL_STRENGTH, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            publish(gson.toJson(machineBean), <span class="string">"zhineng-"</span> + MQTT_TOPIC);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            actionReconnect(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//            LogToFileUtils.write("keepAlive  isConnected ==false , so execute  actionStart");</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Checkes the current connectivity</span></span><br><span class="line"><span class="comment">     * and reconnects if it is required.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reconnectIfNecessary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mStarted &amp;&amp; <span class="keyword">null</span> == mClient) &#123;</span><br><span class="line"></span><br><span class="line">            LogToFileUtils.write(<span class="string">"reconnectIfNecessary  connect"</span>);</span><br><span class="line"></span><br><span class="line">            connect();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogToFileUtils.write(mStarted ? <span class="string">"mStarted==true"</span> : <span class="string">"mStart==false"</span>);</span><br><span class="line">            LogToFileUtils.write(<span class="keyword">null</span> == mClient ? <span class="string">"mClient==null"</span> : <span class="string">"mClient!=null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query's the NetworkInfo via ConnectivityManager</span></span><br><span class="line"><span class="comment">     * to return the current connected state</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean true if we are connected false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNetworkAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NetworkInfo info = mConnectivityManager.getActiveNetworkInfo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info != <span class="keyword">null</span> &amp;&amp; info.isConnected();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Verifies the client State with our local connected state</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if its a match we are connected false if we aren't connected</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mClient != <span class="keyword">null</span> &amp;&amp; mStarted &amp;&amp; mClient.isConnected();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一下client是否非空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publishTopic</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String msg, String publishTopic)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == publishTopic) &#123;</span><br><span class="line">            publishTopic = <span class="string">"zhineng-"</span> + MQTT_TOPIC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MqttMessage mqttMessage = <span class="keyword">new</span> MqttMessage();</span><br><span class="line">        mqttMessage.setQos(MQTT_QOS_0);</span><br><span class="line">        mqttMessage.setPayload(msg.getBytes());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConnect()) &#123;</span><br><span class="line">                mClient.publish(publishTopic, mqttMessage, <span class="keyword">null</span>, <span class="keyword">new</span> IMqttActionListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(IMqttToken asyncActionToken)</span> </span>&#123;</span><br><span class="line">                        LogUtils.w(<span class="string">"发送成功"</span> + asyncActionToken.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IMqttToken asyncActionToken, Throwable exception)</span> </span>&#123;</span><br><span class="line">                        LogUtils.e(<span class="string">"发送失败 "</span> + CommonUtils.getStackTrace(exception));</span><br><span class="line">                        LogToFileUtils.write(CommonUtils.getStackTrace(exception));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogToFileUtils.write(<span class="keyword">null</span> == mClient ? <span class="string">"mClient是为空"</span> : <span class="string">"mClient不为空"</span>);</span><br><span class="line">                LogToFileUtils.write(isConnect() ? <span class="string">"mClient连接"</span> : <span class="string">"mClient未连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            LogToFileUtils.write(CommonUtils.getStackTrace(e));</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query's the AlarmManager to check if there is</span></span><br><span class="line"><span class="comment">     * a keep alive currently scheduled</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if there is currently one scheduled false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasScheduledKeepAlives</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">        i.setClass(<span class="keyword">this</span>, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        i.setAction(ACTION_KEEPALIVE);</span><br><span class="line">        PendingIntent pi = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">0</span>, i, PendingIntent.FLAG_NO_CREATE);</span><br><span class="line">        <span class="keyword">return</span> pi != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Connectivity Lost from broker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable arg0)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(MQTTService.<span class="keyword">this</span>, <span class="string">"设备离线"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">        LogUtils.e(<span class="string">"------ connectionLost ------"</span>);</span><br><span class="line"></span><br><span class="line">        stopKeepAlives();</span><br><span class="line"></span><br><span class="line">        mClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isNetworkAvailable()) &#123;</span><br><span class="line"></span><br><span class="line">            LogToFileUtils.write(<span class="string">"\n  ------ reconnectIfNecessary ------"</span>);</span><br><span class="line"></span><br><span class="line">            reconnectIfNecessary();</span><br><span class="line"></span><br><span class="line">            LogUtils.e(<span class="string">"------ reconnectIfNecessary ------"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogToFileUtils.write(<span class="string">"\n  ------ isNetworkAvailable false  ------"</span>);</span><br><span class="line">            LogUtils.e(<span class="string">"------ isNetworkAvailable false ------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Received Message from broker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str1 = <span class="keyword">new</span> String(message.getPayload());</span><br><span class="line">        String str2 = <span class="string">"topic:"</span> + topic + <span class="string">", qos:"</span> + message.getQos() + <span class="string">", retained:"</span> + message.isRetained();</span><br><span class="line">        LogUtils.e(<span class="string">"messageArrived:"</span> + str1);</span><br><span class="line"></span><br><span class="line">        LogToFileUtils.write(<span class="string">"--- messageArrived ---\n"</span> + str1 + <span class="string">"\n"</span> + str2 + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        EventBus.getDefault().post(<span class="keyword">new</span> MQTTMessage(str1));</span><br><span class="line">        LogUtils.d(str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LogUtils.i(<span class="string">"     发送成功    "</span> + token.isComplete() + <span class="string">" "</span> + token.getMessage().toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectComplete</span><span class="params">(<span class="keyword">boolean</span> reconnect, String serverURI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reconnect) &#123;</span><br><span class="line">            LogToFileUtils.write(<span class="string">"is Reconnected to : "</span> + serverURI);</span><br><span class="line">            LogUtils.e(<span class="string">"Reconnected to : "</span> + serverURI);</span><br><span class="line">            <span class="comment">// Because Clean Session is true, we need to re-subscribe</span></span><br><span class="line"><span class="comment">//            EventBus.getDefault().post(new MQTTMessage("is Reconnected to : " + serverURI));</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogToFileUtils.write(<span class="string">"not Reconnected to  "</span>);</span><br><span class="line">            LogUtils.e(<span class="string">"not Reconnected to : "</span> + serverURI);</span><br><span class="line"><span class="comment">//            EventBus.getDefault().post(new MQTTMessage("not Reconnected to : " + serverURI));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLowMemory();</span><br><span class="line">        LogToFileUtils.write(<span class="string">"\n 内存不足"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        mqttBean = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>　- 使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//start</span></span><br><span class="line">Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">         i.setClass(<span class="keyword">this</span>, MQTTService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">         i.setAction(ACTION_START); </span><br><span class="line">         startService(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line">MQTTService.getInstance().publish(ｘｘｘｘ);</span><br></pre></td></tr></table></figure><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ul><li><a href="https://github.com/JesseFarebro/android-mqtt-service">android-mqtt-service参考案例</a></li></ul><h4 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h4><ul><li><a href="https://blog.csdn.net/qq_17250009/article/details/52774472#commentsedit">Android APP必备高级功能，消息推送之MQTT</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setting添加item实现功能效果</title>
      <link href="/posts/58691/"/>
      <url>/posts/58691/</url>
      
        <content type="html"><![CDATA[<h4 id="Demo传送"><a href="#Demo传送" class="headerlink" title="Demo传送"></a><a href="https://github.com/wl960127/ChangeAnim">Demo传送</a></h4><h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><ul><li><p>在package/app/Setting/ 下新建一个包</p></li><li><p>将构建好的 <strong>实现类</strong>  复制在包内</p><ul><li><p>在比如 …Acticity.java实现类中，记得加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.android.settings.R;</span><br><span class="line"><span class="comment">//这个应该不难理解</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>类中使用到的资源需要复制到Setting工程对应的目或者文件中</p><ul><li>布局文件</li><li>字符串文件</li></ul></li><li><p>清单文件注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开机动画修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".depth.AnimActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:excludeFromRecents</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:label</span>=<span class="string">"@string/change_boot_animation_settings"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 这个是自己定义的Action  和下面setting_header.xml 中 intent的统一就行了 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.DEPTH.CHANGE_BOOT_ACTION"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在setting_header.xml 中添加对应文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/chang_boot_animation_settings"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_settings_applications"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/change_boot_animation_settings"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这个是自己定义的Action  和清单文件的一样就行了 这样就会调用到对应的窗口 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">intent</span> <span class="attr">android:action</span>=<span class="string">"android.intent.action.DEPTH.CHANGE_BOOT_ACTION"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul><li>模块编译</li><li>在一个独立的Android工程中开发(与Setting有一样的权限)，然后再将开发好的程序复制到Setting工程中进行联调。(然鹅，我还没试过。没想都还有这种操作)</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>Android版本 4.4.4_r1_KTU84P</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Audio 源码学习</title>
      <link href="/posts/51140/"/>
      <url>/posts/51140/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><code>AudioRcorder</code>  和  <code>AudioTrack</code> :这两个类属于Audio对外提供的API类，通过它们可以完成Android平台上音频数据的采集和输出任务</li><li><code>AudioFlinger</code>: Audio的工作引擎，管理系统中的输入输出音频流，承担数据的混音，以及读写Audio硬件等工作以实现数据的输入输出功能</li><li><code>AudioPolicyService</code>： Audio系统的策略性控制中心，具体掌控系统中声音设备的选择与切换、音量控制等功能</li></ul><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul><li>framework/base/media/java/com/android/media/AudioTrack.java</li><li>framework/base/core/jni/android_media_AudioTrack.cpp</li></ul><h4 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h4><ul><li><p>根据音频数据的特性来确定所需要分配的缓冲区的最小size</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bufferSizeInBytes = AudioTrack.getMinBufferSize(<span class="keyword">int</span> sampleRateInHz, <span class="keyword">int</span> channelConfig, <span class="keyword">int</span> audioFormat);</span><br></pre></td></tr></table></figure></li><li><p>创建AudioTrack</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AudioTrack trackplayer = <span class="keyword">new</span> AudioTrack(<span class="keyword">int</span> streamType, <span class="keyword">int</span> sampleRateInHz, <span class="keyword">int</span> channelConfig, <span class="keyword">int</span> audioFormat,<span class="keyword">int</span> bufferSizeInBytes, <span class="keyword">int</span> mode, <span class="keyword">int</span> sessionId);</span><br></pre></td></tr></table></figure></li><li><p>开始播放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trackplayer.play();</span><br></pre></td></tr></table></figure></li><li><p>调用write写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trackplayer.write(<span class="keyword">byte</span>[] audioData, <span class="keyword">int</span> offsetInBytes, <span class="keyword">int</span> sizeInBytes);</span><br></pre></td></tr></table></figure></li><li><p>停止播放和释放数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trackplayer.stop();</span><br><span class="line">trackplayer.release();</span><br></pre></td></tr></table></figure></li></ul><h4 id="AudioTrack"><a href="#AudioTrack" class="headerlink" title="AudioTrack"></a>AudioTrack</h4><h5 id="数据加载模式"><a href="#数据加载模式" class="headerlink" title="数据加载模式"></a>数据加载模式</h5><ul><li><p>MODE_STREAM</p><p>write一次次的将音频数据写到AudioTrack 中，但是每次都要从提供的Buffer中拷贝到AudioTrack 内部的Buffer中，但是一定程度会延时。但是相对常见，也比较复杂。</p></li><li><p>MODE_STATIC</p><p>paly之前只需要把所有数据一次write传递到AudioTrack 的内部缓冲区中，后续就不再传递数据了。适用于铃声这种内存占用小的，延时要求较高的文件。缺点是：一次write数据不能太多，否则无法分配足够的内存来存储全部数据。</p></li></ul><h5 id="音频流类型"><a href="#音频流类型" class="headerlink" title="音频流类型"></a>音频流类型</h5><ul><li>STREAM_ALRM  警告</li><li>STERAM_MUSIC  音乐</li><li>STREAM_RING   铃声</li><li>STREAM_SYSTEM  系统声音</li><li>STREAM_VOCIE_CALL  通话声</li></ul><h4 id="AudioTrack-的-JNI-实现"><a href="#AudioTrack-的-JNI-实现" class="headerlink" title="AudioTrack 的 JNI 实现"></a>AudioTrack 的 JNI 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AudioTrack.java</span></span><br><span class="line">AudioTrack(<span class="keyword">int</span> streamType, <span class="keyword">int</span> sampleRateInHz, <span class="keyword">int</span> channelConfig, <span class="keyword">int</span> audioFormat,</span><br><span class="line">            <span class="keyword">int</span> bufferSizeInBytes, <span class="keyword">int</span> mode, <span class="keyword">int</span> sessionId)&#123;</span><br><span class="line">     ...</span><br><span class="line">          <span class="keyword">int</span> initResult = native_setup(<span class="keyword">new</span> WeakReference&lt;AudioTrack&gt;(<span class="keyword">this</span>),</span><br><span class="line">                mStreamType,  <span class="comment">// AudioManager.STREAM_NUSIC</span></span><br><span class="line">                mSampleRate, <span class="comment">//8000</span></span><br><span class="line">                mChannels,  <span class="comment">//2</span></span><br><span class="line">                mAudioFormat, <span class="comment">//AudioFormat.ENCODING_PCM_16BIT</span></span><br><span class="line">                mNativeBufferSizeInBytes, <span class="comment">// bufferSizeInBytes</span></span><br><span class="line">                mDataLoadMode, <span class="comment">// DataLoadMode 是 MDOE_STREAM</span></span><br><span class="line">                session);</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//android_media_AudioTrack.cpp</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">android_media_AudioTrack_native_setup(...)&#123;</span><br><span class="line">...</span><br><span class="line">   sp&lt;AudioTrack&gt; lpTrack = <span class="keyword">new</span> AudioTrack();</span><br><span class="line">   ...</span><br><span class="line"><span class="comment">//根据 数据加载模式 初始化对象</span></span><br><span class="line">  <span class="keyword">switch</span> (memoryMode) &#123;</span><br><span class="line">  <span class="keyword">case</span> MODE_STREAM:</span><br><span class="line">        <span class="comment">// STREAM 模式</span></span><br><span class="line">        lpTrack-&gt;<span class="built_in">set</span>(</span><br><span class="line">            atStreamType,<span class="comment">// stream type</span></span><br><span class="line">            sampleRateInHertz,</span><br><span class="line">            format,<span class="comment">// word length, PCM</span></span><br><span class="line">            nativeChannelMask,</span><br><span class="line">            frameCount,</span><br><span class="line">            AUDIO_OUTPUT_FLAG_NONE,</span><br><span class="line">            audioCallback, &amp;(lpJniStorage-&gt;mCallbackData),<span class="comment">//callback, callback data (user)</span></span><br><span class="line">            <span class="number">0</span>,<span class="comment">// notificationFrames == 0 since not using EVENT_MORE_DATA to feed the AudioTrack</span></span><br><span class="line">            <span class="number">0</span>,<span class="comment">// shared mem</span></span><br><span class="line">            <span class="literal">true</span>,<span class="comment">// thread can call Java</span></span><br><span class="line">            sessionId);<span class="comment">// audio session ID</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> MODE_STATIC:</span><br><span class="line">        <span class="comment">// AudioTrack is using shared memory</span></span><br><span class="line">        <span class="comment">//  静态模式 需要先创建共享内存</span></span><br><span class="line">        <span class="keyword">if</span> (!lpJniStorage-&gt;allocSharedMem(buffSizeInBytes)) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Error creating AudioTrack in static mode: error creating mem heap base"</span>);</span><br><span class="line">            <span class="keyword">goto</span> native_init_failure;</span><br><span class="line">        &#125;</span><br><span class="line">        lpTrack-&gt;<span class="built_in">set</span>(</span><br><span class="line">            atStreamType,<span class="comment">// stream type</span></span><br><span class="line">            sampleRateInHertz,</span><br><span class="line">            format,<span class="comment">// word length, PCM</span></span><br><span class="line">            nativeChannelMask,</span><br><span class="line">            frameCount,</span><br><span class="line">            AUDIO_OUTPUT_FLAG_NONE,</span><br><span class="line">            audioCallback, &amp;(lpJniStorage-&gt;mCallbackData),<span class="comment">//callback, callback data (user));</span></span><br><span class="line">            <span class="number">0</span>,<span class="comment">// notificationFrames == 0 since not using EVENT_MORE_DATA to feed the AudioTrack</span></span><br><span class="line">            lpJniStorage-&gt;mMemBase,<span class="comment">// shared mem</span></span><br><span class="line">            <span class="literal">true</span>,<span class="comment">// thread can call Java</span></span><br><span class="line">            sessionId);<span class="comment">// audio session ID</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>以后再补充，毕竟没有暂时还没有接触音视频相关</p></li><li><p>基于Android版本 4.4.4_r1_KTU84P</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统Setting的switch控件功能实现</title>
      <link href="/posts/52533/"/>
      <url>/posts/52533/</url>
      
        <content type="html"><![CDATA[<h5 id="WIFI举例"><a href="#WIFI举例" class="headerlink" title="WIFI举例"></a>WIFI举例</h5><ul><li><p>在package/app/Setting/res/xml/setting_header.xml 中可见，并不是在layout布局中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Wifi --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/wifi_settings"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fragment</span>=<span class="string">"com.android.settings.wifi.WifiSettings"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/wifi_settings_title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_settings_wireless"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Setting.java中搜索该 id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHeaderType</span><span class="params">(Header header)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (header.fragment == <span class="keyword">null</span> &amp;&amp; header.intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> HEADER_TYPE_CATEGORY;</span><br><span class="line">        <span class="comment">//获取到 id</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (header.id == R.id.wifi_settings || header.id == R.id.bluetooth_settings) &#123;</span><br><span class="line">        <span class="comment">//返回了 SWITCH类型</span></span><br><span class="line">        <span class="keyword">return</span> HEADER_TYPE_SWITCH;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (header.id == R.id.security_settings) &#123;</span><br><span class="line">        <span class="keyword">return</span> HEADER_TYPE_BUTTON;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HEADER_TYPE_NORMAL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后发现，这就是一个HeaderAdapter ,继承 ArrayAdapter<Header>。 其实这就是一个根据 TYPE实现布局文件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        HeaderViewHolder holder;</span><br><span class="line">        Header header = getItem(position);</span><br><span class="line">        <span class="keyword">int</span> headerType = getHeaderType(header);</span><br><span class="line">        View view = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder = <span class="keyword">new</span> HeaderViewHolder();</span><br><span class="line">            <span class="keyword">switch</span> (headerType) &#123;</span><br><span class="line">                <span class="keyword">case</span> HEADER_TYPE_CATEGORY:</span><br><span class="line">                    view = <span class="keyword">new</span> TextView(getContext(), <span class="keyword">null</span>,</span><br><span class="line">                            android.R.attr.listSeparatorTextViewStyle);</span><br><span class="line">                    holder.title = (TextView) view;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">                <span class="keyword">case</span> HEADER_TYPE_SWITCH:  <span class="comment">//创建 Switch 控件的View对象 ，而下面的swicth方法就是监听控件状态变化的监听器</span></span><br><span class="line">                    view = mInflater.inflate(R.layout.preference_header_switch_item, parent,</span><br><span class="line">                            <span class="keyword">false</span>);</span><br><span class="line">                    holder.icon = (ImageView) view.findViewById(R.id.icon);</span><br><span class="line">                    holder.title = (TextView)</span><br><span class="line">                            view.findViewById(com.android.internal.R.id.title);</span><br><span class="line">                    holder.summary = (TextView)</span><br><span class="line">                            view.findViewById(com.android.internal.R.id.summary);</span><br><span class="line">                    holder.switch_ = (Switch) view.findViewById(R.id.switchWidget);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li><li><p>swicth 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All view fields must be updated every time, because the view may be recycled</span></span><br><span class="line">  <span class="keyword">switch</span> (headerType) &#123;</span><br><span class="line">      <span class="keyword">case</span> HEADER_TYPE_CATEGORY:</span><br><span class="line">          holder.title.setText(header.getTitle(getContext().getResources()));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">case</span> HEADER_TYPE_SWITCH:</span><br><span class="line">          <span class="comment">// Would need a different treatment if the main menu had more switches</span></span><br><span class="line">          <span class="comment">// 监听了 Swith 控件的状态</span></span><br><span class="line">          <span class="keyword">if</span> (header.id == R.id.wifi_settings) &#123;</span><br><span class="line">              mWifiEnabler.setSwitch(holder.switch_);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              mBluetoothEnabler.setSwitch(holder.switch_);</span><br><span class="line">          &#125;</span><br><span class="line">          updateCommonHeaderView(header, holder);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          ......</span><br></pre></td></tr></table></figure></li><li><p>WifiEnabler</p><ul><li><p>上面的mWifiEnabler或者mBluetoothEnabler实际上都是对应的xxxEnabler.java。点击进去看下实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WifiEnabler</span> <span class="keyword">implements</span> <span class="title">CompoundButton</span>.<span class="title">OnCheckedChangeListener</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个实现的接口就是 Switch 控件状态变化监听器的接口</li></ul></li></ul></li></ul><h5 id="实现小结"><a href="#实现小结" class="headerlink" title="实现小结"></a>实现小结</h5><ul><li>package/app/Setting/res/xml/setting_header.xml 中添加 header</li><li>在setting.java 中的getHeaderType 方法中，添加控件id</li><li>编写Enabler 类，实现对应接口，添加 setSwitch方法。这一整步不是必须实现的</li><li>settingng.java类中，在内嵌类 HeaderAdapter类中，   switch (headerType)  方法，根据对应的类型，添加xxEnabler.setSwicth(holder.switch_)判断</li><li>设置Switch控件的状态变化监听器，进行一些初始化操作</li></ul><h5 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h5><ul><li>基于Android版本 4.4.4_r1_KTU84P</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SystemServer</title>
      <link href="/posts/53902/"/>
      <url>/posts/53902/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>SystemServer的进程名实际上叫做“system_server”,通常简称为SS</li><li>Java层崩溃，Linux系统进程init就会启动一个SystemServer和Zygote，以重新建立Android的Java层</li><li>SS是由Zygote通过Zygote.forkSystemServer函数fork诞生出来的 </li><li>与Zygote生死与共.SS诞生后,便和生父Zygote分道扬镳,它有了自己的历史使命 </li></ul><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="时序图"></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><h5 id="startSystemServer"><a href="#startSystemServer" class="headerlink" title="startSystemServer"></a>startSystemServer</h5><ul><li>ZygoteInit.java </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException </span>&#123;</span><br><span class="line">......</span><br><span class="line">     <span class="comment">/* Hardcoded command line to start the system server */</span></span><br><span class="line">     String args[] = &#123;</span><br><span class="line">         <span class="string">"--setuid=1000"</span>,</span><br><span class="line">         <span class="string">"--setgid=1000"</span>,</span><br><span class="line">         <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007"</span>,</span><br><span class="line">         <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</span><br><span class="line">         <span class="string">"--runtime-init"</span>,</span><br><span class="line">         <span class="string">"--nice-name=system_server"</span>,</span><br><span class="line">         <span class="string">"com.android.server.SystemServer"</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">     ZygoteConnection.Arguments parsedArgs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</span><br><span class="line">         ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</span><br><span class="line">         ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//　fork  SystemServer进程</span></span><br><span class="line">         pid = Zygote.forkSystemServer(</span><br><span class="line">                 parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                 parsedArgs.gids,</span><br><span class="line">                 parsedArgs.debugFlags,</span><br><span class="line">                 <span class="keyword">null</span>,</span><br><span class="line">                 parsedArgs.permittedCapabilities,</span><br><span class="line">                 parsedArgs.effectiveCapabilities);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* For child process */</span></span><br><span class="line">     <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">             waitForSecondaryZygote(socketName);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         handleSystemServerProcess(parsedArgs);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleSystemServerProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         ZygoteConnection.Arguments parsedArgs)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line"></span><br><span class="line">     closeServerSocket();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// set umask to 0077 so new files and directories will default to owner-only permissions.</span></span><br><span class="line">     Os.umask(S_IRWXG | S_IRWXO);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (parsedArgs.niceName != <span class="keyword">null</span>) &#123;</span><br><span class="line">         Process.setArgV0(parsedArgs.niceName);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">final</span> String systemServerClasspath = Os.getenv(<span class="string">"SYSTEMSERVERCLASSPATH"</span>);</span><br><span class="line">     <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</span><br><span class="line">         performSystemServerDexOpt(systemServerClasspath);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</span><br><span class="line">         String[] args = parsedArgs.remainingArgs;</span><br><span class="line">         <span class="comment">// If we have a non-null system server class path, we'll have to duplicate the</span></span><br><span class="line">         <span class="comment">// existing arguments and append the classpath to it. ART will handle the classpath</span></span><br><span class="line">         <span class="comment">// correctly when we exec a new process.</span></span><br><span class="line">         <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</span><br><span class="line">             String[] amendedArgs = <span class="keyword">new</span> String[args.length + <span class="number">2</span>];</span><br><span class="line">             amendedArgs[<span class="number">0</span>] = <span class="string">"-cp"</span>;</span><br><span class="line">             amendedArgs[<span class="number">1</span>] = systemServerClasspath;</span><br><span class="line">             System.arraycopy(parsedArgs.remainingArgs, <span class="number">0</span>, amendedArgs, <span class="number">2</span>, parsedArgs.remainingArgs.length);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         WrapperInit.execApplication(parsedArgs.invokeWith,</span><br><span class="line">                 parsedArgs.niceName, parsedArgs.targetSdkVersion,</span><br><span class="line">                 <span class="keyword">null</span>, args);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         ClassLoader cl = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</span><br><span class="line">             cl = <span class="keyword">new</span> PathClassLoader(systemServerClasspath, ClassLoader.getSystemClassLoader());</span><br><span class="line">             Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">         &#125;</span><br><span class="line">      </span><br><span class="line">          <span class="comment">//Pass the remaining arguments to SystemServer.             </span></span><br><span class="line">         RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* should never reach here */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>com_android_internal_os_Zygote.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> jint <span class="title">com_android_internal_os_Zygote_nativeForkSystemServer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        JNIEnv* env, jclass, <span class="keyword">uid_t</span> uid, <span class="keyword">gid_t</span> gid, jintArray gids,</span></span></span><br><span class="line"><span class="function"><span class="params">        jint debug_flags, jobjectArray rlimits, jlong permittedCapabilities,</span></span></span><br><span class="line"><span class="function"><span class="params">        jlong effectiveCapabilities)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据参数 fork　一个子进程</span></span><br><span class="line">  <span class="keyword">pid_t</span> pid = ForkAndSpecializeCommon(env, uid, gid, gids,</span><br><span class="line">                                      debug_flags, rlimits,</span><br><span class="line">                                      permittedCapabilities, effectiveCapabilities,</span><br><span class="line">                                      MOUNT_EXTERNAL_NONE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">true</span>, <span class="literal">NULL</span>,</span><br><span class="line">                                      <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// The zygote process checks whether the child process has died or not.</span></span><br><span class="line">      ALOGI(<span class="string">"System server process %d has been created"</span>, pid);</span><br><span class="line">      gSystemServerPid = pid;</span><br><span class="line">      <span class="comment">// There is a slight window that the system server process has crashed</span></span><br><span class="line">      <span class="comment">// but it went unnoticed because we haven't published its pid yet. So</span></span><br><span class="line">      <span class="comment">// we recheck here just to make sure that all is well.</span></span><br><span class="line">      <span class="keyword">int</span> status;</span><br><span class="line">      <span class="keyword">if</span> (waitpid(pid, &amp;status, WNOHANG) == pid) &#123;</span><br><span class="line">          ALOGE(<span class="string">"System server process %d has died. Restarting Zygote!"</span>, pid);</span><br><span class="line">          RuntimeAbort(env);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">pid_t</span> <span class="title">ForkAndSpecializeCommon</span><span class="params">(JNIEnv* env, <span class="keyword">uid_t</span> uid, <span class="keyword">gid_t</span> gid, jintArray javaGids,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     jint debug_flags, jobjectArray javaRlimits,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     jlong permittedCapabilities, jlong effectiveCapabilities,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     jint mount_external,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     jstring java_se_info, jstring java_se_name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">bool</span> is_system_server, jintArray fdsToClose,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     jstring instructionSet, jstring dataDir)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint64_t</span> start = MsTime();</span><br><span class="line">  SetSigChldHandler(); <span class="comment">//　设置信号处理</span></span><br><span class="line">  ckTime(start, <span class="string">"ForkAndSpecializeCommon:SetSigChldHandler"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">pid_t</span> pid = fork();<span class="comment">// fork子进程</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;　<span class="comment">//　根据传参对子进程做处理，比如进程名，各种id</span></span><br><span class="line">      ......</span><br><span class="line">      ｝</span><br><span class="line">          </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetSigChldHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;sa, <span class="number">0</span>, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">  sa.sa_handler = SigChldHandler;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> err = sigaction(SIGCHLD, &amp;sa, <span class="literal">NULL</span>);<span class="comment">//设置信号处理函数，该信号是子进程的死亡信号</span></span><br><span class="line">  <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ALOGW(<span class="string">"Error setting SIGCHLD handler: %d"</span>, errno);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// This signal handler is for zygote mode, since the zygote must reap its children</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SigChldHandler</span><span class="params">(<span class="keyword">int</span> <span class="comment">/*signal_number*/</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> pid;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, &amp;status, WNOHANG)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// Log process-death status that we care about.  In general it is</span></span><br><span class="line">     <span class="comment">// not safe to call LOG(...) from a signal handler because of</span></span><br><span class="line">     <span class="comment">// possible reentrancy.  However, we know a priori that the</span></span><br><span class="line">     <span class="comment">// current implementation of LOG() is safe to call from a SIGCHLD</span></span><br><span class="line">     <span class="comment">// handler in the zygote process.  If the LOG() implementation</span></span><br><span class="line">     <span class="comment">// changes its locking strategy or its use of syscalls within the</span></span><br><span class="line">     <span class="comment">// lazy-init critical section, its use here may become unsafe.</span></span><br><span class="line">    <span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (WEXITSTATUS(status)) &#123;</span><br><span class="line">        ALOGI(<span class="string">"Process %d exited cleanly (%d)"</span>, pid, WEXITSTATUS(status));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(status)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (WTERMSIG(status) != SIGKILL) &#123;</span><br><span class="line">        ALOGI(<span class="string">"Process %d exited due to signal (%d)"</span>, pid, WTERMSIG(status));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (WCOREDUMP(status)) &#123;</span><br><span class="line">        ALOGI(<span class="string">"Process %d dumped core."</span>, pid);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the just-crashed process is the system_server, bring down zygote</span></span><br><span class="line">    <span class="comment">// so that it is restarted by init and system server will be restarted</span></span><br><span class="line">    <span class="comment">// from there.</span></span><br><span class="line">    <span class="keyword">if</span> (pid == gSystemServerPid) &#123;　　 <span class="comment">// 死去的子进程是 ss　，那么Zygote把自己也干掉，生死与共</span></span><br><span class="line">      ALOGE(<span class="string">"Exit zygote because system server (%d) has terminated"</span>);</span><br><span class="line">      kill(getpid(), SIGKILL);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Note that we shouldn't consider ECHILD an error because</span></span><br><span class="line">  <span class="comment">// the secondary zygote might have no children left to wait for.</span></span><br><span class="line">  <span class="keyword">if</span> (pid &lt; <span class="number">0</span> &amp;&amp; errno != ECHILD) &#123;</span><br><span class="line">    ALOGW(<span class="string">"Zygote SIGCHLD error in waitpid: %s"</span>, strerror(errno));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="handleSystemServerProcess"><a href="#handleSystemServerProcess" class="headerlink" title="handleSystemServerProcess"></a>handleSystemServerProcess</h5><ul><li>SS 调用 <strong>handleSystemServerProcess</strong> 来承担自己的责任</li><li>SS 调用 <strong>zygoteInitNative</strong>后，在 <strong>onZygote</strong>中，执行了   <strong>proc-&gt;startThreadPool();</strong> ，这一句会启动一个线程，用于Binder线。即，将与Binder通信系统建立联系，这样就能够使用Binder</li><li><strong>invokeStaticMain</strong> 会抛出一个异常，会在<strong>ZygoteInit的main</strong>方法中被截获</li><li><strong>invokeStaticMain</strong>  调用SystemServer的main函数</li><li>而最后在<strong>caller.run()</strong> 方法中，会执行     <strong>mMethod.invoke(null, new Object[] { mArgs });</strong>  </li></ul><h4 id="真面目"><a href="#真面目" class="headerlink" title="真面目"></a>真面目</h4><ul><li><p>ZygoteInit.java 分裂产生的SS,其实就是为了调用ZygoteInit.java的 <strong>mMethod.invoke(null, new Object[] { mArgs })</strong>这个方法，也就是调用com.android.server.SystemServer的<code>main</code>函数</p></li><li><p>SystemServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * In case the runtime switched since last boot (such as when</span></span><br><span class="line"><span class="comment">        * the old runtime was removed in an OTA), set the system</span></span><br><span class="line"><span class="comment">        * property so that it is in sync. We can't do this in</span></span><br><span class="line"><span class="comment">        * libnativehelper's JniInvocation::Init code where we already</span></span><br><span class="line"><span class="comment">        * had to fallback to a different runtime because it is</span></span><br><span class="line"><span class="comment">        * running as root and we need to be the system user to set</span></span><br><span class="line"><span class="comment">        * the property. http://b/11463182</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       SystemProperties.set(<span class="string">"persist.sys.dalvik.vm.lib"</span>,</span><br><span class="line">                            VMRuntime.getRuntime().vmLibrary());</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">if</span> (System.currentTimeMillis() &lt; EARLIEST_SUPPORTED_TIME) &#123;</span><br><span class="line">           <span class="comment">// If a device's clock is before 1970 (before 0), a lot of</span></span><br><span class="line">           <span class="comment">// APIs crash dealing with negative numbers, notably</span></span><br><span class="line">           <span class="comment">// java.io.File#setLastModified, so instead we fake it and</span></span><br><span class="line">           <span class="comment">// hope that time from cell towers or NTP fixes it</span></span><br><span class="line">           <span class="comment">// shortly.</span></span><br><span class="line">           Slog.w(TAG, <span class="string">"System clock is before 1970; setting to 1970."</span>);</span><br><span class="line">           SystemClock.setCurrentTimeMillis(EARLIEST_SUPPORTED_TIME);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">if</span> (SamplingProfilerIntegration.isEnabled()) &#123;</span><br><span class="line">           SamplingProfilerIntegration.start();</span><br><span class="line">           timer = <span class="keyword">new</span> Timer();</span><br><span class="line">           timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   SamplingProfilerIntegration.writeSnapshot(<span class="string">"system_server"</span>, <span class="keyword">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, SNAPSHOT_INTERVAL, SNAPSHOT_INTERVAL);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// Mmmmmm... more memory!</span></span><br><span class="line">       dalvik.system.VMRuntime.getRuntime().clearGrowthLimit();</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// The system server has to run all of the time, so it needs to be</span></span><br><span class="line">       <span class="comment">// as efficient as possible with its memory usage.</span></span><br><span class="line">       VMRuntime.getRuntime().setTargetHeapUtilization(<span class="number">0.8f</span>);</span><br><span class="line">  </span><br><span class="line">       Environment.setUserRequired(<span class="keyword">true</span>);</span><br><span class="line">  </span><br><span class="line">       System.loadLibrary(<span class="string">"android_servers"</span>);  <span class="comment">//加载库</span></span><br><span class="line">       <span class="comment">// Initialize native services.</span></span><br><span class="line">       nativeInit();  <span class="comment">//在 /base/services/jni/com_android_server_SystemServer.cpp</span></span><br><span class="line">  </span><br><span class="line">       <span class="comment">// This used to be its own separate thread, but now it is</span></span><br><span class="line">       <span class="comment">// just the loop we run on the main thread.</span></span><br><span class="line">       ServerThread thr = <span class="keyword">new</span> ServerThread();</span><br><span class="line">       thr.initAndLoop();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>android_server_SystemServer_nativeInit.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  frameworks/base/services/jni/com_android_server_SystemServer.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_server_SystemServer_nativeInit</span><span class="params">(JNIEnv* env, jobject clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> propBuf[PROPERTY_VALUE_MAX];</span><br><span class="line">    property_get(<span class="string">"system_init.startsensorservice"</span>, propBuf, <span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">"1"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Start the sensor service</span></span><br><span class="line">        SensorService::instantiate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="zygote-分裂"><a href="#zygote-分裂" class="headerlink" title="zygote 分裂"></a>zygote 分裂</h4><ul><li>zygote 分裂出 system_server 之后，通过 runSelectLoopMode 等待并处理来自客户的消息</li></ul><h5 id="ActivityManagerService-发送请求"><a href="#ActivityManagerService-发送请求" class="headerlink" title="ActivityManagerService 发送请求"></a>ActivityManagerService 发送请求</h5><p><img src="ActivityManagerService.png" alt="ActivityManagerService"></p><ul><li><p>ActivityManagerService.java   /framewroks/base/services/java/com.android.services/am/ActivityManangerService.java</p></li><li><p>Process.java    /frameworks/base/core/java/android/os/Prcoess.java</p></li><li><p>zygoteSendArgsAndGetResult</p><ul><li>openZygoteSocketIfNeeded</li><li>把请求的参数发到 Zygote</li></ul></li><li><p>openZygoteSocketIfNeeded</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        sZygoteSocket = <span class="keyword">new</span> LocalSocket();</span><br><span class="line">        <span class="comment">// 链接 Zygote</span></span><br><span class="line">        sZygoteSocket.connect(<span class="keyword">new</span> LocalSocketAddress(ZYGOTE_SOCKET, </span><br><span class="line">                LocalSocketAddress.Namespace.RESERVED));</span><br><span class="line">        sZygoteInputStream</span><br><span class="line">                = <span class="keyword">new</span> DataInputStream(sZygoteSocket.getInputStream());</span><br><span class="line">        sZygoteWriter =</span><br><span class="line">            <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                            sZygoteSocket.getOutputStream()),</span><br><span class="line">                    <span class="number">256</span>);</span><br><span class="line">        Log.i(<span class="string">"Zygote"</span>, <span class="string">"Process: zygote socket opened"</span>);</span><br><span class="line">        sPreviousZygoteOpenFailed = <span class="keyword">false</span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ActicityManagerService 终于向 zygote 发送请求了。</p><ul><li>请求的参数中有一个字符串，它的值是 “android.app.ActicityThread”</li></ul></li></ul><h5 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h5><ul><li>请求之后，会回到 ZygoteInit 之中</li></ul><p><img src="ActivityManagerService-1.png" alt=""></p><ul><li>ZygoteConnection.java   </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/com/android/internal/os/ZygoteConnection.java </span></span><br><span class="line"><span class="keyword">if</span> (parsedArgs.runtimeInit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</span><br><span class="line">                WrapperInit.execApplication(parsedArgs.invokeWith,</span><br><span class="line">                        parsedArgs.niceName, parsedArgs.targetSdkVersion,</span><br><span class="line">                        pipeFd, parsedArgs.remainingArgs);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//此时，会调用这里</span></span><br><span class="line">                RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,</span><br><span class="line">                        parsedArgs.remainingArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">......</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ZygoteInit.invokeStaticMain(cloader, className, mainArgs);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">                    logAndPrintError(newStderr, <span class="string">"Error starting."</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>而     RuntimeInit.zygoteInit 方法中，nativeZygoteInit这个jni函数，最终实现的是 proc-&gt;startThreadPool()   即：建立了Binder服务。</li></ul><h4 id="启动PMS"><a href="#启动PMS" class="headerlink" title="启动PMS"></a>启动PMS</h4><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>本博客基于　<code>基于Android版本  5.1_LMY47D</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zygote 学习</title>
      <link href="/posts/44872/"/>
      <url>/posts/44872/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>本身是一个 Native 的应用过程，与驱动，内核无关</li><li>由init进程根据 init.rc 文件中的 init.rc 配置项创建,由linux的祖先init启动</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>启动SystemServer</li><li>孵化应用进程</li></ul><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="Zogote.png" alt="zygote"></p><h4 id="zygote-分析"><a href="#zygote-分析" class="headerlink" title="zygote 分析"></a>zygote 分析</h4><h5 id="init-rc"><a href="#init-rc" class="headerlink" title="init.rc"></a>init.rc</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">    class main</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>由上可知： init进程会创建一个<code>Zygote</code>的进程，进程要执行的程序是<code>system/bin/app_process</code>,需要传递给 <code>app_process</code> 的参数。<code>app_process</code>其对应的源代码位于 <code>frameworks/base/cmds/app_process/app_main.cpp</code>，</li></ul><h5 id="app-main-cpp"><a href="#app-main-cpp" class="headerlink" title="app_main.cpp"></a>app_main.cpp</h5><ul><li><p>zygote 最初的名字叫做 app_process ，通过直接调用<code>pctrl</code>改成了 <code>Zygote</code></p></li><li><p>而  app_process 所对应的源文件是 App_main.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppRuntime</span> :</span> <span class="keyword">public</span> AndroidRuntime</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 重载了 onStarted  onExit  onZygoteInit  </span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    构造 AppRuntime 对象  ；</span></span><br><span class="line"><span class="comment">    将 进程名 改为 zygote</span></span><br><span class="line"><span class="comment">    调用 AppRuntime 对象的 start 方法 ，把工作 转给java 层的 ZygoteInit 类处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="comment">// runtime 实际上就是 由 AndroidRuntime 派生出来的 </span></span><br><span class="line">    AppRuntime runtime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Everything up to '--' or first non '-' arg goes to the vm</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = runtime.addVmArguments(argc, argv);</span><br><span class="line">    <span class="comment">// Parse runtime arguments.  Stop at first unrecognized option.</span></span><br><span class="line">...... </span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (!parentDir) &#123;</span><br><span class="line">            parentDir = arg;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--zygote"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            niceName = <span class="string">"zygote"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--start-system-server"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--application"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">"--nice-name="</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName = arg + <span class="number">12</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            className = arg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将 进程名 修改为 zygote</span></span><br><span class="line">    <span class="keyword">if</span> (niceName &amp;&amp; *niceName) &#123;</span><br><span class="line">        setArgv0(argv0, niceName);</span><br><span class="line">        set_process_name(niceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runtime.mParentDir = parentDir;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        <span class="comment">// start zygote 的实现</span></span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>,</span><br><span class="line">                startSystemServer ? <span class="string">"start-system-server"</span> : <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        <span class="comment">// Remainder(剩余) of args get passed to startup class main()</span></span><br><span class="line">        runtime.mClassName = className;</span><br><span class="line">        runtime.mArgC = argc - i;</span><br><span class="line">        runtime.mArgV = argv + i;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>,</span><br><span class="line">                application ? <span class="string">"application"</span> : <span class="string">"tool"</span>);</span><br><span class="line">    ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="AndroidRuntime-cpp"><a href="#AndroidRuntime-cpp" class="headerlink" title="AndroidRuntime.cpp"></a>AndroidRuntime.cpp</h5>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/AndroidRuntime.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AndroidRuntime::start</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> <span class="keyword">char</span>* options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/* start the virtual machine 初始化 JNI 接口 */</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.Init(<span class="literal">NULL</span>);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="comment">//启动虚拟机</span></span><br><span class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onVmCreated(env);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//Register android functions.  注册系统需要的 jni 函数，可以加载你定制的东西</span></span><br><span class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Unable to register all android natives\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> ......</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Start VM.  This thread becomes the main thread of the VM, and will</span></span><br><span class="line"><span class="comment">     * not return until the VM exits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"JavaVM unable to locate class '%s'\n"</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>,</span><br><span class="line">            <span class="string">"([Ljava/lang/String;)V"</span>);</span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"JavaVM unable to find main() in '%s'\n"</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//调用　com.android.internal.os.ZygoteInit</span></span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="zygoteInit-java"><a href="#zygoteInit-java" class="headerlink" title="zygoteInit.java"></a>zygoteInit.java</h5><ul><li><p>registerZygoteSocket</p><ul><li>创建一个服务socket 关于 zygote命令连接</li><li>用于 IPC 的 Socket</li></ul></li><li><p>preload  </p><ul><li>preloadClasses()<ul><li>执行时间较长，这个是导致系统启动慢的主要原因，可以对此进行优化</li></ul></li><li>preloadResources()<ul><li>加载framework-res.apk 中的资源</li></ul></li><li>preloadOpenGL()</li></ul></li><li><p>startSystemServer</p><ul><li>创建Java 世界系统 Service 所驻留的进程 system_server，该进程是 framework 的核心</li><li>如果它死了，导致zygote自杀</li></ul></li><li><p>runSelectLoop</p><ul><li>处理客户端与客户的请求。其中客户在zygote中用的是Zygoteconnection对象来表示</li><li>客户的请求由ZygoteConnection 的 runOnce 来处理</li></ul></li><li><p>closeServerSocket</p></li></ul><h5 id="RuntimeInit-java"><a href="#RuntimeInit-java" class="headerlink" title="RuntimeInit.java"></a>RuntimeInit.java</h5><ul><li>JNI 调用<ul><li>private static final native void nativeZygoteInit();</li><li>private static final native void nativeFinishInit();</li><li>private static final native void     nativeSetExitWithoutCleanup(boolean exitWithoutCleanup);</li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>创建<strong>AppRuntime</strong>对象，并调用他得start。此后的活动规则将由AppRuntime来控制</li><li>调用<strong>startVm</strong> 创建 Java 虚拟机，然后调用 <strong>startReg</strong> 来注册 JNI 函数</li><li>JNI 调用 <strong>ZygoteInit</strong> 进入Java</li><li>调用 <strong>regiesterZygoteSocket</strong> ,使它可以相应子孙后代的请求。同时zygote 调用 <strong>preload</strong> 函数</li><li>zygote 通过调用 <strong>startSystemServer</strong> 函数分裂子进程 <strong>system_server</strong> 来为Java世界服务</li><li>zygote完成Java的初始工作，然后调用 <strong>runSelectLoop</strong> ，直到接受到请求就会随时醒来进行服务</li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>Zygote fork要单线程</li><li>Zygote的IPC没有采用binder，采取的是本地socket。也就是说应用程序的binder机制并不是由此继承的，而是应用程序进程创建之后自己启动的</li></ul><h4 id="疑问点"><a href="#疑问点" class="headerlink" title="疑问点"></a>疑问点</h4><ul><li>孵化应用为什么不交给SystemServer来做，而专门设计了Zygote？<ul><li>Zygote中启动了虚拟机，以及preload函数加载各种资源，在此处做好了较耗时的初始化操作，子线程在fork中就能直接共享</li></ul></li><li>Zygote为啥不采取binder机制？采取的话有什么问题？<ul><li>简单而言就是Zygote与SystemServer是属于继承关系，没有必要使用想对复杂的binder机制。如果采取的话，SystemServer因为继承关系，得到了Zygote的binder信息，造成了数据公用</li></ul></li></ul><p>博客基于　<code>Android版本 4.4.4_r1_KTU84P</code></p>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码之JNI的实现流程</title>
      <link href="/posts/43789/"/>
      <url>/posts/43789/</url>
      
        <content type="html"><![CDATA[<h4 id="查找关联"><a href="#查找关联" class="headerlink" title="查找关联"></a>查找关联</h4><ul><li><p>MediaScanner.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/media/java/android/media/MediaScanner</span></span><br><span class="line">     <span class="comment">//加载JNI库</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 这句话就是说　/frameworks/base/media/下的jni文件夹下　</span></span><br><span class="line">        <span class="comment">// ａｎｄｒｏid_media_MediaScanner</span></span><br><span class="line">        System.loadLibrary(<span class="string">"media_jni"</span>);</span><br><span class="line">        <span class="comment">//调用 声明的 native的   MediaScanner 方法</span></span><br><span class="line">        native_init();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//　native 关键字　将　MediaScanner　方法声明为本地实例方法，</span></span><br><span class="line"><span class="comment">//很明显的告诉ＪＶＭ这个方法在另一个语言中，请去那里实现</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>android_media_MediaScanner.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/media/java/media/jni/android_media_MediaScanner.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> kClassMediaScanner =</span><br><span class="line">        <span class="string">"android/media/MediaScanner"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">android_media_MediaScanner_native_init(JNIEnv *env)</span><br><span class="line">&#123;</span><br><span class="line">    ALOGV(<span class="string">"native_init"</span>);</span><br><span class="line">    jclass clazz = env-&gt;FindClass(kClassMediaScanner); <span class="comment">//　kClassMediaScanner　就已经定义了 Java 的哪个类可以执行这个方法</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fields.context = env-&gt;GetFieldID(clazz, <span class="string">"mNativeContext"</span>, <span class="string">"I"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fields.context == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据java中的　被声明为native的native_init的关键字，可以找到对应的cpp的实现方法是　android_media_MediaScanner_native_init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">"native_init"</span>,</span><br><span class="line">        <span class="string">"()V"</span>,</span><br><span class="line">        (<span class="keyword">void</span> *)android_media_MediaScanner_native_init</span><br><span class="line">    &#125;,    </span><br><span class="line">      ....  </span><br><span class="line">     ｝</span><br></pre></td></tr></table></figure></li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><p>JNI动态库和非JNI动态库的区别是：JNI动态库定义了一个名为 <code>JNI_OnLoader</code>函数，在动态库加载之后会被系统调用，完成JNI函数的注册</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......     <span class="comment">//　做一些初期动作                                     </span></span><br><span class="line">result = JNI_VERSION_1_4;　<span class="comment">//有效的版本号　jni.h 中定义的</span></span><br><span class="line">bail:</span><br><span class="line">    <span class="keyword">return</span> result;                                        </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理　"></a>原理　</h5><ul><li>根据函数名来找 JNI 函数，Android Studio支持</li></ul><h5 id="参考"><a href="#参考" class="headerlink" title="参考　"></a>参考　</h5><ul><li><a href="http://www.jcodecraeer.com/plus/view.php?aid=7769">JNI入门</a></li></ul><h5 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h5><ul><li>后期类名、文件名改动，头文件所有函数将失效，需要手动改，超级麻烦易出错</li><li>代码编写不方便，由于JNI层函数的名字必须遵循特定的格式，且名字特别长</li><li>会导致程序员的工作量很大，因为必须为所有声明了native函数的java类编写JNI头文件</li><li>程序运行效率低，因为初次调用native函数时需要根据根据函数名在JNI层中搜索对应的本地函数，然后建立对应关系，这个过程比较耗时</li></ul><h4 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><ul><li>JNI 允许我们提供一个函数映射表，注册给 JVM，这样 JVM 就可以用函数映射表来调用相应的函数<ul><li>因为Java native 函数和 JNI 函数 是一一对应的，所以hi有一种结构来保存着各种关系</li></ul></li></ul><h5 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h5><ul><li>利用结构体JNINativeMethod保存Java Native函数和JNI函数的对应关系</li><li>在一个JNINativeMethod数组中保存所有native函数和JNI函数的对应关系</li><li>在Java中通过System.loadLibrary加载完JNI动态库之后，调用JNI_OnLoad函数，开始动态注册</li><li>JNI_OnLoad中会调用AndroidRuntime::registerNativeMethods函数进行函数注册</li><li>AndroidRuntime::registerNativeMethods中最终调用jniRegisterNativeMethods完成注册</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ul><li><p>android_media_MediaScanner.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   Java 的哪个类,在当前cpp文件中的最开始就定义了</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> kClassMediaScannerClient =</span><br><span class="line">        <span class="string">"android/media/MediaScannerClient"</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//第一步 声明 android_media_MediaScanner_processFile 方法</span></span><br><span class="line">android_media_MediaScanner_processFile(</span><br><span class="line">        JNIEnv *env, jobject thiz, jstring path,</span><br><span class="line">        jstring mimeType, jobject client)</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">     <span class="function">MyMediaScannerClient <span class="title">myClient</span><span class="params">(env, client)</span></span>;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  MyMediaScannerClient  调用了　FindClass(kClassMediaScannerClient)　,kClassMediaScannerClient 已被声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMediaScannerClient</span> :</span> <span class="keyword">public</span> MediaScannerClient</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyMediaScannerClient(JNIEnv *env, jobject client)</span><br><span class="line">        :   mEnv(env),</span><br><span class="line">            mClient(env-&gt;NewGlobalRef(client)),</span><br><span class="line">            mScanFileMethodID(<span class="number">0</span>),</span><br><span class="line">            mHandleStringTagMethodID(<span class="number">0</span>),</span><br><span class="line">            mSetMimeTypeMethodID(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGV(<span class="string">"MyMediaScannerClient constructor"</span>);</span><br><span class="line">        jclass mediaScannerClientInterface =</span><br><span class="line">                env-&gt;FindClass(kClassMediaScannerClient); <span class="comment">// FindClass !!!kClassMediaScannerClient !!!</span></span><br><span class="line">                .......</span><br><span class="line"> ｝    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步　操作所有jni对应关系</span></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Java 中 native 函数的函数名</span></span><br><span class="line">        <span class="string">"processFile"</span>,  </span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        processFile的签名信息</span></span><br><span class="line"><span class="comment">        由参数类型和返回类型共同组成，又因为Java 支持重载，</span></span><br><span class="line"><span class="comment">        也就是可以定义同名但不同参数的函数</span></span><br><span class="line"><span class="comment">        因为仅仅根据函数名是无法找到具体函数所以JNI中，</span></span><br><span class="line"><span class="comment">        就将参数类型和返回值类型组合作为一个函数的签名信息，</span></span><br><span class="line"><span class="comment">        根据签名信息和函数名，就能顺利找到 Java 中的函数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="string">"(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V"</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里  调用 android_media_MediaScanner_processFile 方法</span></span><br><span class="line">        (<span class="keyword">void</span> *)android_media_MediaScanner_processFile</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;   </span><br><span class="line"><span class="comment">// 第三步在Java中通过System.loadLibrary加载完JNI动态库之后，调用JNI_OnLoad函数，开始动态注册</span></span><br><span class="line"><span class="comment">// 也就是　这里的　register_android_media_MediaScanner　函数</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 第四步　注册了 JNINativeMethod 数组</span></span><br><span class="line"><span class="comment">//据说　/system/lib/libmedia.so　有代码　实现　java　加载　JNI库之后，就会呼叫　JNI_OnLoad() ,然后呼叫该函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_media_MediaScanner</span><span class="params">(JNIEnv *env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//AndroidRuntime 类提供 registerNativeMethods完成注册</span></span><br><span class="line">    <span class="comment">// 第二个参数是 Java 的哪个类</span></span><br><span class="line">    <span class="comment">// env 指向一个 JNIEnv 结构体</span></span><br><span class="line">    <span class="keyword">return</span> AndroidRuntime::registerNativeMethods(env,</span><br><span class="line">                kClassMediaScanner, gMethods, NELEM(gMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AndroidRuntime.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第五步　</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AndroidRuntime::registerNativeMethods</span><span class="params">(JNIEnv* env ,<span class="keyword">const</span> <span class="keyword">char</span>* className , </span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">const</span> JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//调用 jniRegisterNativeMethods 函数完成注解</span></span><br><span class="line">    <span class="comment">// jniRegisterNativeMethods 是 Android 平台方便 JNI 使用提供的一个帮助类</span></span><br><span class="line">    <span class="keyword">return</span> jniRegisterNativeMethods （env , className, gMethods, numMethods）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JNIHelp.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">int</span> <span class="title">jniRegisterNativeMethods</span><span class="params">(C_JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* className,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JNIEnv* e = <span class="keyword">reinterpret_cast</span>&lt;JNIEnv*&gt;(env);</span><br><span class="line"></span><br><span class="line">    <span class="function">scoped_local_ref&lt;jclass&gt; <span class="title">c</span><span class="params">(env, findClass(env, className))</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (c.get() == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span>* msg;</span><br><span class="line">        asprintf(&amp;msg, <span class="string">"Native registration unable to find class '%s'; aborting..."</span>, className);</span><br><span class="line">        e-&gt;FatalError(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(e, c.get(), gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span>* msg;</span><br><span class="line">        asprintf(&amp;msg, <span class="string">"RegisterNatives failed for '%s'; aborting..."</span>, className);</span><br><span class="line">        e-&gt;FatalError(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="动态注册的函数调用"><a href="#动态注册的函数调用" class="headerlink" title="动态注册的函数调用"></a>动态注册的函数调用</h5><ul><li><p>当 Java 层通过 <strong>System.loadLibrary</strong> 加载完 JNI 动态库之后，紧接着会查找库中一个叫做 <strong>JNI_OnLoad</strong> 的函数</p></li><li><p>如果有，就调用，而动态注册的工作就是在这里完成 </p></li><li><p>android_media_MediaPlayer.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaVM* vm  参数类型 是 JavVM ，这个是虚拟机在 JNI 层的代表，每个 Java 进程 只有一个 </span></span><br><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jint result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</span><br><span class="line">        ALOGE(<span class="string">"ERROR: GetEnv failed\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(env != <span class="literal">NULL</span>);</span><br><span class="line">......</span><br><span class="line">        <span class="comment">// 动态的注册 MediaScanner 的 JNI 函数</span></span><br><span class="line">       <span class="keyword">if</span> (register_android_media_MediaScanner(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"ERROR: MediaScanner native registration failed\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">     <span class="comment">/* success -- return valid version number */</span></span><br><span class="line">    result = JNI_VERSION_1_4;  <span class="comment">// 必须返回这个值，否则报错</span></span><br><span class="line"></span><br><span class="line">bail:</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>JNI 代码层一般都要包含 jni.h</strong> 。<u>Android源码中提供了一个帮助头文件JNIHelp.h，内部就包含了jni.h。</u></p></li></ul><h5 id="弊端-1"><a href="#弊端-1" class="headerlink" title="弊端"></a>弊端</h5><ul><li>需要编译所有声明了native方法的Java类，每个所生成的class文件 都得用javah生成一个头文件</li><li>javah生成的JNI层函数名特别长，书写起来很不方便</li><li>初次调用native函数时要根据函数名字搜索对应用JNI层函数来建立关联关系，这样会影响运行效率。</li></ul><hr><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><ul><li>Java 调用 native 函数传递的参数是 Java 数据类型，JNI 也是区别对待这二者<ul><li>Java 数据类型也分为 基本数据类型 和 引用数据类型</li></ul></li><li>除了 Java 基本数据类型的数组、Class、String和Throwable之外，其余所有Java对象的数据都在JNI中都用 object 表示</li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><ul><li><p>MediaScanner.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/media/java/android/media/MediaScanner</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">processFile</span><span class="params">(String path, String mimeType, MediaScannerClient client)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>android_media_MediaScanner.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/media/java/media/jni/android_media_MediaScanner.cpp</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line"><span class="comment">// 发现这里 是五个 参数，而java中确实3个。</span></span><br><span class="line"><span class="comment">// JNIEnv 继续看下面</span></span><br><span class="line"><span class="comment">// jobject 代表 Java层的MediaScanner 对象，表示在哪个MediaScanner 对象调用的 processFile</span></span><br><span class="line"><span class="comment">// 如果 java 层是 static 函数，那么这个参数是 jclass ,表示调用哪个 Java Class 的静态函数</span></span><br><span class="line">android_media_MediaScanner_processFile(</span><br><span class="line">        JNIEnv *env, jobject thiz, jstring path,</span><br><span class="line">        jstring mimeType, jobject client)</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="JNIEnv"><a href="#JNIEnv" class="headerlink" title="JNIEnv"></a>JNIEnv</h4><ul><li>一个与线程相关的代表 JNI 环境的结构体</li><li>都是native 函数转换成 JNI 函数后由虚拟机传进来</li></ul><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li>调用 java 函数</li><li>操作jobject 对象等很多事情</li></ul><h5 id="使用-JNIEnv"><a href="#使用-JNIEnv" class="headerlink" title="使用 JNIEnv"></a>使用 JNIEnv</h5><ul><li><p>android_media_MediaPlayer.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaVM* vm  参数类型 是 JavVM ，这个是虚拟机在 JNI 层的代表，每个 Java 进程 只有一个 </span></span><br><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java 与 JNIEnv 的关系</p><ul><li>调用 JavaVM 的 AttachCurrentThread 函数，可以得到这个线程的 JNIEnv 结构体，从而在后台线程中调用 Java 函数</li><li>在线程推出执前，需要调用 JavaVM 的 DetachCuurrentThread 函数来释放对应的资源</li></ul></li></ul><h5 id="JNIEnv-操作-jobject"><a href="#JNIEnv-操作-jobject" class="headerlink" title="JNIEnv 操作 jobject"></a>JNIEnv 操作 jobject</h5><ul><li><p>jobject 即 object , 即 对象 </p></li><li><p>对象 由 对象的 成员变量 和 成员函数 组成  </p></li><li><p>成员变量 和 成员函数 都是由 类 来定义</p></li><li><p>然: 在 JNI 规则中， <strong>jfieldID</strong> 和 <strong>jmethodID</strong> 表示 Java的 成员变量和成员函数，JNIEnv 提供了方法</p><ul><li>jfieldID GetFieldID (jclass clazz ,const char *name, const char *sign);</li><li>jmethodID GetMethodID (jclass clazz, const char *name,const char *sig);</li></ul></li><li><p>示例</p><ul><li><p>取出 ID</p><ul><li><p>MediaScanner.cpp :: MyMediaScannerClient</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/media/java/android/media/MediaScanner</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> kClassMediaScannerClient =</span><br><span class="line">        <span class="string">"android/media/MediaScannerClient"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyMediaScannerClient(JNIEnv *env, jobject client)</span><br><span class="line">        :   mEnv(env),</span><br><span class="line">            mClient(env-&gt;NewGlobalRef(client)),</span><br><span class="line">            mScanFileMethodID(<span class="number">0</span>),</span><br><span class="line">            mHandleStringTagMethodID(<span class="number">0</span>),</span><br><span class="line">            mSetMimeTypeMethodID(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ALOGV(<span class="string">"MyMediaScannerClient constructor"</span>);</span><br><span class="line">                </span><br><span class="line">         <span class="comment">// 根据  kClassMediaScannerClient 找 jclass 实例    </span></span><br><span class="line">        jclass mediaScannerClientInterface =</span><br><span class="line">                env-&gt;FindClass(kClassMediaScannerClient);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mediaScannerClientInterface == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"Class %s not found"</span>, kClassMediaScannerClient);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//kClassMediaScannerClient 找 scanFile 的 jMethodID</span></span><br><span class="line">            mScanFileMethodID = env-&gt;GetMethodID(</span><br><span class="line">                                    mediaScannerClientInterface,</span><br><span class="line">                                    <span class="string">"scanFile"</span>,</span><br><span class="line">                                    <span class="string">"(Ljava/lang/String;JJZZ)V"</span>);</span><br><span class="line">......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到对应的 ID 后，，才发现都被设置为 MyMediaScannerClient 的 成员变量</span></span><br><span class="line"><span class="comment">// 实际设计 一个关于程序 运行效率的 知识点</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>操作 ID </p><ul><li><p>MediaScanner.cpp :: MyMediaScannerClient 的 scanFile</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">status_t</span> <span class="title">scanFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path, <span class="keyword">long</span> <span class="keyword">long</span> lastModified,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">long</span> <span class="keyword">long</span> fileSize, <span class="keyword">bool</span> isDirectory, <span class="keyword">bool</span> noMedia)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ALOGV(<span class="string">"scanFile: path(%s), time(%lld), size(%lld) and isDir(%d)"</span>,</span><br><span class="line">        path, lastModified, fileSize, isDirectory);</span><br><span class="line">      </span><br><span class="line">    jstring pathStr;</span><br><span class="line">    <span class="keyword">if</span> ((pathStr = mEnv-&gt;NewStringUTF(path)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        mEnv-&gt;ExceptionClear();</span><br><span class="line">        <span class="keyword">return</span> NO_MEMORY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    调用 JNIEnv 的 CallVoidMethod 函数</span></span><br><span class="line"><span class="comment">    第一个是代表 MediaScannerClient 的 jobject 对象</span></span><br><span class="line"><span class="comment">    第二个是 函数 scanFile 的 jmethodID，后面是 Java 中 scanFile的参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">      </span><br><span class="line">    mEnv-&gt;CallVoidMethod(mClient, mScanFileMethodID, pathStr, lastModified,</span><br><span class="line">            fileSize, isDirectory, noMedia);</span><br><span class="line">      </span><br><span class="line">    mEnv-&gt;DeleteLocalRef(pathStr);</span><br><span class="line">    <span class="keyword">return</span> checkAndClearExceptionFromCallback(mEnv, <span class="string">"scanFile"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JNIEnv 操作 jobject 成员函数</p><ul><li><p>非静态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NativeType Call&lt;type&gt;Method(JNIEnv *env, jobject obj,jmethodID methodid ...)</span><br></pre></td></tr></table></figure></li><li><p>静态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NativeType CallStatic&lt;type&gt;Method(JNIEnv *env, jobject obj,jmethodID methodid ...)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JNIEnv 操作 jobject 成员变量</p><ul><li><p>获取 jobject 对应的成员变量的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NativeType Call&lt;type&gt;Feild(JNIEnv *env, jobject obj,jfieldID fieldID )</span><br></pre></td></tr></table></figure></li><li><p>设置 jobject 对应的成员变量的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Set&lt;type&gt;Feild(JNIEnv *env, jobject obj,jfieldID fieldID, NativeType value)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>但是实际操作操作中，<code>动态JNI使用</code>还是有些区别的,可以看下我在网上找到的这篇</li><li><a href="https://juejin.im/entry/5885b019128fe1006c3f0149">JNI 两种注册过程实战</a>，内含详细代码</li><li>本博客基于　<code>基于Android版本  5.1_LMY47D</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> Jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统APP</title>
      <link href="/posts/28190/"/>
      <url>/posts/28190/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>只是为了实现一个用户不可卸载的app</li><li><a href="https://github.com/wl960127/ChangeAnim">代码传送门</a></li></ul><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>因为是直接aosp镜像，所以后面发现/system/media  目录下并没有bootaimation.zip。所以如果想要替换动画的话，直接将下载的bootanimation.zip文件复制到/system/media 里面。<ul><li>论坛上也说，最好放在 /data/local目录下，因为会优先在这个文件夹获取。</li><li>开机动画三个顺序<ul><li>一 linux小企鹅</li><li>二 Android字样</li><li>三 自定义的，如果没有就现实第二个</li></ul></li></ul></li></ul><h4 id="关于开机动画push"><a href="#关于开机动画push" class="headerlink" title="关于开机动画push"></a>关于开机动画push</h4><ul><li>adb shell</li><li>su</li><li>mount -o remount,rw /system    (<strong>注意</strong>，这是直接完整的一句)</li><li>adb push  (完整路径)/bootanimation.zip  /system/media/bootanimation.zip<ul><li>书上说，会有优先检查/data/local路径下面有没有 bootanimation.zipadb shell reboot </li><li>注意一下zip文件，因为机型不一样。所以你会发现开机动画很小。     </li></ul></li></ul><h4 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h4><ul><li>push动画之后，重启打开app，并没有获取到任何开机动画，没有效果。当然，可能情况不一样吧。</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>了解　<a href="https://blog.csdn.net/godiors_163/article/details/72529210">Android开机动画</a> </li><li>参考 Android深度探索(卷2) </li><li>Android版本 4.4.4_r1_KTU84P</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 源码中创建App</title>
      <link href="/posts/42241/"/>
      <url>/posts/42241/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>参看　<code>Ubuntu编译Android源码并刷机</code>，配置环境</li><li><a href="https://github.com/wl960127/HelloWrold">Demo传送</a> </li></ul><h4 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h4><ul><li><p>参考的老罗的，但是有点问题，后来就在网上找了</p></li><li><p>链接如下 <a href="https://blog.csdn.net/zhonglunshun/article/details/70256727">移植HelloWorld</a></p><ul><li>LOCAL_MODULE_TAGS的备选值有user，eng，tests，optional，本示例中使用的TAGS值为eng（工程模式，自带root），因此，仅当用户指定的编译选项为eng时才会编译该工程。否则会停止编译，默认值为optional </li><li><strong>Android.mk</strong></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="comment">#清理缓存变量</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"><span class="comment">#表示目标模式</span></span><br><span class="line">LOCAL_MODULE_TAGS := samples</span><br><span class="line"><span class="comment">#表示源文件编译路径 这个应用里面只有java源文件</span></span><br><span class="line">LOCAL_SRC_FILES := <span class="variable">$(<span class="built_in">call</span> all-java-files-under, src)</span></span><br><span class="line"><span class="comment">#表示项目包名也就是模块名，在项目中唯一,就是你apk的名字。</span></span><br><span class="line">LOCAL_PACKAGE_NAME := HelloWorld</span><br><span class="line"><span class="comment">#指定编译sdk版本为当前版本</span></span><br><span class="line">LOCAL_SDK_VERSION := current</span><br><span class="line"><span class="comment"># 使用该指令编译目标Apk.</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_PACKAGE)</span></span><br><span class="line"><span class="comment">#搜索编译该源码目录下所有的mk文件，如果没有可以不写</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(<span class="built_in">call</span> all-makefiles-under,<span class="variable">$(LOCAL_PATH)</span>)</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>build/target/product/core.mk</strong></p><ul><li><p>忽略了你是没办法在编译成的system.img里面找到这个工程的</p></li><li><p>如果你是想打包在镜像中的话，所以下一步是不一定要执行</p></li><li><p>把mk文件中的标识名填上（LOCAL_PACKAGE_NAME或者LOCAL_MODULE  的值！！！！ 比如这里的是  HelloWorld \）</p></li></ul></li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_PACKAGES := \ </span><br><span class="line">DeskClock \ </span><br><span class="line">Calculator \ </span><br><span class="line">Calendar \ </span><br><span class="line">Camera2 \ </span><br><span class="line">Email \ </span><br><span class="line">HelloWorld \   <span class="comment">#这个是创建的工程</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul><li><p>在packages/apps 下创建例子 Hello文件夹</p><ul><li>AndroidManifest.xml</li><li>Android.mk</li><li>src<ul><li>com/wl/hello  (包名随意，这是一个三级目录)<ul><li>HelloAndroid.java</li></ul></li></ul></li><li>res<ul><li>layout<ul><li>main.xml</li></ul></li><li>values<ul><li>strings.xml</li></ul></li><li>drawable<ul><li>icon.png</li></ul></li></ul></li></ul></li></ul><h4 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h4><ul><li><p>根目录下先 source build/envsetup.sh  (否则没有mmm指令)</p></li><li><p>编译App</p><ul><li>在新建项目的目录下输入make 项目名</li><li>或者切换到Android源码根目录下执行下面任意一条命令即可：mmm packages/apps/项目名</li></ul></li><li><p>测试方法</p><ul><li><p>真机运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> adb shell</span><br><span class="line"> su </span><br><span class="line"> mount -o remount,rw /system    (挂载手机磁盘，并设置可读写)</span><br><span class="line">- 退出adb指令</span><br><span class="line"> adb push 本地路径  手机app路径（/sdcard）</span><br><span class="line">- 再用 复制或者移动到 (/system/app)  </span><br><span class="line"> chmod 777 .apk (操作过程中，没有执行这一步导致，开机没有被安装)</span><br><span class="line"> adb shell reboot</span><br></pre></td></tr></table></figure></li><li><p>虚拟机运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方法一：　</span><br><span class="line"> make snod</span><br><span class="line"> emulator</span><br><span class="line"> </span><br><span class="line">方法二：　Android模拟器运行编译之后的镜像</span><br><span class="line">/xxx/Sdk/emulator/emulator -avd MyPhone -system android/out/target/product/generic/system.img </span><br><span class="line"></span><br><span class="line">   - android/是Android源码位置；</span><br><span class="line">   - system.img是编译好的Android镜像；</span><br><span class="line">   - MyPhone是刚创建的模拟器名称；</span><br><span class="line">   - system选项表示在模拟器上运行指定Android镜像</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Android-系统签名"><a href="#Android-系统签名" class="headerlink" title="Android 系统签名"></a>Android 系统签名</h4><ul><li>build/target/product/security<ul><li>testkey <ul><li>默认使用，如果Android.mk不设置LOCAL_CERTIFICATE变量</li></ul></li><li>platform<ul><li>使用该签名的系统应用可以执行平台的核心功能</li></ul></li><li>shared<ul><li>使用该签名的系统应用可以和 home/contacts进程共享数据</li></ul></li><li>media<ul><li>使用该签名的系统应用将成为media/download 系统的一部分</li></ul></li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>在java文件中，使用了什么就一定要添加依赖</li><li>xml中，所有的string都要在strings.xml中定义</li><li>基于　<code>Android版本 4.4.4_r1_KTU84P</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android角标提示</title>
      <link href="/posts/38069/"/>
      <url>/posts/38069/</url>
      
        <content type="html"><![CDATA[<h4 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadgeNumberManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Context mContext;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BadgeNumberManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BadgeNumberManager <span class="title">from</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BadgeNumberManager(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BadgeNumberManager.Impl IMPL;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置应用在桌面上显示的角标数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> number 显示的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBadgeNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    IMPL.setBadgeNumber(mContext, number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Impl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBadgeNumber</span><span class="params">(Context context, <span class="keyword">int</span> number)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplHuaWei</span> <span class="keyword">implements</span> <span class="title">Impl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBadgeNumber</span><span class="params">(Context context, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        BadgeNumberManagerHuaWei.setBadgeNumber(context, number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplVIVO</span> <span class="keyword">implements</span> <span class="title">Impl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBadgeNumber</span><span class="params">(Context context, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        BadgeNumberManagerVIVO.setBadgeNumber(context, number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplBase</span> <span class="keyword">implements</span> <span class="title">Impl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBadgeNumber</span><span class="params">(Context context, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    String manufacturer = Build.MANUFACTURER;</span><br><span class="line">    <span class="keyword">if</span> (manufacturer.equalsIgnoreCase(<span class="string">"Huawei"</span>)) &#123;</span><br><span class="line">        IMPL = <span class="keyword">new</span> ImplHuaWei();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (manufacturer.equalsIgnoreCase(<span class="string">"vivo"</span>)) &#123;</span><br><span class="line">        IMPL = <span class="keyword">new</span> ImplVIVO();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (manufacturer.equalsIgnoreCase(<span class="string">"XXX"</span>)) &#123;</span><br><span class="line">        <span class="comment">//其他品牌机型的实现类</span></span><br><span class="line">        IMPL = <span class="keyword">new</span> ImplXXX();</span><br><span class="line">        ......</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        IMPL = <span class="keyword">new</span> ImplBase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><p><a href="https://juejin.im/post/59f2e59751882578c17ee275">有关Android应用桌面角标(BadgeNumber)实现的探讨</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ弹窗消息</title>
      <link href="/posts/34068/"/>
      <url>/posts/34068/</url>
      
        <content type="html"><![CDATA[<p><strong>QQ弹窗消息</strong></p><ul><li><p>指定广播接收者</p></li><li><p>广播接收者接收到对应action，判断是否锁屏状态</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (action.equals(<span class="string">"xxxxxxxxxxx"</span>)) &#123;</span><br><span class="line">        <span class="comment">//管理锁屏的一个服务</span></span><br><span class="line">        KeyguardManager km = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);</span><br><span class="line">        String text = km.inKeyguardRestrictedInputMode() ? <span class="string">"锁屏了"</span> : <span class="string">"屏幕亮着的"</span>;</span><br><span class="line">        Log.i(TAG, <span class="string">"text: "</span> + text);</span><br><span class="line">        <span class="keyword">if</span> (km.inKeyguardRestrictedInputMode()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onReceive:锁屏了 "</span>);</span><br><span class="line">            <span class="comment">//判断是否锁屏</span></span><br><span class="line">            Intent alarmIntent = <span class="keyword">new</span> Intent(context, MessageActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//在广播中启动Activity的context可能不是Activity对象，所以需要添加NEW_TASK的标志，否则启动时可能会报错。</span></span><br><span class="line">            alarmIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            context.startActivity(alarmIntent); <span class="comment">//启动显示锁屏消息的activity</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>如果是锁屏，弹出对应的消息提示界面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Context mContext;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Log.i(<span class="string">"tag"</span>, <span class="string">"onCreate:启动了消息内容的activity "</span>);</span><br><span class="line">    <span class="comment">//四个标志位顾名思义，分别是锁屏状态下显示，解锁，保持屏幕长亮，打开屏幕。这样当Activity启动的时候，它会解锁并亮屏显示。</span></span><br><span class="line">    Window win = getWindow();</span><br><span class="line">    win.addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED <span class="comment">//锁屏状态下显示</span></span><br><span class="line">            | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD <span class="comment">//解锁</span></span><br><span class="line">            | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON <span class="comment">//保持屏幕长亮</span></span><br><span class="line">            | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON); <span class="comment">//打开屏幕</span></span><br><span class="line">    <span class="comment">//使用手机的背景</span></span><br><span class="line">    Drawable wallPaper = WallpaperManager.getInstance(<span class="keyword">this</span>).getDrawable();</span><br><span class="line">    win.setBackgroundDrawable(wallPaper);</span><br><span class="line">    setContentView(R.layout.activity_message);</span><br><span class="line"></span><br><span class="line">    mContext = <span class="keyword">this</span>;</span><br><span class="line">    initView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onNewIntent(intent);</span><br><span class="line">    <span class="comment">//获取电源管理器对象</span></span><br><span class="line"><span class="comment">//        PowerManager pm = (PowerManager) this.getSystemService(Context.POWER_SERVICE);</span></span><br><span class="line"><span class="comment">//        if (!pm.isScreenOn()) &#123;</span></span><br><span class="line"><span class="comment">//            PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.ACQUIRE_CAUSES_WAKEUP |</span></span><br><span class="line"><span class="comment">//                    PowerManager.SCREEN_BRIGHT_WAKE_LOCK, "bright");</span></span><br><span class="line"><span class="comment">//            wl.acquire();  //点亮屏幕</span></span><br><span class="line"><span class="comment">//            wl.release();  //任务结束后释放</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    findViewById(R.id.message_layout).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//先解锁系统自带锁屏服务，放在锁屏界面里面</span></span><br><span class="line">            KeyguardManager keyguardManager = (KeyguardManager) mContext.getSystemService(Context.KEYGUARD_SERVICE);</span><br><span class="line">            keyguardManager.newKeyguardLock(<span class="string">""</span>).disableKeyguard(); <span class="comment">//解锁</span></span><br><span class="line">            <span class="comment">//点击进入消息对应的页面</span></span><br><span class="line">            mContext.startActivity(<span class="keyword">new</span> Intent(mContext, DetailsActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>设置弹窗界面</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu编译Android源码</title>
      <link href="/posts/48985/"/>
      <url>/posts/48985/</url>
      
        <content type="html"><![CDATA[<h4 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h4><ul><li>不好意思,自行百度</li><li>反正最好分个 150G以上，然后内存起码 4G</li></ul><hr><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><ul><li><p>一般默认 python 版本是 2.x的，所以3.x是会报错</p></li><li><p>Android6的话 ,直接安装openjdk7，其他的话，查看下面的编译环境配置和编译要求</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//不存在则安装</span><br><span class="line">sudo apt-get install openjdk-7-jdk</span><br><span class="line">// 找到对应路径，配置环境</span><br><span class="line">echo export JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/" &gt;&gt; ~/.bashrc</span><br><span class="line">// 生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>git </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">git config --global user.name "Github的名字" </span><br><span class="line">git config --global user.email "Github的Email"</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://blog.csdn.net/carina_cao/article/details/91376042">修改清华镜像源</a>  (否则安装依赖会有问题)</p></li><li><p>安装依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 \</span><br><span class="line">libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib \</span><br><span class="line">tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 \</span><br><span class="line">dpkg-dev libsdl1.2-dev libesd0-dev \</span><br><span class="line">git-core gnupg flex bison gperf build-essential  \</span><br><span class="line">zip curl zlib1g-dev gcc-multilib g++-multilib \</span><br><span class="line">libc6-dev-i386 \</span><br><span class="line">lib32ncurses5-dev x11proto-core-dev libx11-dev \</span><br><span class="line">lib32z-dev ccache \</span><br><span class="line">libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><ul><li><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp#%E5%88%9D%E5%A7%8B%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%951">初始化源码环境</a></p></li><li><p>首先下载 repo 工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">如果上述 URL 不可访问，可以用下面的：</span><br><span class="line">curl -sSL  &apos;https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT&apos; |base64 -d &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后建立一个工作目录（名字任意）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir WORKING_DIRECTORY</span><br><span class="line">cd WORKING_DIRECTORY</span><br></pre></td></tr></table></figure></li><li><p>初始化仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest</span><br><span class="line">如果提示无法连接到 gerrit.googlesource.com，可以编辑 ~/bin/repo，把 REPO_URL 一行替换成下面的：</span><br><span class="line"> REPO_URL = &apos;https://gerrit-googlesource.proxy.ustclug.org/git-repo&apos;</span><br></pre></td></tr></table></figure></li><li><p>如果需要某个特定的<code>Android 版本分支</code> （<a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds">Android 版本列表</a>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-4.0.1_r1(比如4.0)</span><br></pre></td></tr></table></figure></li><li><p>同步源码树（以后只需执行这条命令来同步）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo sync</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>版本分支很重要,别忘了!!!<ul><li>实在不行,你就把源码目录写成分支名字，因为你要根据这个 <strong>分支名字</strong> 获取 <strong>细分版本号</strong></li><li>根据 <strong>细分版本号</strong> 才能下载到对应的驱动文件<br>![细分版本号](细分版本号.png</li></ul></li></ul><h4 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h4><ul><li>下载驱动！！！ 没有这个你是没法开机的，会一直在 Google 这个logo无法开机。<ul><li><a href="https://developers.google.com/android/drivers">驱动链接</a> <ul><li>找到你 <strong>对应的手机机型</strong>，根据上面的 <strong>细分版本号</strong> 下载驱动 - 两个或者三个，都下载下来。<br><img src="%E5%AF%B9%E5%BA%94%E9%A9%B1%E5%8A%A8.png" alt="对应驱动"></li></ul></li></ul></li></ul><hr><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><h5 id="驱动设置"><a href="#驱动设置" class="headerlink" title="驱动设置"></a>驱动设置</h5><ul><li><p>这时候你已经下载完了把，把刚刚<strong>下载的驱动解压到源码目录下</strong>。</p><ul><li>会是多个.sh文件 <strong>像这样</strong>：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extract-lge-hammerhead.sh </span><br><span class="line">extract-broadcom-hammerhead.sh</span><br><span class="line">extract-qcom-hammerhead.sh</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>源码目录下执行 .sh 文件。 </p></li><li><p>像这样 <code>./extract-lge-hammerhead.sh</code></p><ul><li><p>然后就出现一堆英文，不要管它。直接 <strong>按Enter一路向下，直到你看到第8条</strong>，然后注意 继续Enter，最后会有一个什么什么的，<strong>需要你输入 I ACCEPT</strong>，一定要全部大写，不然再执行一边呗。</p></li><li><p>三个都要这样操作 - 这时候，源码路径下就会有一个 <strong>vendor</strong> 的文件夹- 然后开始编译了 ，如果你环境配置正确。</p><h5 id="正式编译"><a href="#正式编译" class="headerlink" title="正式编译"></a>正式编译</h5></li><li><p><a href="https://source.android.com/setup/initializing#installing-required-packages-ubuntu-1404">Linux编译环境配置</a></p></li><li><p><a href="https://source.android.com/setup/requirements">编译要求</a></p></li><li><p>这里会告诉你哪个Android版本需要哪个jdk版本 - 在Ubuntu 14.04 64位的基础上，编译4.4和6.0实际上只是一个使用jdk6一个使用openjdk7的区别。起码在我自己编译的时候是这样子</p></li><li><p>还有就是如果开始编译6.0 使用的 apt-get install openjdk7，后面你又打算编译4.4。那么在你安装jdk1.6.0_xxx.bin的时候，记得apt-get remove openjdk-7-jre 什么的，有三个反正不知道啥你就 tab 键，否则 jdk-version 一直是1.7，就算你修改了 /erc/profile 还是 ~/.bashrc 官方说是Android7-8使用<strong>openjdk8</strong>，5-6使用<strong>openjdk7</strong>,2.3-4.4使用<strong>jdk6</strong> - 编译前配置  </p></li></ul></li></ul><ul><li><p>编译优化</p><ul><li><p>在 .bashrc文件中添加</p><p><code>echo export USE_CCACE=1 &gt;&gt; ~/.bashrc</code></p><ul><li>为了提高编译效率，设置编译器高速缓存，可执行以下命令： <ul><li>prebuilts/misc/linux-x86/ccache/ccache -M 30G  （如果系统没有的话，好像是sdk还是ndk里面有这个文件，都没有就算了吧🤔）</li><li>这个 30G 根据自己的硬盘空间大小继续调整 </li></ul></li></ul></li></ul></li><li><p>开始编译</p><ul><li><p>源码路径下 </p></li><li><p>source . build/envsetup.sh </p></li></ul><ul><li><p>lunch </p></li><li><p>make -j4 或者 make -j8 或者 make -j16,看你配置了</p></li></ul></li></ul><hr><ul><li><p>关于  <strong>lunch</strong>   比如我是Nexus5，所以选择 19</p><ul><li>aosp_hammerhead_userdebug  <img src="%E5%AF%B9%E5%BA%94%E9%95%9C%E5%83%8F%E7%BC%96%E5%8F%B7.png" alt="image"><br><img src="%E5%90%8E%E7%BC%80%E5%8C%BA%E5%88%86.png" alt="image"></li></ul><ul><li>user 用于正式产品 </li></ul></li><li><p>userdebug 和user类似，但是有root权限，并且可以调试，主要用于调试</p><ul><li>eng 开发用的选项，配有额外的调试工具。</li><li>如果编译后只在模拟器上运行，则lunch后可以就直接输入：1</li><li><strong><a href="https://source.android.com/source/running">特定设备上运行编译系统的详细信息 </a></strong></li></ul></li><li><p>我是两三个小时直接编译成功，看配置和人品吧，啊哈哈哈哈。</p></li></ul><hr><h4 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h4><ul><li><p>sudo adb reboot bootloader</p><ul><li><p>这个时候可能adb devices 你会发现找不到设备</p></li><li><p>如果是虚拟机的话，点开上面那个 <strong>虚拟机</strong> 选项，<strong>可移动设备</strong></p></li><li><p>然后 <strong>连接</strong></p></li></ul></li></ul><ul><li><p>可以执行下解锁命令</p><ul><li>fastboot oem unlock </li></ul></li><li><p>fastboot -w flashall </p></li><li><p>然后就会自动重启，开机。</p></li></ul><hr><p> <img src="%E5%A4%B1%E8%B4%A5.jpg" alt="失败"></p><hr><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><h5 id="Building-Android-from-sources-unsupported-reloc-43"><a href="#Building-Android-from-sources-unsupported-reloc-43" class="headerlink" title="Building Android from sources: unsupported reloc 43"></a>Building Android from sources: unsupported reloc 43</h5><ul><li><p>Ubuntu16.04  64位编译５.1时候出现的一个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">libnativehelper/JniInvocation.cpp:165: error: unsupported reloc 43</span><br><span class="line">libnativehelper/JniInvocation.cpp:165: error: unsupported reloc 43</span><br><span class="line">libnativehelper/JniInvocation.cpp:165: error: unsupported reloc 43</span><br><span class="line">libnativehelper/JniInvocation.cpp:165: error: unsupported reloc 43</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br><span class="line">build/core/host_shared_library_internal.mk:44: recipe for target &apos;out/host/linux-x86/obj32/lib/libnativehelper.so&apos; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj32/lib/libnativehelper.so] Error 1</span><br></pre></td></tr></table></figure></li></ul><p>解决方法<br>  方法一：　源码目录/art/build/Android.common_build.mk<br>      <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Host.</span></span><br><span class="line">ART_HOST_CLANG := false</span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(WITHOUT_HOST_CLANG)</span>,true)</span><br><span class="line">  <span class="comment"># By default, host builds use clang for better warnings.</span></span><br><span class="line">  ART_HOST_CLANG := true</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改成 ifeq ($(WITHOUT_HOST_CLANG),false)　</span></span><br><span class="line"><span class="comment"># 但是对我的问题没有卵用</span></span><br><span class="line"><span class="comment"># Host.</span></span><br><span class="line">ART_HOST_CLANG := false</span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(WITHOUT_HOST_CLANG)</span>,false)　</span><br><span class="line">  <span class="comment"># By default, host builds use clang for better warnings.</span></span><br><span class="line">  ART_HOST_CLANG := true</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure></p><p>方法二:<br>      cp /usr/bin/ld.gold   源码目录/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld</p><ul><li>原文链接　<a href="https://stackoverflow.com/questions/36048358/building-android-from-sources-unsupported-reloc-43">Building Android from sources: unsupported reloc 43</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Txt本地阅读器</title>
      <link href="/posts/18711/"/>
      <url>/posts/18711/</url>
      
        <content type="html"><![CDATA[<ul><li>本地阅读txt实现<ul><li>获取章节</li><li>绘制文字</li><li>点击章节进行读取</li></ul></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><p>&emsp;&emsp;这个的话 在18年1月的时候是不能直接运行的,记得切换到17年11月份的版本. 因为该作者打算翻新,所以还在更新</br><a href="http://blog.csdn.net/qq_33705491/article/details/53228996?locationNum=2&fps=1">一个android本地txt阅读器的思路与实现</a> </br></br>&emsp;&emsp;这个的话,其实可以作为依赖直接使用.可以参考一下上面的分章实现,结合一下.分章结果会好些.</br><a href="https://github.com/bifan-wei/HwTxtReader#hwtxtreader">HwTxtReader</a> </p><p>此篇章参考demo　　<a href="http://blog.csdn.net/qq_33705491/article/details/53228996?locationNum=2&fps=1">一个android本地txt阅读器的思路与实现</a> </p><p> 1.　获取章节<br>&emsp;&emsp;之所以把获取章节放在最前面,是因为这个初步效果实现起来最快.</br></p><p>&emsp;&emsp; Chapter.java  //章节bean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个属性看个人需求吧</span></span><br><span class="line"><span class="keyword">private</span> String chapterName;     <span class="comment">//章节名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> chapterBytePosition, chapterParagraphPosition;  <span class="comment">//章节字符  段落字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChapterName</span><span class="params">(String chapterName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.chapterName = chapterName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getChapterName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  chapterName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChapterBytePosition</span><span class="params">(<span class="keyword">int</span> chapterBytePosition)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.chapterBytePosition = chapterBytePosition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChapterBytePosition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chapterBytePosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChapterParagraphPosition</span><span class="params">(<span class="keyword">int</span> chapterParagraphPosition)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.chapterParagraphPosition = chapterParagraphPosition;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChapterParagraphPosition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chapterParagraphPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Chapter&#123;"</span> +</span><br><span class="line">            <span class="string">"chapterName='"</span> + chapterName + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", chapterBytePosition="</span> + chapterBytePosition +</span><br><span class="line">            <span class="string">", chapterParagraphPosition="</span> + chapterParagraphPosition +</span><br><span class="line">            <span class="string">'&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="emsp-emsp-主要实现方法"><a href="#emsp-emsp-主要实现方法" class="headerlink" title="&emsp;&emsp;主要实现方法:"></a>&emsp;&emsp;主要实现方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">putPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path)), <span class="string">"GBK"</span>);</span><br><span class="line"></span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String temp;</span><br><span class="line">        Chapter chapter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((temp = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//下一句是最主要的  但是基本格式都是差不多 ,可能需要自行替换</span></span><br><span class="line">        <span class="comment">//我碰到的问题是有部分章节是重复的 </span></span><br><span class="line">        <span class="comment">//所以我就 把 ''章'' 修改为 ''章  '',我这加了空格. 毕竟一般章节这一行都会进行换行处理</span></span><br><span class="line">                        <span class="keyword">if</span> (temp.contains(<span class="string">"第"</span>) &amp;&amp; temp.contains(<span class="string">"章"</span>)) &#123;</span><br><span class="line">                        <span class="comment">// new 章节的实例对象    </span></span><br><span class="line">                        <span class="comment">//将设置好的对象加入列表格式展示出来</span></span><br><span class="line">                            chapter = <span class="keyword">new</span> Chapter();</span><br><span class="line">                            chapter.setChapterName(temp);</span><br><span class="line">                            chapter.setBookName(book.getBookName());</span><br><span class="line">                            chapter.setChapterParagraphPosition(i);</span><br><span class="line">                            Log.e(<span class="string">"A"</span>, chapter.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 输出效果:<br>…</br>Chapter{chapterName=’第二卷 第3642章 炎山天城’, chapterBytePosition=0, chapterParagraphPosition=300578}</br>Chapter{chapterName=’第二卷 第3643章 来自魂河的消息’, chapterBytePosition=0, chapterParagraphPosition=300660}</br>…</p><h4 id="2-绘制文字"><a href="#2-绘制文字" class="headerlink" title="2.　绘制文字"></a>2.　绘制文字</h4><p>&emsp;&emsp;   一开始也没什么头绪，最开始觉得ｔｘｔ文本阅读，无非就是TextView + ViewPager. </br>其实思路也没毛病，只不过看了别人代码才知道．．．　一首&lt;&lt;没那么简单&gt;&gt;送给自己！</p><ul><li>自定义绘制文字      PageView</li><li>对PageView进行操作    PageFactory（PageView , Book）</li><li>openBook</li><li>nextPage</li><li>pageDown　（通过获取的end　进行byte的读取　然后　转换为String）,再添加到 list 中</li><li>printPage　绘制获取的 list 中的文字</li></ul><h4 id="３-点击章节跳转"><a href="#３-点击章节跳转" class="headerlink" title="３.　点击章节跳转"></a>３.　点击章节跳转</h4><ul><li><h5 id="ChapterActivity"><a href="#ChapterActivity" class="headerlink" title="ChapterActivity"></a>ChapterActivity</h5><ul><li>setOnItemClickListener<h5 id="PageActivity"><a href="#PageActivity" class="headerlink" title="PageActivity"></a>PageActivity</h5></li></ul></li><li>onActivityResult</li><li>PageFactory.getInstance().setPosition(data.getIntExtra(“position”,1));</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu创建桌面快捷键</title>
      <link href="/posts/30082/"/>
      <url>/posts/30082/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu的快捷方式都在/usr/share/applications/ 下，需在此文件夹下创建 .desktop文件。</p><p>运行</p><p>sudo gedit /usr/share/applications/android_studio.desktop</p><p>向文件中添加</p><pre><code>//路径根据自己安装的应用路径修改  studio.sh studio.png[Desktop Entry]Name = Android StudioComment= android studioExec=/opt/android-studio/bin/studio.shIcon=/opt/android-studio/bin/studio.pngTerminal=falseType=Application</code></pre><p>其中Exec Icon的路径需要根据自己的修改。</p><p>如果不进行下面的步骤,就会碰到图标不是想象中的那个样子,而且,点击会弹出应用启动失败.</p><p>给新文件添加执行权限。这样普通用户也能执行此文件</p><p>sudo chmod +x /usr/share/applications/android_studio.desktop</p><p>使用root权限打开文件夹窗口：</p><p>sudo nautilus /usr/share/applications</p><p>找到android_studio.desktop文件，把文件拖动到Launcher条上即可。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
